// This file was generated based on '(multiple files)'.
// WARNING: Changes might be lost if you edit this file directly.

#include <_root.FuseControlsNav-5957af4b.h>
#include <_root.FuseControlsScr-9ec964eb.h>
#include <_root.FuseControlsScr-aa76e788.h>
#include <Fuse.Android.Controls.WebView.h>
#include <Fuse.Animations.Animator.h>
#include <Fuse.Animations.Change-1.h>
#include <Fuse.Animations.Move.h>
#include <Fuse.Animations.Scale.h>
#include <Fuse.Animations.TrackAnimator.h>
#include <Fuse.Animations.Trans-d75ee66a.h>
#include <Fuse.AppBase.h>
#include <Fuse.Common.Blitter.h>
#include <Fuse.Controls.Arc.h>
#include <Fuse.Controls.BottomB-6dd658c0.h>
#include <Fuse.Controls.BottomF-6645711e.h>
#include <Fuse.Controls.Buffere-b16fed02.h>
#include <Fuse.Controls.ButtonBase.h>
#include <Fuse.Controls.Circle.h>
#include <Fuse.Controls.CommonN-50bac89f.h>
#include <Fuse.Controls.CommonN-a5e9f0f0.h>
#include <Fuse.Controls.CommonNavigation.h>
#include <Fuse.Controls.CommonN-eea7192b.h>
#include <Fuse.Controls.ContentControl.h>
#include <Fuse.Controls.Control.h>
#include <Fuse.Controls.Curve.h>
#include <Fuse.Controls.CurveClose.h>
#include <Fuse.Controls.CurveExtrude.h>
#include <Fuse.Controls.CurvePo-126acceb.h>
#include <Fuse.Controls.CurvePoint.h>
#include <Fuse.Controls.CurveStyle.h>
#include <Fuse.Controls.DatePic-2f556092.h>
#include <Fuse.Controls.DatePic-50592439.h>
#include <Fuse.Controls.DatePic-72c8ccc5.h>
#include <Fuse.Controls.DatePicker.h>
#include <Fuse.Controls.DatePickerBase.h>
#include <Fuse.Controls.DatePickerStyle.h>
#include <Fuse.Controls.Default-165a85e8.h>
#include <Fuse.Controls.DockPanel.h>
#include <Fuse.Controls.Downloa-f8286625.h>
#include <Fuse.Controls.EdgeNavigator.h>
#include <Fuse.Controls.Element-5a5ab57d.h>
#include <Fuse.Controls.Ellipse.h>
#include <Fuse.Controls.EllipticalShape.h>
#include <Fuse.Controls.Extensions.h>
#include <Fuse.Controls.Fallbac-3e74dd2.h>
#include <Fuse.Controls.Fallbac-4288623.h>
#include <Fuse.Controls.FitMode.h>
#include <Fuse.Controls.Graphic-10c6366e.h>
#include <Fuse.Controls.Graphic-eb06b454.h>
#include <Fuse.Controls.GraphicsView.h>
#include <Fuse.Controls.IDatePickerView.h>
#include <Fuse.Controls.Image.h>
#include <Fuse.Controls.ImageElementDraw.h>
#include <Fuse.Controls.INativeViewRoot.h>
#include <Fuse.Controls.IProxyH-c4b54712.h>
#include <Fuse.Controls.IProxyHost.h>
#include <Fuse.Controls.ISourceReceiver.h>
#include <Fuse.Controls.ITextRenderer.h>
#include <Fuse.Controls.ITimePickerView.h>
#include <Fuse.Controls.IWebView.h>
#include <Fuse.Controls.JavaScriptCall.h>
#include <Fuse.Controls.LayoutC-65c0f659.h>
#include <Fuse.Controls.LayoutControl.h>
#include <Fuse.Controls.LoadHtmlCall.h>
#include <Fuse.Controls.Native.-1265214f.h>
#include <Fuse.Controls.Native.-15292773.h>
#include <Fuse.Controls.Native.-17411f45.h>
#include <Fuse.Controls.Native.-27540f3a.h>
#include <Fuse.Controls.Native.-32a4f4f8.h>
#include <Fuse.Controls.Native.-3448df41.h>
#include <Fuse.Controls.Native.-38872408.h>
#include <Fuse.Controls.Native.-3a2aa95c.h>
#include <Fuse.Controls.Native.-4ff8810.h>
#include <Fuse.Controls.Native.-677c303b.h>
#include <Fuse.Controls.Native.-7013e868.h>
#include <Fuse.Controls.Native.-82d49dd8.h>
#include <Fuse.Controls.Native.-8e4d141f.h>
#include <Fuse.Controls.Native.-9055de0d.h>
#include <Fuse.Controls.Native.-b07ddabd.h>
#include <Fuse.Controls.Native.-b0a6f14d.h>
#include <Fuse.Controls.Native.-bb2cda96.h>
#include <Fuse.Controls.Native.-c95850ba.h>
#include <Fuse.Controls.Native.-db9b6e00.h>
#include <Fuse.Controls.Native.-dc7eb731.h>
#include <Fuse.Controls.Native.-f2ca26a3.h>
#include <Fuse.Controls.Native.-fb0b7944.h>
#include <Fuse.Controls.Native.-fe1c0248.h>
#include <Fuse.Controls.Native.ITextView.h>
#include <Fuse.Controls.Native.IView.h>
#include <Fuse.Controls.Native.IViewHost.h>
#include <Fuse.Controls.NativeV-a0b2ed55.h>
#include <Fuse.Controls.NativeV-b5441b86.h>
#include <Fuse.Controls.NativeV-d657b56.h>
#include <Fuse.Controls.NativeViewHost.h>
#include <Fuse.Controls.Navigat-11aed9ab.h>
#include <Fuse.Controls.Navigat-37e0fdce.h>
#include <Fuse.Controls.Navigat-393da821.h>
#include <Fuse.Controls.Navigat-40aad288.h>
#include <Fuse.Controls.Navigat-41e3a383.h>
#include <Fuse.Controls.Navigat-4bb12161.h>
#include <Fuse.Controls.Navigat-4dceb234.h>
#include <Fuse.Controls.Navigat-64ddb643.h>
#include <Fuse.Controls.Navigat-68008d77.h>
#include <Fuse.Controls.Navigat-888988e6.h>
#include <Fuse.Controls.Navigat-8fa967c8.h>
#include <Fuse.Controls.Navigat-a4330218.h>
#include <Fuse.Controls.Navigat-a4bf70c.h>
#include <Fuse.Controls.Navigat-a68fd529.h>
#include <Fuse.Controls.Navigat-a777c86b.h>
#include <Fuse.Controls.Navigat-ab585865.h>
#include <Fuse.Controls.Navigat-b1ca1d4.h>
#include <Fuse.Controls.Navigat-b6ea3ba5.h>
#include <Fuse.Controls.Navigat-e0eff304.h>
#include <Fuse.Controls.Navigat-e5b213cd.h>
#include <Fuse.Controls.Navigat-e68bc464.h>
#include <Fuse.Controls.Navigat-f3d39bc3.h>
#include <Fuse.Controls.Navigat-fa80f607.h>
#include <Fuse.Controls.Navigator.h>
#include <Fuse.Controls.NavigatorSwipe.h>
#include <Fuse.Controls.PageControl.h>
#include <Fuse.Controls.PageInd-e8b1cdcd.h>
#include <Fuse.Controls.PageIndicatorDot.h>
#include <Fuse.Controls.Panel.h>
#include <Fuse.Controls.Path.h>
#include <Fuse.Controls.Path.Positioning.h>
#include <Fuse.Controls.PathExp-d0686500.h>
#include <Fuse.Controls.PathExpression.h>
#include <Fuse.Controls.PathMeasureMode.h>
#include <Fuse.Controls.PathPoi-ce16390d.h>
#include <Fuse.Controls.PathPointAtTime.h>
#include <Fuse.Controls.PathTan-2832db00.h>
#include <Fuse.Controls.PathTan-395eba79.h>
#include <Fuse.Controls.Rectangle.h>
#include <Fuse.Controls.RegularPolygon.h>
#include <Fuse.Controls.RemoveType.h>
#include <Fuse.Controls.ReuseType.h>
#include <Fuse.Controls.Router_-36968553.h>
#include <Fuse.Controls.ScrollDirections.h>
#include <Fuse.Controls.ScrollP-3a841705.h>
#include <Fuse.Controls.ScrollP-e3c40c45.h>
#include <Fuse.Controls.ScrollV-225eea28.h>
#include <Fuse.Controls.ScrollV-3c01ad07.h>
#include <Fuse.Controls.ScrollV-5558f412.h>
#include <Fuse.Controls.ScrollV-656b87cc.h>
#include <Fuse.Controls.ScrollV-692d0839.h>
#include <Fuse.Controls.ScrollV-6dad7b4a.h>
#include <Fuse.Controls.ScrollView.h>
#include <Fuse.Controls.ScrollViewBase.h>
#include <Fuse.Controls.ScrollViewPager.h>
#include <Fuse.Controls.SegmentedShape.h>
#include <Fuse.Controls.Shape.h>
#include <Fuse.Controls.Shape.R-455233c.h>
#include <Fuse.Controls.Star.h>
#include <Fuse.Controls.StatusB-1504fd78.h>
#include <Fuse.Controls.Text.h>
#include <Fuse.Controls.TextAlignment.h>
#include <Fuse.Controls.TextCon-3e4c3bf0.h>
#include <Fuse.Controls.TextCon-69c3b6e7.h>
#include <Fuse.Controls.TextControl.h>
#include <Fuse.Controls.TextInp-4572852b.h>
#include <Fuse.Controls.TextTruncation.h>
#include <Fuse.Controls.TextWrapping.h>
#include <Fuse.Controls.TimePic-62399aae.h>
#include <Fuse.Controls.TimePic-815d1f4c.h>
#include <Fuse.Controls.TimePic-e1e6e8e1.h>
#include <Fuse.Controls.TimePicker.h>
#include <Fuse.Controls.TimePickerBase.h>
#include <Fuse.Controls.TimePickerStyle.h>
#include <Fuse.Controls.ToggleControl.h>
#include <Fuse.Controls.TopFram-13be99dd.h>
#include <Fuse.Controls.TreeRen-9b58eba0.h>
#include <Fuse.Controls.TreeRen-b909bbd1.h>
#include <Fuse.Controls.TreeRenderer.h>
#include <Fuse.Controls.URISche-c4a82e84.h>
#include <Fuse.Controls.Video.h>
#include <Fuse.Controls.VideoIm-136ae022.h>
#include <Fuse.Controls.WebView.h>
#include <Fuse.Diagnostics.h>
#include <Fuse.DrawContext.h>
#include <Fuse.Drawing.Brush.h>
#include <Fuse.Drawing.DrawObjectWatcher.h>
#include <Fuse.Drawing.DynamicBrush.h>
#include <Fuse.Drawing.FillRule.h>
#include <Fuse.Drawing.IDrawObj-13f8940.h>
#include <Fuse.Drawing.ISolidColor.h>
#include <Fuse.Drawing.ISurfaceDrawable.h>
#include <Fuse.Drawing.LineMetrics.h>
#include <Fuse.Drawing.LineSegment.h>
#include <Fuse.Drawing.LineSegmentFlags.h>
#include <Fuse.Drawing.LineSegments.h>
#include <Fuse.Drawing.LineSegmentType.h>
#include <Fuse.Drawing.LineSplitter.h>
#include <Fuse.Drawing.Primitiv-a3dfd6e2.h>
#include <Fuse.Drawing.Primitives.Circle.h>
#include <Fuse.Drawing.Primitives.Wedge.h>
#include <Fuse.Drawing.ResampleMode.h>
#include <Fuse.Drawing.SolidColor.h>
#include <Fuse.Drawing.StaticSolidColor.h>
#include <Fuse.Drawing.Stroke.h>
#include <Fuse.Drawing.Surface.h>
#include <Fuse.Drawing.SurfaceManager.h>
#include <Fuse.Drawing.SurfacePath.h>
#include <Fuse.Drawing.SurfaceUtil.h>
#include <Fuse.Elements.Alignment.h>
#include <Fuse.Elements.AlignmentHelpers.h>
#include <Fuse.Elements.BoxSizing.h>
#include <Fuse.Elements.Element.h>
#include <Fuse.Elements.HitTestMode.h>
#include <Fuse.Elements.Interna-6c76fd3b.h>
#include <Fuse.Elements.ITreeRenderer.h>
#include <Fuse.Elements.StretchDirection.h>
#include <Fuse.Elements.StretchMode.h>
#include <Fuse.Elements.StretchSizing.h>
#include <Fuse.Elements.Visibility.h>
#include <Fuse.FastProperty2.h>
#include <Fuse.Font.h>
#include <Fuse.FramebufferPool.h>
#include <Fuse.FrustumViewport.h>
#include <Fuse.Gestures.Edge.h>
#include <Fuse.Gestures.KeepFocusInView.h>
#include <Fuse.Gestures.Scroller.h>
#include <Fuse.Gestures.Swiped.h>
#include <Fuse.Gestures.SwipedHow.h>
#include <Fuse.Gestures.SwipeDirection.h>
#include <Fuse.Gestures.SwipeGesture.h>
#include <Fuse.Gestures.SwipingAnimation.h>
#include <Fuse.HitTestContext.h>
#include <Fuse.IArray.h>
#include <Fuse.ICommonViewport.h>
#include <Fuse.IFrustum.h>
#include <Fuse.ILoading.h>
#include <Fuse.ILoadingStatic.h>
#include <Fuse.Input.GesturePriority.h>
#include <Fuse.Internal.Curves.h>
#include <Fuse.Internal.Drawing-2fac8179.h>
#include <Fuse.Internal.DrawManager.h>
#include <Fuse.Internal.ImageContainer.h>
#include <Fuse.Internal.SizingContainer.h>
#include <Fuse.InvalidateLayoutReason.h>
#include <Fuse.IObject.h>
#include <Fuse.ITranslationMode.h>
#include <Fuse.IViewport.h>
#include <Fuse.Json.h>
#include <Fuse.Layer.h>
#include <Fuse.LayoutDependent.h>
#include <Fuse.LayoutParams.h>
#include <Fuse.LayoutPriority.h>
#include <Fuse.LayoutRole.h>
#include <Fuse.Layouts.Dock.h>
#include <Fuse.Layouts.DockLayout.h>
#include <Fuse.Layouts.Layout.h>
#include <Fuse.Layouts.Layouts.h>
#include <Fuse.Layouts.Orientation.h>
#include <Fuse.Marshal.h>
#include <Fuse.Motion.MotionConfig.h>
#include <Fuse.Motion.ScrollViewMotion.h>
#include <Fuse.Navigation.Activ-7c0a6444.h>
#include <Fuse.Navigation.Activ-cd0f45fd.h>
#include <Fuse.Navigation.Allow-2879e74f.h>
#include <Fuse.Navigation.Child-c205418f.h>
#include <Fuse.Navigation.Dynam-f5e16ef8.h>
#include <Fuse.Navigation.EdgeNavigation.h>
#include <Fuse.Navigation.EndSeekArgs.h>
#include <Fuse.Navigation.Enter-b5ef3daa.h>
#include <Fuse.Navigation.Expli-824d245d.h>
#include <Fuse.Navigation.Histo-7effafc8.h>
#include <Fuse.Navigation.IRouterOutlet.h>
#include <Fuse.Navigation.ModifyRouteHow.h>
#include <Fuse.Navigation.Navig-285c943d.h>
#include <Fuse.Navigation.Navig-4e890de6.h>
#include <Fuse.Navigation.Navig-671c9a8e.h>
#include <Fuse.Navigation.Navig-7a05202f.h>
#include <Fuse.Navigation.Navig-9b35ba09.h>
#include <Fuse.Navigation.Navigation.h>
#include <Fuse.Navigation.NavigationArgs.h>
#include <Fuse.Navigation.NavigationEdge.h>
#include <Fuse.Navigation.NavigationMode.h>
#include <Fuse.Navigation.OutletType.h>
#include <Fuse.Navigation.PageData.h>
#include <Fuse.Navigation.PagesMap.h>
#include <Fuse.Navigation.Route-4d42f85.h>
#include <Fuse.Navigation.Route-63a9aa00.h>
#include <Fuse.Navigation.Route-671d2637.h>
#include <Fuse.Navigation.Route-b2fbe97b.h>
#include <Fuse.Navigation.Route-d522277a.h>
#include <Fuse.Navigation.Route-fab2579e.h>
#include <Fuse.Navigation.Router.h>
#include <Fuse.Navigation.RouterModify.h>
#include <Fuse.Navigation.RouterPage.h>
#include <Fuse.Navigation.RouterRequest.h>
#include <Fuse.Navigation.Routi-617abe1f.h>
#include <Fuse.Navigation.RoutingResult.h>
#include <Fuse.Navigation.SwipeDirection.h>
#include <Fuse.Navigation.SwipeNavigate.h>
#include <Fuse.Navigation.UpdateSeekArgs.h>
#include <Fuse.Navigation.Visua-546531c3.h>
#include <Fuse.Node.ContextDataResult.h>
#include <Fuse.Node.DataType.h>
#include <Fuse.Node.h>
#include <Fuse.NodeGroupBase.Co-ac498844.h>
#include <Fuse.NodeGroupBase.h>
#include <Fuse.OrthographicFrustum.h>
#include <Fuse.Platform.ApplicationState.h>
#include <Fuse.Platform.Lifecycle.h>
#include <Fuse.Platform.SystemUI.h>
#include <Fuse.Properties.h>
#include <Fuse.PropertyHandle.h>
#include <Fuse.Ray.h>
#include <Fuse.Reactive.BindingMode.h>
#include <Fuse.Reactive.CapsObject.h>
#include <Fuse.Reactive.Constan-50d3d885.h>
#include <Fuse.Reactive.Constant.h>
#include <Fuse.Reactive.DataBinding.h>
#include <Fuse.Reactive.Each.h>
#include <Fuse.Reactive.Express-14809e1.h>
#include <Fuse.Reactive.Express-2122d403.h>
#include <Fuse.Reactive.Express-2299a878.h>
#include <Fuse.Reactive.Expression.h>
#include <Fuse.Reactive.IContext.h>
#include <Fuse.Reactive.IExpression.h>
#include <Fuse.Reactive.IListener.h>
#include <Fuse.Reactive.Instantiator.h>
#include <Fuse.Reactive.IObservableArray.h>
#include <Fuse.Reactive.ObserverMap-1.h>
#include <Fuse.Reactive.Property.h>
#include <Fuse.Reactive.WindowCaps.h>
#include <Fuse.Resources.Exif.I-84c031e4.h>
#include <Fuse.Resources.HttpImageSource.h>
#include <Fuse.Resources.ImageS-a54f660e.h>
#include <Fuse.Resources.ImageS-bba1528c.h>
#include <Fuse.Resources.ImageS-e0decf16.h>
#include <Fuse.Resources.ImageSource.h>
#include <Fuse.Scripting.BoolChangedArgs.h>
#include <Fuse.Scripting.Context.h>
#include <Fuse.Scripting.IEvent-1effd56d.h>
#include <Fuse.Scripting.ScriptClass.h>
#include <Fuse.Scripting.ScriptMember.h>
#include <Fuse.Scripting.ScriptMethod1-1.h>
#include <Fuse.Scripting.String-4addfdd5.h>
#include <Fuse.Time.h>
#include <Fuse.Translation.h>
#include <Fuse.TranslationModes.h>
#include <Fuse.Triggers.Actions-16700ed8.h>
#include <Fuse.Triggers.Actions-a73f808c.h>
#include <Fuse.Triggers.BusyTask.h>
#include <Fuse.Triggers.BusyTaskActivity.h>
#include <Fuse.Triggers.BusyTaskMatch.h>
#include <Fuse.Triggers.Transition.h>
#include <Fuse.Triggers.Trigger.h>
#include <Fuse.Triggers.WhileBool.h>
#include <Fuse.UpdateManager.h>
#include <Fuse.UpdateStage.h>
#include <Fuse.ViewportHelpers.h>
#include <Fuse.Visual.h>
#include <Fuse.VisualBounds.h>
#include <Fuse.VisualContext.h>
#include <Java.Object.h>
#include <Uno.Action.h>
#include <Uno.Action1-1.h>
#include <Uno.Action2-2.h>
#include <Uno.ArgumentException.h>
#include <Uno.Bool.h>
#include <Uno.Collections.Dicti-5d5b73f.h>
#include <Uno.Collections.Dictionary-2.h>
#include <Uno.Collections.Enume-9e7bc8e0.h>
#include <Uno.Collections.ICollection-1.h>
#include <Uno.Collections.IEnumerable-1.h>
#include <Uno.Collections.IEnumerator.h>
#include <Uno.Collections.IEnumerator1-1.h>
#include <Uno.Collections.IList-1.h>
#include <Uno.Collections.KeyValuePair-2.h>
#include <Uno.Collections.List-1.h>
#include <Uno.Collections.RootableList-1.h>
#include <Uno.Color.h>
#include <Uno.Delegate.h>
#include <Uno.Diagnostics.Log.h>
#include <Uno.Double.h>
#include <Uno.EventArgs.h>
#include <Uno.EventHandler.h>
#include <Uno.Exception.h>
#include <Uno.Float.h>
#include <Uno.Float2.h>
#include <Uno.Float3.h>
#include <Uno.Float3x3.h>
#include <Uno.Float4.h>
#include <Uno.Float4x4.h>
#include <Uno.Func1-2.h>
#include <Uno.Func3-4.h>
#include <Uno.Graphics.Framebuffer.h>
#include <Uno.Graphics.PolygonFace.h>
#include <Uno.Graphics.SamplerState.h>
#include <Uno.Graphics.Texture2D.h>
#include <Uno.IDisposable.h>
#include <Uno.Int.h>
#include <Uno.Int2.h>
#include <Uno.Internal.ArrayEnumerable-1.h>
#include <Uno.Math.h>
#include <Uno.Matrix.h>
#include <Uno.Object.h>
#include <Uno.Rect.h>
#include <Uno.Recti.h>
#include <Uno.String.h>
#include <Uno.Threading.Monitor.h>
#include <Uno.Type.h>
#include <Uno.UInt.h>
#include <Uno.UX.FileSource.h>
#include <Uno.UX.IPropertyListener.h>
#include <Uno.UX.Property.h>
#include <Uno.UX.Property1-1.h>
#include <Uno.UX.PropertyAccessor.h>
#include <Uno.UX.PropertyObject.h>
#include <Uno.UX.Selector.h>
#include <Uno.UX.Size.h>
#include <Uno.UX.Template.h>
#include <Uno.UX.Unit.h>
#include <Uno.UX.ValueChangedArgs-1.h>
#include <Uno.UX.ValueChangedHandler-1.h>
#include <Uno.Vector.h>
static uString* STRINGS[135];
static uType* TYPES[84];

namespace g{
namespace Fuse{
namespace Controls{

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/CommonNavigationPages.uno
// ------------------------------------------------------------------------------------------

// private sealed class CommonNavigationPages.AddedPage
// {
static void CommonNavigationPages__AddedPage_build(uType* type)
{
    type->SetFields(0,
        ::g::Uno::String_typeof(), offsetof(CommonNavigationPages__AddedPage, Template), 0,
        ::g::Fuse::Visual_typeof(), offsetof(CommonNavigationPages__AddedPage, Visual), 0,
        uObject_typeof(), offsetof(CommonNavigationPages__AddedPage, Data), 0,
        ::g::Fuse::Navigation::RouterPage_typeof(), offsetof(CommonNavigationPages__AddedPage, Page), 0);
}

uType* CommonNavigationPages__AddedPage_typeof()
{
    static uSStrong<uType*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.FieldCount = 4;
    options.ObjectSize = sizeof(CommonNavigationPages__AddedPage);
    options.TypeSize = sizeof(uType);
    type = uClassType::New("Fuse.Controls.CommonNavigationPages.AddedPage", options);
    type->fp_build_ = CommonNavigationPages__AddedPage_build;
    type->fp_ctor_ = (void*)CommonNavigationPages__AddedPage__New1_fn;
    return type;
}

// public generated AddedPage()
void CommonNavigationPages__AddedPage__ctor__fn(CommonNavigationPages__AddedPage* __this)
{
    __this->ctor_();
}

// public generated AddedPage New()
void CommonNavigationPages__AddedPage__New1_fn(CommonNavigationPages__AddedPage** __retval)
{
    *__retval = CommonNavigationPages__AddedPage::New1();
}

// public generated AddedPage() [instance]
void CommonNavigationPages__AddedPage::ctor_()
{
}

// public generated AddedPage New() [static]
CommonNavigationPages__AddedPage* CommonNavigationPages__AddedPage::New1()
{
    CommonNavigationPages__AddedPage* obj1 = (CommonNavigationPages__AddedPage*)uNew(CommonNavigationPages__AddedPage_typeof());
    obj1->ctor_();
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Arc.uno
// -------------------------------------------------------------------------------

// public partial sealed class Arc
// {
static void Arc_build(uType* type)
{
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface18),
        ::g::Fuse::Drawing::IDrawObjectWatcherFeedback_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface19));
    type->SetFields(121);
}

::g::Fuse::Controls::Shape_type* Arc_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Shape_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::EllipticalShape_typeof();
    options.FieldCount = 121;
    options.InterfaceCount = 20;
    options.ObjectSize = sizeof(Arc);
    options.TypeSize = sizeof(::g::Fuse::Controls::Shape_type);
    type = (::g::Fuse::Controls::Shape_type*)uClassType::New("Fuse.Controls.Arc", options);
    type->fp_build_ = Arc_build;
    type->fp_CreateSurfacePath = (void(*)(::g::Fuse::Controls::Shape*, ::g::Fuse::Drawing::Surface*, ::g::Fuse::Drawing::SurfacePath**))Arc__CreateSurfacePath_fn;
    type->interface19.fp_Changed = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackChanged_fn;
    type->interface19.fp_Prepare = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackPrepare_fn;
    type->interface19.fp_Unprepare = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackUnprepare_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Shape__OnPropertyChanged2_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// protected override sealed Fuse.Drawing.SurfacePath CreateSurfacePath(Fuse.Drawing.Surface surface)
void Arc__CreateSurfacePath_fn(Arc* __this, ::g::Fuse::Drawing::Surface* surface, ::g::Fuse::Drawing::SurfacePath** __retval)
{
    return *__retval = __this->CreateEllipticalPath(surface, ::g::Uno::Float2__op_Division1(__this->ActualSize(), 2.0f), ::g::Uno::Float2__op_Division1(__this->ActualSize(), 2.0f), true), void();
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/Backgrounds/BottomFrameBackground.uno
// --------------------------------------------------------------------------------------------------

// public sealed class BottomBarBackground
// {
static void BottomBarBackground_build(uType* type)
{
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface17));
    type->SetFields(110);
}

::g::Fuse::Controls::Control_type* BottomBarBackground_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Control_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::BottomFrameBackground_typeof();
    options.FieldCount = 110;
    options.InterfaceCount = 18;
    options.ObjectSize = sizeof(BottomBarBackground);
    options.TypeSize = sizeof(::g::Fuse::Controls::Control_type);
    type = (::g::Fuse::Controls::Control_type*)uClassType::New("Fuse.Controls.BottomBarBackground", options);
    type->fp_build_ = BottomBarBackground_build;
    type->fp_ctor_ = (void*)BottomBarBackground__New3_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::BottomFrameBackground__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public generated BottomBarBackground()
void BottomBarBackground__ctor_6_fn(BottomBarBackground* __this)
{
    __this->ctor_6();
}

// public generated BottomBarBackground New()
void BottomBarBackground__New3_fn(BottomBarBackground** __retval)
{
    *__retval = BottomBarBackground::New3();
}

// public generated BottomBarBackground() [instance]
void BottomBarBackground::ctor_6()
{
    ctor_5();
}

// public generated BottomBarBackground New() [static]
BottomBarBackground* BottomBarBackground::New3()
{
    BottomBarBackground* obj1 = (BottomBarBackground*)uNew(BottomBarBackground_typeof());
    obj1->ctor_6();
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/Backgrounds/BottomFrameBackground.uno
// --------------------------------------------------------------------------------------------------

// public class BottomFrameBackground
// {
static void BottomFrameBackground_build(uType* type)
{
    ::TYPES[0] = ::g::Fuse::Marshal_typeof()->MakeMethod(1/*TryToType<float4>*/, ::g::Uno::Float4_typeof(), nullptr);
    type->SetDependencies(
        ::g::Fuse::Reactive::WindowCaps_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface17));
    type->SetFields(106,
        ::g::Uno::Bool_typeof(), offsetof(BottomFrameBackground, _includesKeyboard), 0,
        ::g::Uno::Float_typeof(), offsetof(BottomFrameBackground, _keyboardVisibleThreshold), 0,
        ::g::Fuse::Reactive::WindowCaps_typeof(), offsetof(BottomFrameBackground, _caps), 0,
        ::g::Uno::Float_typeof(), offsetof(BottomFrameBackground, _height1), 0);
}

::g::Fuse::Controls::Control_type* BottomFrameBackground_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Control_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::Control_typeof();
    options.FieldCount = 110;
    options.InterfaceCount = 18;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(BottomFrameBackground);
    options.TypeSize = sizeof(::g::Fuse::Controls::Control_type);
    type = (::g::Fuse::Controls::Control_type*)uClassType::New("Fuse.Controls.BottomFrameBackground", options);
    type->fp_build_ = BottomFrameBackground_build;
    type->fp_GetContentSize = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::LayoutParams*, ::g::Uno::Float2*))BottomFrameBackground__GetContentSize_fn;
    type->fp_OnPropertyChanged2 = (void(*)(::g::Fuse::Visual*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))BottomFrameBackground__OnPropertyChanged2_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))BottomFrameBackground__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))BottomFrameBackground__OnUnrooted_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))BottomFrameBackground__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public generated BottomFrameBackground()
void BottomFrameBackground__ctor_5_fn(BottomFrameBackground* __this)
{
    __this->ctor_5();
}

// protected override sealed float2 GetContentSize(Fuse.LayoutParams lp)
void BottomFrameBackground__GetContentSize_fn(BottomFrameBackground* __this, ::g::Fuse::LayoutParams* lp, ::g::Uno::Float2* __retval)
{
    bool ret2;
    ::g::Uno::Float4 v = ::g::Uno::Float4__New1(0.0f);

    if (!(::g::Fuse::Marshal__TryToType_fn(::TYPES[0/*Fuse.Marshal.TryToType<float4>*/], uPtr(__this->_caps)->Item(::g::Uno::UX::Selector__op_Implicit1(::g::Fuse::Reactive::WindowCaps::NameSafeMargins())), &v, &ret2), ret2))
        return *__retval = ::g::Uno::Float2__New1(0.0f), void();

    if (__this->IncludesKeyboard() || (v.W < __this->KeyboardVisibleThreshold()))
        __this->_height1 = v.W;

    return *__retval = ::g::Uno::Float2__New2(0.0f, __this->_height1), void();
}

// public bool get_IncludesKeyboard()
void BottomFrameBackground__get_IncludesKeyboard_fn(BottomFrameBackground* __this, bool* __retval)
{
    *__retval = __this->IncludesKeyboard();
}

// public void set_IncludesKeyboard(bool value)
void BottomFrameBackground__set_IncludesKeyboard_fn(BottomFrameBackground* __this, bool* value)
{
    __this->IncludesKeyboard(*value);
}

// public float get_KeyboardVisibleThreshold()
void BottomFrameBackground__get_KeyboardVisibleThreshold_fn(BottomFrameBackground* __this, float* __retval)
{
    *__retval = __this->KeyboardVisibleThreshold();
}

// public void set_KeyboardVisibleThreshold(float value)
void BottomFrameBackground__set_KeyboardVisibleThreshold_fn(BottomFrameBackground* __this, float* value)
{
    __this->KeyboardVisibleThreshold(*value);
}

// public override sealed void OnPropertyChanged(Uno.UX.PropertyObject sender, Uno.UX.Selector name)
void BottomFrameBackground__OnPropertyChanged2_fn(BottomFrameBackground* __this, ::g::Uno::UX::PropertyObject* sender, ::g::Uno::UX::Selector* name)
{
    ::g::Uno::UX::Selector name_ = *name;
    ::g::Fuse::Controls::Control__OnPropertyChanged2_fn(__this, sender, uCRef(name_));

    if ((sender == __this->_caps) && ::g::Uno::UX::Selector__op_Equality(name_, ::g::Fuse::Reactive::WindowCaps::NameSafeMargins()))
        __this->InvalidateLayout(2);
}

// protected override sealed void OnRooted()
void BottomFrameBackground__OnRooted_fn(BottomFrameBackground* __this)
{
    ::g::Fuse::Controls::Control__OnRooted_fn(__this);
    __this->_caps = ::g::Fuse::Reactive::WindowCaps::AttachFrom(__this);
    uPtr(__this->_caps)->AddPropertyListener((uObject*)__this);
}

// protected override sealed void OnUnrooted()
void BottomFrameBackground__OnUnrooted_fn(BottomFrameBackground* __this)
{
    uPtr(__this->_caps)->RemovePropertyListener((uObject*)__this);
    uPtr(__this->_caps)->Detach();
    __this->_caps = nullptr;
    ::g::Fuse::Controls::Control__OnUnrooted_fn(__this);
}

// public generated BottomFrameBackground() [instance]
void BottomFrameBackground::ctor_5()
{
    _includesKeyboard = true;
    _keyboardVisibleThreshold = 150.0f;
    ctor_4();
}

// public bool get_IncludesKeyboard() [instance]
bool BottomFrameBackground::IncludesKeyboard()
{
    return _includesKeyboard;
}

// public void set_IncludesKeyboard(bool value) [instance]
void BottomFrameBackground::IncludesKeyboard(bool value)
{
    if (_includesKeyboard != value)
    {
        _includesKeyboard = value;
        InvalidateLayout(2);
    }
}

// public float get_KeyboardVisibleThreshold() [instance]
float BottomFrameBackground::KeyboardVisibleThreshold()
{
    return _keyboardVisibleThreshold;
}

// public void set_KeyboardVisibleThreshold(float value) [instance]
void BottomFrameBackground::KeyboardVisibleThreshold(float value)
{
    if (_keyboardVisibleThreshold != value)
    {
        _keyboardVisibleThreshold = value;
        InvalidateLayout(2);
    }
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.WebView/WebView.uno
// -------------------------------------------------------------------------

// internal abstract interface BufferedWebViewCall
// {
uInterfaceType* BufferedWebViewCall_typeof()
{
    static uSStrong<uInterfaceType*> type;
    if (type != nullptr) return type;

    type = uInterfaceType::New("Fuse.Controls.BufferedWebViewCall", 0, 0);
    return type;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/ButtonBase.uno
// -------------------------------------------------------------------------------

// public sealed class ButtonBase
// {
static void ButtonBase_build(uType* type)
{
    ::STRINGS[0] = uString::Const("Text");
    ::TYPES[1] = ::g::Fuse::Controls::Native::ILabelView_typeof();
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface18));
    type->SetFields(115,
        ::g::Uno::String_typeof(), offsetof(ButtonBase, _text), 0);
}

::g::Fuse::Controls::Panel_type* ButtonBase_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Panel_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::Panel_typeof();
    options.FieldCount = 116;
    options.InterfaceCount = 19;
    options.ObjectSize = sizeof(ButtonBase);
    options.TypeSize = sizeof(::g::Fuse::Controls::Panel_type);
    type = (::g::Fuse::Controls::Panel_type*)uClassType::New("Fuse.Controls.ButtonBase", options);
    type->fp_build_ = ButtonBase_build;
    type->fp_PushPropertiesToNativeView = (void(*)(::g::Fuse::Controls::Control*))ButtonBase__PushPropertiesToNativeView_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// private Fuse.Controls.Native.ILabelView get_LabelView()
void ButtonBase__get_LabelView_fn(ButtonBase* __this, uObject** __retval)
{
    *__retval = __this->LabelView();
}

// protected override sealed void PushPropertiesToNativeView()
void ButtonBase__PushPropertiesToNativeView_fn(ButtonBase* __this)
{
    ::g::Fuse::Controls::Control__PushPropertiesToNativeView_fn(__this);
    uObject* l = __this->LabelView();

    if (l != nullptr)
        ::g::Fuse::Controls::Native::ILabelView::Text(uInterface(uPtr(l), ::TYPES[1/*Fuse.Controls.Native.ILabelView*/]), __this->Text());
}

// public void SetText(string value, Uno.UX.IPropertyListener origin)
void ButtonBase__SetText_fn(ButtonBase* __this, uString* value, uObject* origin)
{
    __this->SetText(value, origin);
}

// public string get_Text()
void ButtonBase__get_Text_fn(ButtonBase* __this, uString** __retval)
{
    *__retval = __this->Text();
}

// public void set_Text(string value)
void ButtonBase__set_Text_fn(ButtonBase* __this, uString* value)
{
    __this->Text(value);
}

// private Fuse.Controls.Native.ILabelView get_LabelView() [instance]
uObject* ButtonBase::LabelView()
{
    return uAs<uObject*>(NativeView(), ::TYPES[1/*Fuse.Controls.Native.ILabelView*/]);
}

// public void SetText(string value, Uno.UX.IPropertyListener origin) [instance]
void ButtonBase::SetText(uString* value, uObject* origin)
{
    if (::g::Uno::String::op_Inequality(value, _text))
    {
        _text = value;
        OnPropertyChanged1(::g::Uno::UX::Selector__op_Implicit(::STRINGS[0/*"Text"*/]), origin);
        uObject* l = LabelView();

        if (l != nullptr)
            ::g::Fuse::Controls::Native::ILabelView::Text(uInterface(uPtr(l), ::TYPES[1/*Fuse.Controls.Native.ILabelView*/]), value);
    }
}

// public string get_Text() [instance]
uString* ButtonBase::Text()
{
    return _text;
}

// public void set_Text(string value) [instance]
void ButtonBase::Text(uString* value)
{
    SetText(value, nullptr);
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Circle.uno
// ----------------------------------------------------------------------------------

// public partial sealed class Circle
// {
static void Circle_build(uType* type)
{
    type->SetDependencies(
        ::g::Fuse::Drawing::Primitives::Circle_typeof(),
        ::g::Uno::Math_typeof(),
        ::g::Fuse::Drawing::Primitives::Wedge_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface18),
        ::g::Fuse::Drawing::IDrawObjectWatcherFeedback_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface19));
    type->SetFields(121);
}

::g::Fuse::Controls::Shape_type* Circle_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Shape_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::EllipticalShape_typeof();
    options.FieldCount = 121;
    options.InterfaceCount = 20;
    options.DependencyCount = 3;
    options.ObjectSize = sizeof(Circle);
    options.TypeSize = sizeof(::g::Fuse::Controls::Shape_type);
    type = (::g::Fuse::Controls::Shape_type*)uClassType::New("Fuse.Controls.Circle", options);
    type->fp_build_ = Circle_build;
    type->fp_ctor_ = (void*)Circle__New3_fn;
    type->fp_CreateSurfacePath = (void(*)(::g::Fuse::Controls::Shape*, ::g::Fuse::Drawing::Surface*, ::g::Fuse::Drawing::SurfacePath**))Circle__CreateSurfacePath_fn;
    type->fp_DrawFill = (void(*)(::g::Fuse::Controls::Shape*, ::g::Fuse::DrawContext*, ::g::Fuse::Drawing::Brush*))Circle__DrawFill_fn;
    type->fp_DrawStroke = (void(*)(::g::Fuse::Controls::Shape*, ::g::Fuse::DrawContext*, ::g::Fuse::Drawing::Stroke*))Circle__DrawStroke_fn;
    type->fp_get_NeedSurface = (void(*)(::g::Fuse::Controls::Shape*, bool*))Circle__get_NeedSurface_fn;
    type->fp_OnHitTestLocalVisual = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::HitTestContext*))Circle__OnHitTestLocalVisual_fn;
    type->interface19.fp_Changed = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackChanged_fn;
    type->interface19.fp_Prepare = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackPrepare_fn;
    type->interface19.fp_Unprepare = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackUnprepare_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Shape__OnPropertyChanged2_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public generated Circle()
void Circle__ctor_8_fn(Circle* __this)
{
    __this->ctor_8();
}

// private float2 get_CanvasAngles()
void Circle__get_CanvasAngles_fn(Circle* __this, ::g::Uno::Float2* __retval)
{
    *__retval = __this->CanvasAngles();
}

// protected float2 get_Center()
void Circle__get_Center_fn(Circle* __this, ::g::Uno::Float2* __retval)
{
    *__retval = __this->Center();
}

// protected override sealed Fuse.Drawing.SurfacePath CreateSurfacePath(Fuse.Drawing.Surface surface)
void Circle__CreateSurfacePath_fn(Circle* __this, ::g::Fuse::Drawing::Surface* surface, ::g::Fuse::Drawing::SurfacePath** __retval)
{
    return *__retval = __this->CreateEllipticalPath(surface, __this->Center(), ::g::Uno::Float2__New1(__this->Radius()), false), void();
}

// protected override sealed void DrawFill(Fuse.DrawContext dc, Fuse.Drawing.Brush fill)
void Circle__DrawFill_fn(Circle* __this, ::g::Fuse::DrawContext* dc, ::g::Fuse::Drawing::Brush* fill)
{
    ::g::Uno::Float2 angles = __this->CanvasAngles();

    if (__this->UseAngle())
        uPtr(::g::Fuse::Drawing::Primitives::Wedge::Singleton())->Fill(dc, __this, __this->Radius(), fill, __this->Center(), angles.Item(0), angles.Item(1), __this->Smoothness());
    else
        uPtr(::g::Fuse::Drawing::Primitives::Circle::Singleton())->Fill(dc, __this, __this->Radius(), fill, __this->Center(), __this->Smoothness());
}

// protected override sealed void DrawStroke(Fuse.DrawContext dc, Fuse.Drawing.Stroke stroke)
void Circle__DrawStroke_fn(Circle* __this, ::g::Fuse::DrawContext* dc, ::g::Fuse::Drawing::Stroke* stroke)
{
    ::g::Uno::Float2 angles = __this->CanvasAngles();

    if (__this->UseAngle())
        uPtr(::g::Fuse::Drawing::Primitives::Wedge::Singleton())->Stroke(dc, __this, __this->Radius(), stroke, __this->Center(), angles.Item(0), angles.Item(1), __this->Smoothness());
    else
        uPtr(::g::Fuse::Drawing::Primitives::Circle::Singleton())->Stroke(dc, __this, __this->Radius(), stroke, __this->Center(), __this->Smoothness());
}

// protected override sealed bool get_NeedSurface()
void Circle__get_NeedSurface_fn(Circle* __this, bool* __retval)
{
    return *__retval = __this->VisualContext() != 1, void();
}

// public generated Circle New()
void Circle__New3_fn(Circle** __retval)
{
    *__retval = Circle::New3();
}

// protected override sealed void OnHitTestLocalVisual(Fuse.HitTestContext htc)
void Circle__OnHitTestLocalVisual_fn(Circle* __this, ::g::Fuse::HitTestContext* htc)
{
    ::g::Fuse::Controls::Control__OnHitTestLocalVisual_fn(__this, htc);

    if (!__this->HasFills() || (::g::Uno::Vector::Distance(uPtr(htc)->LocalPoint(), __this->Center()) > __this->Radius()))
        return;

    if (__this->UseAngle())
    {
        ::g::Uno::Float2 off = ::g::Uno::Float2__op_Subtraction2(uPtr(htc)->LocalPoint(), __this->Center());
        float localAngle = ::g::Uno::Math::Atan22(off.Y, off.X);

        if (!::g::Fuse::Drawing::SurfaceUtil::AngleInRange(localAngle, __this->StartAngle(), __this->EffectiveEndAngle()))
            return;
    }

    uPtr(htc)->Hit(__this);
}

// internal float get_Radius()
void Circle__get_Radius_fn(Circle* __this, float* __retval)
{
    *__retval = __this->Radius();
}

// public generated Circle() [instance]
void Circle::ctor_8()
{
    ctor_7();
}

// private float2 get_CanvasAngles() [instance]
::g::Uno::Float2 Circle::CanvasAngles()
{
    float s = StartAngle();
    float e = EffectiveEndAngle();

    if (e < s)
        return ::g::Uno::Float2__New2(e, s);

    return ::g::Uno::Float2__New2(s, e);
}

// protected float2 get_Center() [instance]
::g::Uno::Float2 Circle::Center()
{
    return ::g::Uno::Float2__op_Division1(ActualSize(), 2.0f);
}

// internal float get_Radius() [instance]
float Circle::Radius()
{
    return ::g::Uno::Math::Min1(ActualSize().X, ActualSize().Y) * 0.5f;
}

// public generated Circle New() [static]
Circle* Circle::New3()
{
    Circle* obj1 = (Circle*)uNew(Circle_typeof());
    obj1->ctor_8();
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/CommonNavigation.uno
// -------------------------------------------------------------------------------------

// internal static class CommonNavigation
// {
static void CommonNavigation_build(uType* type)
{
    ::STRINGS[1] = uString::Const("Can not navigate to '");
    ::STRINGS[2] = uString::Const("', not found!");
    ::STRINGS[3] = uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/CommonNavigation.uno");
    ::STRINGS[4] = uString::Const("FindPath");
    ::STRINGS[5] = uString::Const("");
    ::STRINGS[6] = uString::Const("\"\"");
    ::STRINGS[7] = uString::Const("{}");
    ::STRINGS[8] = uString::Const("null");
    ::TYPES[2] = ::g::Fuse::Visual_typeof()->MakeMethod(2/*FirstChild<Fuse.Visual>*/, ::g::Fuse::Visual_typeof(), nullptr);
    ::TYPES[3] = ::g::Fuse::Node_typeof()->MakeMethod(3/*NextSibling<Fuse.Visual>*/, ::g::Fuse::Visual_typeof(), nullptr);
    type->SetDependencies(
        ::g::Fuse::Navigation::Navigation_typeof(),
        ::g::Fuse::Navigation::PageData_typeof());
}

uClassType* CommonNavigation_typeof()
{
    static uSStrong<uClassType*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.DependencyCount = 2;
    options.TypeSize = sizeof(uClassType);
    type = uClassType::New("Fuse.Controls.CommonNavigation", options);
    type->fp_build_ = CommonNavigation_build;
    return type;
}

// public static Fuse.Navigation.RoutingResult CompareCurrent(Fuse.Visual parent, Fuse.Visual current, Fuse.Navigation.RouterPage routerPage, Fuse.Visual& pageVisual)
void CommonNavigation__CompareCurrent_fn(::g::Fuse::Visual* parent, ::g::Fuse::Visual* current, ::g::Fuse::Navigation::RouterPage* routerPage, ::g::Fuse::Visual** pageVisual, int32_t* __retval)
{
    *__retval = CommonNavigation::CompareCurrent(parent, current, routerPage, pageVisual);
}

// public static bool CompatibleParameter(string a, string b)
void CommonNavigation__CompatibleParameter_fn(uString* a, uString* b, bool* __retval)
{
    *__retval = CommonNavigation::CompatibleParameter(a, b);
}

// public static Fuse.Visual FindPath(Fuse.Visual parent, string path)
void CommonNavigation__FindPath_fn(::g::Fuse::Visual* parent, uString* path, ::g::Fuse::Visual** __retval)
{
    *__retval = CommonNavigation::FindPath(parent, path);
}

// public static Fuse.Navigation.RoutingResult Goto(Fuse.Controls.NavigationControl nav, Fuse.Navigation.RouterPage routerPage, Fuse.Navigation.NavigationGotoMode gotoMode, Fuse.Navigation.RoutingOperation operation, string operationStyle, Fuse.Visual& pageVisual)
void CommonNavigation__Goto_fn(::g::Fuse::Controls::NavigationControl* nav, ::g::Fuse::Navigation::RouterPage* routerPage, int32_t* gotoMode, int32_t* operation, uString* operationStyle, ::g::Fuse::Visual** pageVisual, int32_t* __retval)
{
    *__retval = CommonNavigation::Goto(nav, routerPage, *gotoMode, *operation, operationStyle, pageVisual);
}

// public static bool IsEmptyParameter(string a)
void CommonNavigation__IsEmptyParameter_fn(uString* a, bool* __retval)
{
    *__retval = CommonNavigation::IsEmptyParameter(a);
}

// public static Fuse.Navigation.RoutingResult CompareCurrent(Fuse.Visual parent, Fuse.Visual current, Fuse.Navigation.RouterPage routerPage, Fuse.Visual& pageVisual) [static]
int32_t CommonNavigation::CompareCurrent(::g::Fuse::Visual* parent, ::g::Fuse::Visual* current, ::g::Fuse::Navigation::RouterPage* routerPage, ::g::Fuse::Visual** pageVisual)
{
    *pageVisual = nullptr;
    ::g::Fuse::Visual* useVisual = CommonNavigation::FindPath(parent, uPtr(routerPage)->Path());

    if (useVisual == nullptr)
        return 3;

    if (current != useVisual)
        return 2;

    *pageVisual = useVisual;
    ::g::Fuse::Navigation::PageData* pageData = ::g::Fuse::Navigation::PageData::GetOrCreate(*pageVisual, true);

    if (::g::Uno::String::op_Equality(uPtr(useVisual)->Parameter(), routerPage->Parameter) && (routerPage->Context == uPtr(pageData)->Context()))
        return 0;

    return CommonNavigation::CompatibleParameter(uPtr(useVisual)->Parameter(), routerPage->Parameter) ? 1 : 2;
}

// public static bool CompatibleParameter(string a, string b) [static]
bool CommonNavigation::CompatibleParameter(uString* a, uString* b)
{
    if (::g::Uno::String::op_Equality(a, b))
        return true;

    return CommonNavigation::IsEmptyParameter(a) && CommonNavigation::IsEmptyParameter(b);
}

// public static Fuse.Visual FindPath(Fuse.Visual parent, string path) [static]
::g::Fuse::Visual* CommonNavigation::FindPath(::g::Fuse::Visual* parent, uString* path)
{
    ::g::Fuse::Visual* useVisual = nullptr;

    for (::g::Fuse::Visual* n = (::g::Fuse::Visual*)uPtr(parent)->FirstChild(::TYPES[2/*Fuse.Visual.FirstChild<Fuse.Visual>*/]); n != nullptr; n = (::g::Fuse::Visual*)uPtr(n)->NextSibling(::TYPES[3/*Fuse.Node.NextSibling<Fuse.Visual>*/]))
        if (::g::Uno::String::op_Equality(::g::Uno::UX::Selector__op_Implicit1(uPtr(n)->Name()), path))
        {
            useVisual = n;
            break;
        }

    if (!::g::Fuse::Navigation::Navigation::IsPage(useVisual))
    {
        ::g::Fuse::Diagnostics::InternalError(::g::Uno::String::op_Addition2(::g::Uno::String::op_Addition2(::STRINGS[1/*"Can not nav...*/], path), ::STRINGS[2/*"', not found!"*/]), parent, ::STRINGS[3/*"/Users/mort...*/], 26, ::STRINGS[4/*"FindPath"*/]);
        return nullptr;
    }

    return useVisual;
}

// public static Fuse.Navigation.RoutingResult Goto(Fuse.Controls.NavigationControl nav, Fuse.Navigation.RouterPage routerPage, Fuse.Navigation.NavigationGotoMode gotoMode, Fuse.Navigation.RoutingOperation operation, string operationStyle, Fuse.Visual& pageVisual) [static]
int32_t CommonNavigation::Goto(::g::Fuse::Controls::NavigationControl* nav, ::g::Fuse::Navigation::RouterPage* routerPage, int32_t gotoMode, int32_t operation, uString* operationStyle, ::g::Fuse::Visual** pageVisual)
{
    *pageVisual = nullptr;
    ::g::Fuse::Visual* useVisual = CommonNavigation::FindPath(nav, uPtr(routerPage)->Path());

    if (useVisual == nullptr)
        return 3;

    *pageVisual = useVisual;
    ::g::Fuse::Navigation::PageData* pageData = ::g::Fuse::Navigation::PageData::GetOrCreate(useVisual, true);
    bool same = ::g::Uno::String::op_Equality(uPtr(useVisual)->Parameter(), routerPage->Parameter) && (uPtr(pageData)->Context() == routerPage->Context);
    pageData->AttachRouterPage(routerPage);

    if (useVisual == uPtr(nav)->Active())
        return same ? 0 : 1;

    uPtr(uPtr(nav)->Navigation())->Goto(useVisual, gotoMode);
    return 2;
}

// public static bool IsEmptyParameter(string a) [static]
bool CommonNavigation::IsEmptyParameter(uString* a)
{
    return (((::g::Uno::String::op_Equality(a, nullptr) || ::g::Uno::String::op_Equality(a, ::STRINGS[5/*""*/])) || ::g::Uno::String::op_Equality(a, ::STRINGS[6/*"\"\""*/])) || ::g::Uno::String::op_Equality(a, ::STRINGS[7/*"{}"*/])) || ::g::Uno::String::op_Equality(a, ::STRINGS[8/*"null"*/]);
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/CommonNavigationPages.uno
// ------------------------------------------------------------------------------------------

// internal sealed class CommonNavigationPages
// {
static void CommonNavigationPages_build(uType* type)
{
    type->SetDependencies(
        ::g::Fuse::Navigation::PageData_typeof());
    type->SetFields(0,
        CommonNavigationPages__PagesMap_typeof(), offsetof(CommonNavigationPages, _pagesMap), 0,
        ::g::Fuse::IArray_typeof(), offsetof(CommonNavigationPages, _pages), 0,
        ::g::Fuse::Controls::NavigationControl_typeof(), offsetof(CommonNavigationPages, _parent), 0,
        ::g::Uno::Collections::List_typeof()->MakeType(CommonNavigationPages__AddedPage_typeof(), nullptr), offsetof(CommonNavigationPages, _addedPages), 0);
}

uType* CommonNavigationPages_typeof()
{
    static uSStrong<uType*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.FieldCount = 4;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(CommonNavigationPages);
    options.TypeSize = sizeof(uType);
    type = uClassType::New("Fuse.Controls.CommonNavigationPages", options);
    type->fp_build_ = CommonNavigationPages_build;
    return type;
}

// private void OnPagesChanged()
void CommonNavigationPages__OnPagesChanged_fn(CommonNavigationPages* __this)
{
    __this->OnPagesChanged();
}

// public void Rooted(Fuse.Controls.NavigationControl parent)
void CommonNavigationPages__Rooted_fn(CommonNavigationPages* __this, ::g::Fuse::Controls::NavigationControl* parent)
{
    __this->Rooted(parent);
}

// public void Unrooted()
void CommonNavigationPages__Unrooted_fn(CommonNavigationPages* __this)
{
    __this->Unrooted();
}

// private void UpdatePages()
void CommonNavigationPages__UpdatePages_fn(CommonNavigationPages* __this)
{
    __this->UpdatePages();
}

// private void OnPagesChanged() [instance]
void CommonNavigationPages::OnPagesChanged()
{
    if (_parent == nullptr)
        return;

    uPtr(_pagesMap)->Detach1();

    if (_pages != nullptr)
        uPtr(_pagesMap)->Attach1(this, _pages);
    else
    {
        uPtr(_pagesMap)->Clear();
        UpdatePages();
    }
}

// public void Rooted(Fuse.Controls.NavigationControl parent) [instance]
void CommonNavigationPages::Rooted(::g::Fuse::Controls::NavigationControl* parent)
{
    _parent = parent;
    OnPagesChanged();
}

// public void Unrooted() [instance]
void CommonNavigationPages::Unrooted()
{
    uPtr(_pagesMap)->Detach1();
    _parent = nullptr;
}

// private void UpdatePages() [instance]
void CommonNavigationPages::UpdatePages()
{
    bool ret2;
    CommonNavigationPages__AddedPage* ret3;
    int32_t visualCount = 0;

    for (int32_t i = 0; i < uPtr(_pagesMap)->Count(); ++i)
    {
        CommonNavigationPages__AddedPage* mp = (CommonNavigationPages__AddedPage*)uPtr(_pagesMap)->Item(i);

        if (::g::Uno::String::op_Inequality(uPtr(mp)->Template, nullptr) && (uPtr(mp)->Visual != nullptr))
        {
            visualCount++;
            continue;
        }

        if (uPtr(mp)->Data == nullptr)
        {
            ::g::Fuse::Diagnostics::UserError(uString::Const("null page in list"), this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/CommonNavigationPages.uno"), 112, uString::Const("UpdatePages"), nullptr);
            continue;
        }

        uPtr(mp)->Template = ::g::Fuse::Navigation::PagesMap::GetObjectPath(uPtr(mp)->Data);

        if (::g::Uno::String::op_Equality(mp->Template, nullptr))
        {
            ::g::Fuse::Diagnostics::UserError(uString::Const("Model is missing a $template or $page property"), this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/CommonNavigationPages.uno"), 119, uString::Const("UpdatePages"), nullptr);
            continue;
        }

        ::g::Uno::UX::Template* f = uPtr(_parent)->FindTemplate(mp->Template);

        if (f == nullptr)
        {
            ::g::Fuse::Diagnostics::UserError(::g::Uno::String::op_Addition2(uString::Const("No matching template path: "), uPtr(mp)->Template), this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/CommonNavigationPages.uno"), 126, uString::Const("UpdatePages"), nullptr);
            continue;
        }

        if (mp->Visual == nullptr)
        {
            uPtr(mp)->Visual = uAs< ::g::Fuse::Visual*>(uPtr(f)->New1(), ::TYPES[4/*Fuse.Visual*/]);

            if (mp->Visual == nullptr)
            {
                ::g::Fuse::Diagnostics::UserError(::g::Uno::String::op_Addition2(uString::Const("Template is not a Visual: "), uPtr(mp)->Template), this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/CommonNavigationPages.uno"), 135, uString::Const("UpdatePages"), nullptr);
                continue;
            }
        }

        mp->Page = ::g::Fuse::Navigation::RouterPage::New1(mp->Template, nullptr, mp->Data);
        uPtr(::g::Fuse::Navigation::PageData::GetOrCreate(mp->Visual, true))->AttachRouterPage(mp->Page);
        visualCount++;
    }

    for (int32_t i1 = 0; i1 < uPtr(_pagesMap)->Count(); ++i1)
        ::g::Uno::Collections::List__Remove_fn(uPtr(_addedPages), (CommonNavigationPages__AddedPage*)uPtr(_pagesMap)->Item(i1), &ret2);

    for (int32_t i2 = 0; i2 < uPtr(_addedPages)->Count(); ++i2)
        uPtr(_parent)->BeginRemoveChild(uPtr((::g::Uno::Collections::List__get_Item_fn(uPtr(_addedPages), uCRef<int32_t>(i2), &ret3), ret3))->Visual, nullptr);

    uPtr(_addedPages)->Clear();
    uArray* ta = uArray::New(::g::Fuse::Node_typeof()->Array(), visualCount);
    int32_t vc = 0;

    for (int32_t i3 = 0; i3 < uPtr(_pagesMap)->Count(); ++i3)
    {
        if (uPtr((CommonNavigationPages__AddedPage*)uPtr(_pagesMap)->Item(i3))->Visual == nullptr)
            continue;

        uPtr(ta)->Strong< ::g::Fuse::Node*>(vc++) = uPtr((CommonNavigationPages__AddedPage*)uPtr(_pagesMap)->Item(i3))->Visual;
        ::g::Uno::Collections::List__Add_fn(uPtr(_addedPages), (CommonNavigationPages__AddedPage*)uPtr(_pagesMap)->Item(i3));
    }

    uPtr(_parent)->InsertOrMoveNodesAfter(uPtr(_parent)->Navigation(), (uObject*)::g::Uno::Collections::IEnumerable::GetEnumerator(uInterface((uObject*)((::g::Uno::Internal::ArrayEnumerable*)::g::Uno::Internal::ArrayEnumerable::New1(::g::Uno::Internal::ArrayEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), ta)), ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr))));
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls/ContentControl.uno
// ------------------------------------------------------------------------

// public class ContentControl
// {
static void ContentControl_build(uType* type)
{
    ::STRINGS[9] = uString::Const(" (ContentControl) can only have one visual child");
    ::TYPES[4] = ::g::Fuse::Visual_typeof();
    ::TYPES[5] = ::g::Fuse::Elements::Element_typeof();
    ::TYPES[2] = ::TYPES[4/*Fuse.Visual*/]->MakeMethod(2/*FirstChild<Fuse.Visual>*/, ::TYPES[4/*Fuse.Visual*/], nullptr);
    ::TYPES[6] = ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr);
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(ContentControl_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(ContentControl_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(ContentControl_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(ContentControl_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(ContentControl_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(ContentControl_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(ContentControl_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(ContentControl_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(ContentControl_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(ContentControl_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::TYPES[4/*Fuse.Visual*/], nullptr), offsetof(ContentControl_type, interface10),
        ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/], offsetof(ContentControl_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(ContentControl_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(ContentControl_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(ContentControl_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(ContentControl_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(ContentControl_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(ContentControl_type, interface17));
    type->SetFields(106);
}

ContentControl_type* ContentControl_typeof()
{
    static uSStrong<ContentControl_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::Control_typeof();
    options.FieldCount = 106;
    options.InterfaceCount = 18;
    options.ObjectSize = sizeof(ContentControl);
    options.TypeSize = sizeof(ContentControl_type);
    type = (ContentControl_type*)uClassType::New("Fuse.Controls.ContentControl", options);
    type->fp_build_ = ContentControl_build;
    type->fp_ArrangePaddingBox = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::LayoutParams*))ContentControl__ArrangePaddingBox_fn;
    type->fp_GetContentSize = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::LayoutParams*, ::g::Uno::Float2*))ContentControl__GetContentSize_fn;
    type->fp_OnChildAdded = (void(*)(::g::Fuse::Visual*, ::g::Fuse::Node*))ContentControl__OnChildAdded_fn;
    type->fp_OnChildRemoved = (void(*)(::g::Fuse::Visual*, ::g::Fuse::Node*))ContentControl__OnChildRemoved_fn;
    type->fp_OnContentChanged = ContentControl__OnContentChanged_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// protected override void ArrangePaddingBox(Fuse.LayoutParams lp)
void ContentControl__ArrangePaddingBox_fn(ContentControl* __this, ::g::Fuse::LayoutParams* lp)
{
    ::g::Uno::Float4 ind1;
    ::g::Uno::Float4 ind2;
    ::g::Uno::Float4 ind3;
    ::g::Fuse::LayoutParams lp_ = *lp;

    if (__this->Content() != nullptr)
    {
        ::g::Fuse::LayoutParams nlp = lp_.CloneAndDerive();
        nlp.RemoveSize(::g::Uno::Float2__op_Addition2((ind1 = __this->Padding(), ::g::Uno::Float2__New2(ind1.X, ind1.Y)), (ind2 = __this->Padding(), ::g::Uno::Float2__New2(ind2.Z, ind2.W))));
        uPtr(__this->Content())->ArrangeMarginBox((ind3 = __this->Padding(), ::g::Uno::Float2__New2(ind3.X, ind3.Y)), nlp);
    }
}

// public Fuse.Elements.Element get_Content()
void ContentControl__get_Content_fn(ContentControl* __this, ::g::Fuse::Elements::Element** __retval)
{
    *__retval = __this->Content();
}

// public void set_Content(Fuse.Elements.Element value)
void ContentControl__set_Content_fn(ContentControl* __this, ::g::Fuse::Elements::Element* value)
{
    __this->Content(value);
}

// protected override float2 GetContentSize(Fuse.LayoutParams lp)
void ContentControl__GetContentSize_fn(ContentControl* __this, ::g::Fuse::LayoutParams* lp, ::g::Uno::Float2* __retval)
{
    ::g::Fuse::LayoutParams lp_ = *lp;

    if (__this->Content() != nullptr)
        return *__retval = uPtr(__this->Content())->GetMarginSize(lp_), void();

    return *__retval = ::g::Uno::Float2__New1(0.0f), void();
}

// protected override sealed void OnChildAdded(Fuse.Node n)
void ContentControl__OnChildAdded_fn(ContentControl* __this, ::g::Fuse::Node* n)
{
    ::g::Fuse::Elements::Element__OnChildAdded_fn(__this, n);

    if (uIs(n, ::TYPES[4/*Fuse.Visual*/]))
    {
        if (__this->VisualChildCount() > 1)
            U_THROW(::g::Uno::Exception::New2(::g::Uno::String::op_Addition(__this, ::STRINGS[9/*" (ContentCo...*/])));

        __this->OnContentChanged();
    }
}

// protected override sealed void OnChildRemoved(Fuse.Node n)
void ContentControl__OnChildRemoved_fn(ContentControl* __this, ::g::Fuse::Node* n)
{
    ::g::Fuse::Elements::Element__OnChildRemoved_fn(__this, n);

    if (uIs(n, ::TYPES[4/*Fuse.Visual*/]))
        __this->OnContentChanged();
}

// protected virtual void OnContentChanged()
void ContentControl__OnContentChanged_fn(ContentControl* __this)
{
    __this->InvalidateLayout(2);
}

// public Fuse.Elements.Element get_Content() [instance]
::g::Fuse::Elements::Element* ContentControl::Content()
{
    return uAs< ::g::Fuse::Elements::Element*>((::g::Fuse::Visual*)FirstChild(::TYPES[2/*Fuse.Visual.FirstChild<Fuse.Visual>*/]), ::TYPES[5/*Fuse.Elements.Element*/]);
}

// public void set_Content(Fuse.Elements.Element value) [instance]
void ContentControl::Content(::g::Fuse::Elements::Element* value)
{
    bool ret5;

    if (Content() != value)
    {
        if (Content() != nullptr)
            ::g::Uno::Collections::ICollection::Remove_ex(uInterface(uPtr(Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), Content(), &ret5);

        if (value != nullptr)
            ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), value);
    }
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls/Control.Background.uno
// ----------------------------------------------------------------------------

// public interfacemodifiers class Control
// {
static void Control_build(uType* type)
{
    ::STRINGS[10] = uString::Const("Background must be a solid color");
    ::STRINGS[11] = uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls/Control.Background.uno");
    ::STRINGS[12] = uString::Const("SetBackground");
    ::TYPES[7] = ::g::Fuse::Elements::ITreeRenderer_typeof();
    ::TYPES[8] = ::g::Fuse::Drawing::DynamicBrush_typeof();
    ::TYPES[9] = ::g::Fuse::Drawing::ISolidColor_typeof();
    type->SetDependencies(
        ::g::Fuse::Internal::Drawing::SolidRectangle_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(Control_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(Control_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(Control_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(Control_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(Control_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(Control_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(Control_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(Control_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(Control_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(Control_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(Control_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(Control_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(Control_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(Control_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(Control_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(Control_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(Control_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(Control_type, interface17));
    type->SetFields(102,
        ::g::Fuse::Drawing::Brush_typeof(), offsetof(Control, _background), 0,
        ::g::Uno::Bool_typeof(), offsetof(Control, _backgroundRooted), 0,
        ::g::Fuse::Controls::Native::IView_typeof(), offsetof(Control, _nativeView), 0,
        ::g::Fuse::Visual_typeof(), offsetof(Control, _GraphicsVisual), 0);
}

Control_type* Control_typeof()
{
    static uSStrong<Control_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Elements::Element_typeof();
    options.FieldCount = 106;
    options.InterfaceCount = 18;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(Control);
    options.TypeSize = sizeof(Control_type);
    type = (Control_type*)uClassType::New("Fuse.Controls.Control", options);
    type->fp_build_ = Control_build;
    type->fp_CalcRenderBounds = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::VisualBounds**))Control__CalcRenderBounds_fn;
    type->fp_CompensateForScrollView = Control__CompensateForScrollView_fn;
    type->fp_CreateNativeView = Control__CreateNativeView_fn;
    type->fp_DrawVisual = Control__DrawVisual_fn;
    type->fp_GetContentSize = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::LayoutParams*, ::g::Uno::Float2*))Control__GetContentSize_fn;
    type->fp_get_HitTestLocalVisualBounds = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::VisualBounds**))Control__get_HitTestLocalVisualBounds_fn;
    type->fp_OnDraw = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::DrawContext*))Control__OnDraw_fn;
    type->fp_OnHitTestLocalVisual = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::HitTestContext*))Control__OnHitTestLocalVisual_fn;
    type->fp_OnInvalidateVisual = (void(*)(::g::Fuse::Visual*))Control__OnInvalidateVisual_fn;
    type->fp_OnPropertyChanged2 = (void(*)(::g::Fuse::Visual*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))Control__OnPropertyChanged2_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))Control__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))Control__OnUnrooted_fn;
    type->fp_PushPropertiesToNativeView = Control__PushPropertiesToNativeView_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// protected generated Control()
void Control__ctor_4_fn(Control* __this)
{
    __this->ctor_4();
}

// public Fuse.Drawing.Brush get_Background()
void Control__get_Background_fn(Control* __this, ::g::Fuse::Drawing::Brush** __retval)
{
    *__retval = __this->Background();
}

// public void set_Background(Fuse.Drawing.Brush value)
void Control__set_Background_fn(Control* __this, ::g::Fuse::Drawing::Brush* value)
{
    __this->Background(value);
}

// protected override Fuse.VisualBounds CalcRenderBounds()
void Control__CalcRenderBounds_fn(Control* __this, ::g::Fuse::VisualBounds** __retval)
{
    ::g::Fuse::VisualBounds* ret1;
    ::g::Fuse::VisualBounds* b = (::g::Fuse::Elements::Element__CalcRenderBounds_fn(__this, &ret1), ret1);

    if (__this->Background() != nullptr)
        b = uPtr(b)->AddRect(::g::Uno::Float2__New1(0.0f), __this->ActualSize());

    return *__retval = b, void();
}

// internal virtual void CompensateForScrollView(float4x4& t)
void Control__CompensateForScrollView_fn(Control* __this, ::g::Uno::Float4x4* t)
{
}

// protected virtual Fuse.Controls.Native.IView CreateNativeView()
void Control__CreateNativeView_fn(Control* __this, uObject** __retval)
{
    return *__retval = nullptr, void();
}

// protected void DrawBackground(Fuse.DrawContext dc, float opacity)
void Control__DrawBackground_fn(Control* __this, ::g::Fuse::DrawContext* dc, float* opacity)
{
    __this->DrawBackground(dc, *opacity);
}

// protected virtual void DrawVisual(Fuse.DrawContext dc)
void Control__DrawVisual_fn(Control* __this, ::g::Fuse::DrawContext* dc)
{
}

// protected override float2 GetContentSize(Fuse.LayoutParams lp)
void Control__GetContentSize_fn(Control* __this, ::g::Fuse::LayoutParams* lp, ::g::Uno::Float2* __retval)
{
    ::g::Fuse::LayoutParams lp_ = *lp;
    ::g::Uno::Float2 ret2;
    uObject* t = __this->TreeRenderer();

    if (t != nullptr)
    {
        ::g::Uno::Float2 size;

        if (::g::Fuse::Elements::ITreeRenderer::Measure(uInterface(uPtr(t), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), __this, lp_, &size))
            return *__retval = size, void();
    }

    return *__retval = (::g::Fuse::Elements::Element__GetContentSize_fn(__this, uCRef(lp_), &ret2), ret2), void();
}

// public generated Fuse.Visual get_GraphicsVisual()
void Control__get_GraphicsVisual_fn(Control* __this, ::g::Fuse::Visual** __retval)
{
    *__retval = __this->GraphicsVisual();
}

// internal generated void set_GraphicsVisual(Fuse.Visual value)
void Control__set_GraphicsVisual_fn(Control* __this, ::g::Fuse::Visual* value)
{
    __this->GraphicsVisual(value);
}

// protected override Fuse.VisualBounds get_HitTestLocalVisualBounds()
void Control__get_HitTestLocalVisualBounds_fn(Control* __this, ::g::Fuse::VisualBounds** __retval)
{
    ::g::Fuse::VisualBounds* ret3;
    ::g::Fuse::VisualBounds* nb = (::g::Fuse::Elements::Element__get_HitTestLocalVisualBounds_fn(__this, &ret3), ret3);

    if (__this->Background() != nullptr)
        nb = uPtr(nb)->AddRect(::g::Uno::Float2__New1(0.0f), __this->ActualSize());

    return *__retval = nb, void();
}

// internal Fuse.Controls.Native.IView InstantiateNativeView()
void Control__InstantiateNativeView_fn(Control* __this, uObject** __retval)
{
    *__retval = __this->InstantiateNativeView();
}

// public Fuse.Controls.Native.IView get_NativeView()
void Control__get_NativeView_fn(Control* __this, uObject** __retval)
{
    *__retval = __this->NativeView();
}

// internal void set_NativeView(Fuse.Controls.Native.IView value)
void Control__set_NativeView_fn(Control* __this, uObject* value)
{
    __this->NativeView(value);
}

// private void OnBackgroundChanged()
void Control__OnBackgroundChanged_fn(Control* __this)
{
    __this->OnBackgroundChanged();
}

// protected override sealed void OnDraw(Fuse.DrawContext dc)
void Control__OnDraw_fn(Control* __this, ::g::Fuse::DrawContext* dc)
{
    __this->DrawBackground(dc, 1.0f);
    __this->DrawVisual(dc);
}

// protected override void OnHitTestLocalVisual(Fuse.HitTestContext htc)
void Control__OnHitTestLocalVisual_fn(Control* __this, ::g::Fuse::HitTestContext* htc)
{
    if ((__this->Background() != nullptr) && __this->IsPointInside(uPtr(htc)->LocalPoint()))
        uPtr(htc)->Hit(__this);

    ::g::Fuse::Elements::Element__OnHitTestLocalVisual_fn(__this, htc);
}

// protected override void OnInvalidateVisual()
void Control__OnInvalidateVisual_fn(Control* __this)
{
    ::g::Fuse::Elements::Element__OnInvalidateVisual_fn(__this);

    if (__this->ViewHandle() != nullptr)
        uPtr(__this->ViewHandle())->Invalidate();
}

// public override void OnPropertyChanged(Uno.UX.PropertyObject obj, Uno.UX.Selector prop)
void Control__OnPropertyChanged2_fn(Control* __this, ::g::Uno::UX::PropertyObject* obj, ::g::Uno::UX::Selector* prop)
{
    ::g::Uno::UX::Selector prop_ = *prop;

    if (obj == __this->Background())
    {
        __this->InvalidateVisual();

        if (__this->IsRootingCompleted())
            __this->OnBackgroundChanged();
    }

    ::g::Fuse::Visual__OnPropertyChanged2_fn(__this, obj, uCRef(prop_));
}

// protected override void OnRooted()
void Control__OnRooted_fn(Control* __this)
{
    ::g::Fuse::Elements::Element__OnRooted_fn(__this);
    __this->RootBackground();

    if (__this->_background != nullptr)
        __this->OnBackgroundChanged();
}

// protected override void OnUnrooted()
void Control__OnUnrooted_fn(Control* __this)
{
    __this->UnrootBackground();
    ::g::Fuse::Elements::Element__OnUnrooted_fn(__this);
}

// protected virtual void PushPropertiesToNativeView()
void Control__PushPropertiesToNativeView_fn(Control* __this)
{
}

// private void RootBackground()
void Control__RootBackground_fn(Control* __this)
{
    __this->RootBackground();
}

// private void SetBackground(Fuse.Drawing.Brush value)
void Control__SetBackground_fn(Control* __this, ::g::Fuse::Drawing::Brush* value)
{
    __this->SetBackground(value);
}

// private void UnrootBackground()
void Control__UnrootBackground_fn(Control* __this)
{
    __this->UnrootBackground();
}

// protected generated Control() [instance]
void Control::ctor_4()
{
    ctor_3();
}

// public Fuse.Drawing.Brush get_Background() [instance]
::g::Fuse::Drawing::Brush* Control::Background()
{
    return _background;
}

// public void set_Background(Fuse.Drawing.Brush value) [instance]
void Control::Background(::g::Fuse::Drawing::Brush* value)
{
    if (_background != value)
        SetBackground(value);
}

// protected void DrawBackground(Fuse.DrawContext dc, float opacity) [instance]
void Control::DrawBackground(::g::Fuse::DrawContext* dc, float opacity)
{
    if ((Background() != nullptr) && !uPtr(Background())->IsCompletelyTransparent())
    {
        double t;
        uPtr(Background())->Prepare(dc, ActualSize());
        uPtr(::g::Fuse::Internal::Drawing::SolidRectangle::Impl())->DrawElement(dc, this, Background(), opacity);
    }
}

// public generated Fuse.Visual get_GraphicsVisual() [instance]
::g::Fuse::Visual* Control::GraphicsVisual()
{
    return _GraphicsVisual;
}

// internal generated void set_GraphicsVisual(Fuse.Visual value) [instance]
void Control::GraphicsVisual(::g::Fuse::Visual* value)
{
    _GraphicsVisual = value;
}

// internal Fuse.Controls.Native.IView InstantiateNativeView() [instance]
uObject* Control::InstantiateNativeView()
{
    return CreateNativeView();
}

// public Fuse.Controls.Native.IView get_NativeView() [instance]
uObject* Control::NativeView()
{
    return _nativeView;
}

// internal void set_NativeView(Fuse.Controls.Native.IView value) [instance]
void Control::NativeView(uObject* value)
{
    _nativeView = value;

    if (_nativeView != nullptr)
        PushPropertiesToNativeView();
}

// private void OnBackgroundChanged() [instance]
void Control::OnBackgroundChanged()
{
    uObject* t = TreeRenderer();

    if (t != nullptr)
        ::g::Fuse::Elements::ITreeRenderer::BackgroundChanged(uInterface(uPtr(TreeRenderer()), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), this, Background());
}

// private void RootBackground() [instance]
void Control::RootBackground()
{
    if ((!IsRootingStarted() || (_background == nullptr)) || _backgroundRooted)
        return;

    _backgroundRooted = true;
    uPtr(_background)->Pin();
    ::g::Fuse::Drawing::DynamicBrush* dbg = uAs< ::g::Fuse::Drawing::DynamicBrush*>(_background, ::TYPES[8/*Fuse.Drawing.DynamicBrush*/]);

    if (dbg != nullptr)
        uPtr(dbg)->AddPropertyListener((uObject*)this);
}

// private void SetBackground(Fuse.Drawing.Brush value) [instance]
void Control::SetBackground(::g::Fuse::Drawing::Brush* value)
{
    if ((value != nullptr) && !uIs(value, ::TYPES[9/*Fuse.Drawing.ISolidColor*/]))
        ::g::Fuse::Diagnostics::Deprecated(::STRINGS[10/*"Background ...*/], this, ::STRINGS[11/*"/Users/mort...*/], 39, ::STRINGS[12/*"SetBackground"*/]);

    UnrootBackground();
    _background = value;
    RootBackground();
    InvalidateRenderBounds();

    if (IsRootingCompleted())
        OnBackgroundChanged();
}

// private void UnrootBackground() [instance]
void Control::UnrootBackground()
{
    if (_background == nullptr)
        return;

    if (!_backgroundRooted)
        return;

    _backgroundRooted = false;
    uPtr(_background)->Unpin();
    ::g::Fuse::Drawing::DynamicBrush* dbg = uAs< ::g::Fuse::Drawing::DynamicBrush*>(_background, ::TYPES[8/*Fuse.Drawing.DynamicBrush*/]);

    if (dbg != nullptr)
        uPtr(dbg)->RemovePropertyListener((uObject*)this);
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigationControl.uno
// --------------------------------------------------------------------------------------

// public sealed class NavigationControl.ControlPageData
// {
static void NavigationControl__ControlPageData_build(uType* type)
{
    type->SetFields(0,
        ::g::Fuse::Triggers::Trigger_typeof(), offsetof(NavigationControl__ControlPageData, Enter), 0,
        ::g::Fuse::Triggers::Trigger_typeof(), offsetof(NavigationControl__ControlPageData, Exit), 0,
        ::g::Fuse::Triggers::Trigger_typeof(), offsetof(NavigationControl__ControlPageData, Inactive), 0,
        ::g::Fuse::Triggers::Trigger_typeof(), offsetof(NavigationControl__ControlPageData, Removing), 0,
        ::g::Uno::Bool_typeof(), offsetof(NavigationControl__ControlPageData, FromTemplate), 0);
}

uType* NavigationControl__ControlPageData_typeof()
{
    static uSStrong<uType*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.FieldCount = 5;
    options.ObjectSize = sizeof(NavigationControl__ControlPageData);
    options.TypeSize = sizeof(uType);
    type = uClassType::New("Fuse.Controls.NavigationControl.ControlPageData", options);
    type->fp_build_ = NavigationControl__ControlPageData_build;
    type->fp_ctor_ = (void*)NavigationControl__ControlPageData__New1_fn;
    return type;
}

// public generated ControlPageData()
void NavigationControl__ControlPageData__ctor__fn(NavigationControl__ControlPageData* __this)
{
    __this->ctor_();
}

// public generated ControlPageData New()
void NavigationControl__ControlPageData__New1_fn(NavigationControl__ControlPageData** __retval)
{
    *__retval = NavigationControl__ControlPageData::New1();
}

// public generated ControlPageData() [instance]
void NavigationControl__ControlPageData::ctor_()
{
}

// public generated ControlPageData New() [static]
NavigationControl__ControlPageData* NavigationControl__ControlPageData::New1()
{
    NavigationControl__ControlPageData* obj1 = (NavigationControl__ControlPageData*)uNew(NavigationControl__ControlPageData_typeof());
    obj1->ctor_();
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Curve.uno
// ---------------------------------------------------------------------------------

// public sealed class Curve
// {
static void Curve_build(uType* type)
{
    ::TYPES[10] = ::g::Fuse::Controls::CurvePoint_typeof();
    ::TYPES[11] = ::g::Fuse::Visual_typeof()->MakeMethod(2/*FirstChild<Fuse.Controls.CurvePoint>*/, ::TYPES[10/*Fuse.Controls.CurvePoint*/], nullptr);
    ::TYPES[12] = ::g::Fuse::Node_typeof()->MakeMethod(3/*NextSibling<Fuse.Controls.CurvePoint>*/, ::TYPES[10/*Fuse.Controls.CurvePoint*/], nullptr);
    type->SetDependencies(
        ::g::Uno::Math_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface18),
        ::g::Fuse::Drawing::IDrawObjectWatcherFeedback_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface19));
    type->SetFields(124,
        ::g::Uno::Collections::List_typeof()->MakeType(::TYPES[10/*Fuse.Controls.CurvePoint*/], nullptr), offsetof(Curve, _points), 0,
        ::g::Uno::Float_typeof(), offsetof(Curve, _tension), 0,
        ::g::Uno::Float_typeof(), offsetof(Curve, _bias), 0,
        ::g::Uno::Float_typeof(), offsetof(Curve, _continuity), 0,
        ::g::Fuse::Controls::CurveStyle_typeof(), offsetof(Curve, _style), 0,
        ::g::Fuse::Controls::CurveClose_typeof(), offsetof(Curve, _close), 0,
        ::g::Fuse::Controls::CurveExtrude_typeof(), offsetof(Curve, _extrude), 0,
        ::g::Uno::Float_typeof(), offsetof(Curve, _extrudeTo), 0,
        ::g::Fuse::Drawing::LineSegments_typeof(), offsetof(Curve, _segments1), 0);
}

::g::Fuse::Controls::SegmentedShape_type* Curve_typeof()
{
    static uSStrong< ::g::Fuse::Controls::SegmentedShape_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::SegmentedShape_typeof();
    options.FieldCount = 133;
    options.InterfaceCount = 20;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(Curve);
    options.TypeSize = sizeof(::g::Fuse::Controls::SegmentedShape_type);
    type = (::g::Fuse::Controls::SegmentedShape_type*)uClassType::New("Fuse.Controls.Curve", options);
    type->fp_build_ = Curve_build;
    type->fp_CalcShapeExtents = (void(*)(::g::Fuse::Controls::Shape*, ::g::Uno::Rect*))Curve__CalcShapeExtents_fn;
    type->fp_GetSegments = (void(*)(::g::Fuse::Controls::SegmentedShape*, uObject**))Curve__GetSegments_fn;
    type->fp_InvalidateSurfacePath = (void(*)(::g::Fuse::Controls::Shape*))Curve__InvalidateSurfacePath_fn;
    type->fp_OnChildAdded = (void(*)(::g::Fuse::Visual*, ::g::Fuse::Node*))Curve__OnChildAdded_fn;
    type->fp_OnChildRemoved = (void(*)(::g::Fuse::Visual*, ::g::Fuse::Node*))Curve__OnChildRemoved_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))Curve__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))Curve__OnUnrooted_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))Curve__UnoUXIPropertyListenerOnPropertyChanged_fn;
    type->interface19.fp_Changed = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackChanged_fn;
    type->interface19.fp_Prepare = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackPrepare_fn;
    type->interface19.fp_Unprepare = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackUnprepare_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// protected override sealed Uno.Rect CalcShapeExtents()
void Curve__CalcShapeExtents_fn(Curve* __this, ::g::Uno::Rect* __retval)
{
    return *__retval = ::g::Fuse::Drawing::LineMetrics::GetBounds(__this->GetSegments()), void();
}

// public Fuse.Controls.CurveClose get_Close()
void Curve__get_Close_fn(Curve* __this, int32_t* __retval)
{
    *__retval = __this->Close();
}

// public void set_Close(Fuse.Controls.CurveClose value)
void Curve__set_Close_fn(Curve* __this, int32_t* value)
{
    __this->Close(*value);
}

// public Fuse.Controls.CurveExtrude get_Extrude()
void Curve__get_Extrude_fn(Curve* __this, int32_t* __retval)
{
    *__retval = __this->Extrude();
}

// public void set_Extrude(Fuse.Controls.CurveExtrude value)
void Curve__set_Extrude_fn(Curve* __this, int32_t* value)
{
    __this->Extrude(*value);
}

// private float2 ExtrudePoint(float2 pt)
void Curve__ExtrudePoint_fn(Curve* __this, ::g::Uno::Float2* pt, ::g::Uno::Float2* __retval)
{
    *__retval = __this->ExtrudePoint(*pt);
}

// public float get_ExtrudeTo()
void Curve__get_ExtrudeTo_fn(Curve* __this, float* __retval)
{
    *__retval = __this->ExtrudeTo();
}

// public void set_ExtrudeTo(float value)
void Curve__set_ExtrudeTo_fn(Curve* __this, float* value)
{
    __this->ExtrudeTo(*value);
}

// internal override sealed Uno.Collections.IList<Fuse.Drawing.LineSegment> GetSegments()
void Curve__GetSegments_fn(Curve* __this, uObject** __retval)
{
    ::g::Uno::Float2 ind1;
    ::g::Fuse::Controls::CurvePoint* ret3;
    ::g::Fuse::Controls::CurvePoint* ret4;
    ::g::Fuse::Controls::CurvePoint* ret5;
    ::g::Fuse::Controls::CurvePoint* ret6;
    ::g::Fuse::Controls::CurvePoint* ret7;
    ::g::Fuse::Controls::CurvePoint* ret8;
    ::g::Fuse::Controls::CurvePoint* ret9;
    ::g::Fuse::Controls::CurvePoint* ret10;

    if ((uPtr(__this->_segments1)->Count() > 0) || (uPtr(__this->_points)->Count() < 2))
        return *__retval = uPtr(__this->_segments1)->Segments(), void();

    ::g::Uno::Float2 rs = __this->ActualSize();
    ::g::Fuse::Drawing::LineSegments* line = __this->_segments1;
    int32_t end = (__this->Close() == 2) ? uPtr(__this->_points)->Count() + 1 : uPtr(__this->_points)->Count();

    for (int32_t i = 0; i < end; ++i)
    {
        if (i == 0)
        {
            uPtr(line)->MoveTo(::g::Uno::Float2__op_Multiply2(uPtr((::g::Uno::Collections::List__get_Item_fn(uPtr(__this->_points), uCRef<int32_t>(i), &ret3), ret3))->At(), rs));
            continue;
        }

        if (__this->Style() == 0)
        {
            uPtr(line)->LineTo(::g::Uno::Float2__op_Multiply2(uPtr((::g::Uno::Collections::List__get_Item_fn(uPtr(__this->_points), uCRef<int32_t>(__this->WrapPointsIndex(i)), &ret4), ret4))->At(), rs));
            continue;
        }

        ::g::Fuse::Controls::CurvePoint* prev = (::g::Uno::Collections::List__get_Item_fn(uPtr(__this->_points), uCRef<int32_t>(__this->WrapPointsIndex(i - 2)), &ret5), ret5);
        ::g::Fuse::Controls::CurvePoint* cur = (::g::Uno::Collections::List__get_Item_fn(uPtr(__this->_points), uCRef<int32_t>(__this->WrapPointsIndex(i - 1)), &ret6), ret6);
        ::g::Fuse::Controls::CurvePoint* next = (::g::Uno::Collections::List__get_Item_fn(uPtr(__this->_points), uCRef<int32_t>(__this->WrapPointsIndex(i)), &ret7), ret7);
        ::g::Fuse::Controls::CurvePoint* next2 = (::g::Uno::Collections::List__get_Item_fn(uPtr(__this->_points), uCRef<int32_t>(__this->WrapPointsIndex(i + 1)), &ret8), ret8);
        ::g::Uno::Float4 ta, tb;
        ::g::Fuse::Internal::Curves::KochanekBartelTangent(::g::Uno::Float4__New6(uPtr(prev)->At(), 0.0f, 0.0f), ::g::Uno::Float4__New6(uPtr(cur)->At(), 0.0f, 0.0f), ::g::Uno::Float4__New6(uPtr(next)->At(), 0.0f, 0.0f), ::g::Uno::Float4__New6(uPtr(next2)->At(), 0.0f, 0.0f), __this->_tension, __this->_bias, __this->_continuity, &ta, &tb);

        if (cur->HasTangentOut())
            ta = ::g::Uno::Float4__New6(uPtr(cur)->TangentOut(), 0.0f, 0.0f);

        if (next->HasTangentIn())
            tb = ::g::Uno::Float4__New6(uPtr(next)->TangentIn(), 0.0f, 0.0f);

        ::g::Fuse::Internal::Curves::CubicHermiteToBezier(::g::Uno::Float4__New6(cur->At(), 0.0f, 0.0f), ::g::Uno::Float4__New6(next->At(), 0.0f, 0.0f), &ta, &tb);

        if (cur->HasControlOut())
            ta = ::g::Uno::Float4__New6(uPtr(cur)->ControlOut(), 0.0f, 0.0f);

        if (next->HasControlIn())
            tb = ::g::Uno::Float4__New6(uPtr(next)->ControlIn(), 0.0f, 0.0f);

        uPtr(line)->BezierCurveTo(::g::Uno::Float2__op_Multiply2((ind1 = next->At(), ::g::Uno::Float2__New2(ind1.X, ind1.Y)), rs), ::g::Uno::Float2__op_Multiply2(::g::Uno::Float2__New2(ta.X, ta.Y), rs), ::g::Uno::Float2__op_Multiply2(::g::Uno::Float2__New2(tb.X, tb.Y), rs));
    }

    if (__this->Extrude() != 0)
    {
        uPtr(line)->LineTo(::g::Uno::Float2__op_Multiply2(__this->ExtrudePoint(uPtr((::g::Uno::Collections::List__get_Item_fn(uPtr(__this->_points), uCRef<int32_t>(uPtr(__this->_points)->Count() - 1), &ret9), ret9))->At()), rs));
        line->LineTo(::g::Uno::Float2__op_Multiply2(__this->ExtrudePoint(uPtr((::g::Uno::Collections::List__get_Item_fn(uPtr(__this->_points), uCRef<int32_t>(0), &ret10), ret10))->At()), rs));
        line->ClosePath();
    }
    else if (__this->Close() != 0)
        uPtr(line)->ClosePath();

    return *__retval = uPtr(__this->_segments1)->Segments(), void();
}

// protected override sealed void InvalidateSurfacePath()
void Curve__InvalidateSurfacePath_fn(Curve* __this)
{
    ::g::Fuse::Controls::SegmentedShape__InvalidateSurfacePath_fn(__this);
    uPtr(__this->_segments1)->Clear();
    __this->InvalidateRenderBounds();
}

// protected override sealed void OnChildAdded(Fuse.Node elm)
void Curve__OnChildAdded_fn(Curve* __this, ::g::Fuse::Node* elm)
{
    ::g::Fuse::Controls::LayoutControl__OnChildAdded_fn(__this, elm);

    if (__this->IsRootingCompleted() && uIs(elm, ::TYPES[10/*Fuse.Controls.CurvePoint*/]))
    {
        uPtr(uAs< ::g::Fuse::Controls::CurvePoint*>(elm, ::TYPES[10/*Fuse.Controls.CurvePoint*/]))->AddPropertyListener((uObject*)__this);
        __this->ResetLines();
    }
}

// protected override sealed void OnChildRemoved(Fuse.Node elm)
void Curve__OnChildRemoved_fn(Curve* __this, ::g::Fuse::Node* elm)
{
    ::g::Fuse::Controls::LayoutControl__OnChildRemoved_fn(__this, elm);

    if (__this->IsRootingCompleted() && uIs(elm, ::TYPES[10/*Fuse.Controls.CurvePoint*/]))
    {
        uPtr(uAs< ::g::Fuse::Controls::CurvePoint*>(elm, ::TYPES[10/*Fuse.Controls.CurvePoint*/]))->RemovePropertyListener((uObject*)__this);
        __this->ResetLines();
    }
}

// protected override sealed void OnRooted()
void Curve__OnRooted_fn(Curve* __this)
{
    ::g::Fuse::Controls::CurvePoint* ret11;
    ::g::Fuse::Controls::Shape__OnRooted_fn(__this);
    __this->ResetLines();

    for (int32_t i = 0; i < uPtr(__this->_points)->Count(); ++i)
        uPtr((::g::Uno::Collections::List__get_Item_fn(uPtr(__this->_points), uCRef<int32_t>(i), &ret11), ret11))->AddPropertyListener((uObject*)__this);
}

// protected override sealed void OnUnrooted()
void Curve__OnUnrooted_fn(Curve* __this)
{
    ::g::Fuse::Controls::CurvePoint* ret12;

    for (int32_t i = 0; i < uPtr(__this->_points)->Count(); ++i)
        uPtr((::g::Uno::Collections::List__get_Item_fn(uPtr(__this->_points), uCRef<int32_t>(i), &ret12), ret12))->RemovePropertyListener((uObject*)__this);

    ::g::Fuse::Controls::Shape__OnUnrooted_fn(__this);
}

// private void ResetLines()
void Curve__ResetLines_fn(Curve* __this)
{
    __this->ResetLines();
}

// public Fuse.Controls.CurveStyle get_Style()
void Curve__get_Style_fn(Curve* __this, int32_t* __retval)
{
    *__retval = __this->Style();
}

// public void set_Style(Fuse.Controls.CurveStyle value)
void Curve__set_Style_fn(Curve* __this, int32_t* value)
{
    __this->Style(*value);
}

// private void Uno.UX.IPropertyListener.OnPropertyChanged(Uno.UX.PropertyObject obj, Uno.UX.Selector prop)
void Curve__UnoUXIPropertyListenerOnPropertyChanged_fn(Curve* __this, ::g::Uno::UX::PropertyObject* obj, ::g::Uno::UX::Selector* prop)
{
    if (uIs(obj, ::TYPES[10/*Fuse.Controls.CurvePoint*/]))
        __this->InvalidateSurfacePath();
}

// private int WrapPointsIndex(int a)
void Curve__WrapPointsIndex_fn(Curve* __this, int32_t* a, int32_t* __retval)
{
    *__retval = __this->WrapPointsIndex(*a);
}

// public Fuse.Controls.CurveClose get_Close() [instance]
int32_t Curve::Close()
{
    return _close;
}

// public void set_Close(Fuse.Controls.CurveClose value) [instance]
void Curve::Close(int32_t value)
{
    if (_close == value)
        return;

    _close = value;
    InvalidateSurfacePath();
}

// public Fuse.Controls.CurveExtrude get_Extrude() [instance]
int32_t Curve::Extrude()
{
    return _extrude;
}

// public void set_Extrude(Fuse.Controls.CurveExtrude value) [instance]
void Curve::Extrude(int32_t value)
{
    if (_extrude == value)
        return;

    _extrude = value;
    InvalidateSurfacePath();
}

// private float2 ExtrudePoint(float2 pt) [instance]
::g::Uno::Float2 Curve::ExtrudePoint(::g::Uno::Float2 pt)
{
    switch (Extrude())
    {
        case 1:
            return ::g::Uno::Float2__New2(pt.X, 1.0f);
        case 2:
            return ::g::Uno::Float2__New2(pt.X, 0.0f);
        case 3:
            return ::g::Uno::Float2__New2(0.0f, pt.Y);
        case 4:
            return ::g::Uno::Float2__New2(1.0f, pt.Y);
        case 6:
            return ::g::Uno::Float2__New2(ExtrudeTo(), pt.Y);
        case 5:
            return ::g::Uno::Float2__New2(pt.X, ExtrudeTo());
    }

    return pt;
}

// public float get_ExtrudeTo() [instance]
float Curve::ExtrudeTo()
{
    return _extrudeTo;
}

// public void set_ExtrudeTo(float value) [instance]
void Curve::ExtrudeTo(float value)
{
    if (_extrudeTo == value)
        return;

    _extrudeTo = value;
    InvalidateSurfacePath();
}

// private void ResetLines() [instance]
void Curve::ResetLines()
{
    InvalidateSurfacePath();
    uPtr(_points)->Clear();

    for (::g::Fuse::Controls::CurvePoint* n = (::g::Fuse::Controls::CurvePoint*)FirstChild(::TYPES[11/*Fuse.Visual.FirstChild<Fuse.Controls.CurvePoint>*/]); n != nullptr; n = (::g::Fuse::Controls::CurvePoint*)uPtr(n)->NextSibling(::TYPES[12/*Fuse.Node.NextSibling<Fuse.Controls.CurvePoint>*/]))
        ::g::Uno::Collections::List__Add_fn(uPtr(_points), n);
}

// public Fuse.Controls.CurveStyle get_Style() [instance]
int32_t Curve::Style()
{
    return _style;
}

// public void set_Style(Fuse.Controls.CurveStyle value) [instance]
void Curve::Style(int32_t value)
{
    if (_style == value)
        return;

    _style = value;
    InvalidateSurfacePath();
}

// private int WrapPointsIndex(int a) [instance]
int32_t Curve::WrapPointsIndex(int32_t a)
{
    switch (Close())
    {
        case 0:
            break;
        case 1:
        {
            if (a < 0)
                a = a + (uPtr(_points)->Count() - 1);
            else if (a >= uPtr(_points)->Count())
                a = a - (uPtr(_points)->Count() - 1);

            break;
        }
        case 2:
        {
            if (a < 0)
                a = a + uPtr(_points)->Count();
            else if (a >= uPtr(_points)->Count())
                a = a - uPtr(_points)->Count();

            break;
        }
    }

    return ::g::Uno::Math::Clamp8(a, 0, uPtr(_points)->Count() - 1);
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Curve.uno
// ---------------------------------------------------------------------------------

// public enum CurveClose
uEnumType* CurveClose_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.CurveClose", ::g::Uno::Int_typeof(), 3);
    type->SetLiterals(
        "None", 0LL,
        "Overlap", 1LL,
        "Auto", 2LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Curve.uno
// ---------------------------------------------------------------------------------

// public enum CurveExtrude
uEnumType* CurveExtrude_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.CurveExtrude", ::g::Uno::Int_typeof(), 7);
    type->SetLiterals(
        "None", 0LL,
        "Bottom", 1LL,
        "Top", 2LL,
        "Left", 3LL,
        "Right", 4LL,
        "Vertical", 5LL,
        "Horizontal", 6LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Curve.uno
// ---------------------------------------------------------------------------------

// public sealed class CurvePoint
// {
// static generated CurvePoint()
static void CurvePoint__cctor_1_fn(uType* __type)
{
    CurvePoint::NameAt_ = ::g::Uno::UX::Selector__op_Implicit(uString::Const("At"));
    CurvePoint::NameTangentIn_ = ::g::Uno::UX::Selector__op_Implicit(uString::Const("TangentIn"));
    CurvePoint::NameTangentOut_ = ::g::Uno::UX::Selector__op_Implicit(uString::Const("TangentOut"));
    CurvePoint::NameControlIn_ = ::g::Uno::UX::Selector__op_Implicit(uString::Const("ControlIn"));
    CurvePoint::NameControlOut_ = ::g::Uno::UX::Selector__op_Implicit(uString::Const("ControlOut"));
}

static void CurvePoint_build(uType* type)
{
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Node_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Node_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Node_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Node_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Node_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Node_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Node_type, interface6));
    type->SetFields(17,
        ::g::Uno::Float2_typeof(), offsetof(CurvePoint, _at), 0,
        CurvePoint__HasFlags_typeof(), offsetof(CurvePoint, _has), 0,
        ::g::Uno::Float2_typeof(), offsetof(CurvePoint, _a), 0,
        ::g::Uno::Float2_typeof(), offsetof(CurvePoint, _b), 0,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&CurvePoint::NameAt_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&CurvePoint::NameTangentIn_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&CurvePoint::NameTangentOut_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&CurvePoint::NameControlIn_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&CurvePoint::NameControlOut_, uFieldFlagsStatic);
}

::g::Fuse::Node_type* CurvePoint_typeof()
{
    static uSStrong< ::g::Fuse::Node_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Node_typeof();
    options.FieldCount = 26;
    options.InterfaceCount = 7;
    options.ObjectSize = sizeof(CurvePoint);
    options.TypeSize = sizeof(::g::Fuse::Node_type);
    type = (::g::Fuse::Node_type*)uClassType::New("Fuse.Controls.CurvePoint", options);
    type->fp_build_ = CurvePoint_build;
    type->fp_cctor_ = CurvePoint__cctor_1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public float2 get_At()
void CurvePoint__get_At_fn(CurvePoint* __this, ::g::Uno::Float2* __retval)
{
    *__retval = __this->At();
}

// public void set_At(float2 value)
void CurvePoint__set_At_fn(CurvePoint* __this, ::g::Uno::Float2* value)
{
    __this->At(*value);
}

// public float2 get_ControlIn()
void CurvePoint__get_ControlIn_fn(CurvePoint* __this, ::g::Uno::Float2* __retval)
{
    *__retval = __this->ControlIn();
}

// public void set_ControlIn(float2 value)
void CurvePoint__set_ControlIn_fn(CurvePoint* __this, ::g::Uno::Float2* value)
{
    __this->ControlIn(*value);
}

// public float2 get_ControlOut()
void CurvePoint__get_ControlOut_fn(CurvePoint* __this, ::g::Uno::Float2* __retval)
{
    *__retval = __this->ControlOut();
}

// public void set_ControlOut(float2 value)
void CurvePoint__set_ControlOut_fn(CurvePoint* __this, ::g::Uno::Float2* value)
{
    __this->ControlOut(*value);
}

// public bool get_HasControlIn()
void CurvePoint__get_HasControlIn_fn(CurvePoint* __this, bool* __retval)
{
    *__retval = __this->HasControlIn();
}

// public bool get_HasControlOut()
void CurvePoint__get_HasControlOut_fn(CurvePoint* __this, bool* __retval)
{
    *__retval = __this->HasControlOut();
}

// public bool get_HasTangentIn()
void CurvePoint__get_HasTangentIn_fn(CurvePoint* __this, bool* __retval)
{
    *__retval = __this->HasTangentIn();
}

// public bool get_HasTangentOut()
void CurvePoint__get_HasTangentOut_fn(CurvePoint* __this, bool* __retval)
{
    *__retval = __this->HasTangentOut();
}

// public float2 get_TangentIn()
void CurvePoint__get_TangentIn_fn(CurvePoint* __this, ::g::Uno::Float2* __retval)
{
    *__retval = __this->TangentIn();
}

// public void set_TangentIn(float2 value)
void CurvePoint__set_TangentIn_fn(CurvePoint* __this, ::g::Uno::Float2* value)
{
    __this->TangentIn(*value);
}

// public float2 get_TangentOut()
void CurvePoint__get_TangentOut_fn(CurvePoint* __this, ::g::Uno::Float2* __retval)
{
    *__retval = __this->TangentOut();
}

// public void set_TangentOut(float2 value)
void CurvePoint__set_TangentOut_fn(CurvePoint* __this, ::g::Uno::Float2* value)
{
    __this->TangentOut(*value);
}

::g::Uno::UX::Selector CurvePoint::NameAt_;
::g::Uno::UX::Selector CurvePoint::NameTangentIn_;
::g::Uno::UX::Selector CurvePoint::NameTangentOut_;
::g::Uno::UX::Selector CurvePoint::NameControlIn_;
::g::Uno::UX::Selector CurvePoint::NameControlOut_;

// public float2 get_At() [instance]
::g::Uno::Float2 CurvePoint::At()
{
    return _at;
}

// public void set_At(float2 value) [instance]
void CurvePoint::At(::g::Uno::Float2 value)
{
    if (::g::Uno::Float2__op_Equality(_at, value) && ((_has & 3) == 3))
        return;

    _at = value;
    _has = (_has | 3);
    OnPropertyChanged(CurvePoint::NameAt_);
}

// public float2 get_ControlIn() [instance]
::g::Uno::Float2 CurvePoint::ControlIn()
{
    return _a;
}

// public void set_ControlIn(float2 value) [instance]
void CurvePoint::ControlIn(::g::Uno::Float2 value)
{
    if (::g::Uno::Float2__op_Equality(_a, value) && ((_has & 16) == 16))
        return;

    _a = value;
    _has = (_has | 16);
    OnPropertyChanged(CurvePoint::NameControlIn_);
}

// public float2 get_ControlOut() [instance]
::g::Uno::Float2 CurvePoint::ControlOut()
{
    return _b;
}

// public void set_ControlOut(float2 value) [instance]
void CurvePoint::ControlOut(::g::Uno::Float2 value)
{
    if (::g::Uno::Float2__op_Equality(_b, value) && ((_has & 32) == 32))
        return;

    _b = value;
    _has = (_has | 32);
    OnPropertyChanged(CurvePoint::NameControlOut_);
}

// public bool get_HasControlIn() [instance]
bool CurvePoint::HasControlIn()
{
    return (_has & 16) == 16;
}

// public bool get_HasControlOut() [instance]
bool CurvePoint::HasControlOut()
{
    return (_has & 32) == 32;
}

// public bool get_HasTangentIn() [instance]
bool CurvePoint::HasTangentIn()
{
    return (_has & 4) == 4;
}

// public bool get_HasTangentOut() [instance]
bool CurvePoint::HasTangentOut()
{
    return (_has & 8) == 8;
}

// public float2 get_TangentIn() [instance]
::g::Uno::Float2 CurvePoint::TangentIn()
{
    return _a;
}

// public void set_TangentIn(float2 value) [instance]
void CurvePoint::TangentIn(::g::Uno::Float2 value)
{
    if (::g::Uno::Float2__op_Equality(_a, value) && ((_has & 4) == 4))
        return;

    _a = value;
    _has = (_has | 4);
    OnPropertyChanged(CurvePoint::NameTangentIn_);
}

// public float2 get_TangentOut() [instance]
::g::Uno::Float2 CurvePoint::TangentOut()
{
    return _b;
}

// public void set_TangentOut(float2 value) [instance]
void CurvePoint::TangentOut(::g::Uno::Float2 value)
{
    if (::g::Uno::Float2__op_Equality(_b, value) && ((_has & 8) == 8))
        return;

    _b = value;
    _has = (_has | 8);
    OnPropertyChanged(CurvePoint::NameTangentOut_);
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Curve.uno
// ---------------------------------------------------------------------------------

// public enum CurveStyle
uEnumType* CurveStyle_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.CurveStyle", ::g::Uno::Int_typeof(), 2);
    type->SetLiterals(
        "Straight", 0LL,
        "Smooth", 1LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.DatePicker/DatePicker.Docs.uno
// ------------------------------------------------------------------------------------

// public partial sealed class DatePicker
// {
// static DatePicker()
static void DatePicker__cctor_5_fn(uType* __type)
{
    DatePicker::__selector0_ = ::g::Uno::UX::Selector__op_Implicit(uString::Const("self"));
}

static void DatePicker_build(uType* type)
{
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface18));
    type->SetFields(119,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&DatePicker::__selector0_, uFieldFlagsStatic);
}

::g::Fuse::Controls::Panel_type* DatePicker_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Panel_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::DatePickerBase_typeof();
    options.FieldCount = 120;
    options.InterfaceCount = 19;
    options.ObjectSize = sizeof(DatePicker);
    options.TypeSize = sizeof(::g::Fuse::Controls::Panel_type);
    type = (::g::Fuse::Controls::Panel_type*)uClassType::New("Fuse.Controls.DatePicker", options);
    type->fp_build_ = DatePicker_build;
    type->fp_cctor_ = DatePicker__cctor_5_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

::g::Uno::UX::Selector DatePicker::__selector0_;
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.DatePicker/DatePicker.uno
// -------------------------------------------------------------------------------

// public interfacemodifiers class DatePickerBase
// {
// static generated DatePickerBase()
static void DatePickerBase__cctor_4_fn(uType* __type)
{
    DatePickerBase::_styleName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[13/*"Style"*/]);
    DatePickerBase::_valueName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[14/*"Value"*/]);
    DatePickerBase::_minValueName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[15/*"MinValue"*/]);
    DatePickerBase::_maxValueName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[16/*"MaxValue"*/]);
}

static void DatePickerBase_build(uType* type)
{
    ::STRINGS[13] = uString::Const("Style");
    ::STRINGS[14] = uString::Const("Value");
    ::STRINGS[15] = uString::Const("MinValue");
    ::STRINGS[16] = uString::Const("MaxValue");
    ::TYPES[13] = ::g::Fuse::Controls::IDatePickerView_typeof();
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface18));
    type->SetFields(115,
        ::g::Fuse::Controls::DatePickerStyle_typeof(), offsetof(DatePickerBase, _style), 0,
        ::g::Uno::DateTime_typeof(), offsetof(DatePickerBase, _value), 0,
        ::g::Uno::DateTime_typeof(), offsetof(DatePickerBase, _minValue), 0,
        ::g::Uno::DateTime_typeof(), offsetof(DatePickerBase, _maxValue), 0,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&DatePickerBase::_styleName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&DatePickerBase::_valueName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&DatePickerBase::_minValueName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&DatePickerBase::_maxValueName_, uFieldFlagsStatic);
}

::g::Fuse::Controls::Panel_type* DatePickerBase_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Panel_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::Panel_typeof();
    options.FieldCount = 123;
    options.InterfaceCount = 19;
    options.ObjectSize = sizeof(DatePickerBase);
    options.TypeSize = sizeof(::g::Fuse::Controls::Panel_type);
    type = (::g::Fuse::Controls::Panel_type*)uClassType::New("Fuse.Controls.DatePickerBase", options);
    type->fp_build_ = DatePickerBase_build;
    type->fp_cctor_ = DatePickerBase__cctor_4_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))DatePickerBase__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))DatePickerBase__OnUnrooted_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// private Fuse.Controls.IDatePickerView get_DatePickerView()
void DatePickerBase__get_DatePickerView_fn(DatePickerBase* __this, uObject** __retval)
{
    *__retval = __this->DatePickerView();
}

// public Uno.DateTime get_MaxValue()
void DatePickerBase__get_MaxValue_fn(DatePickerBase* __this, ::g::Uno::DateTime* __retval)
{
    *__retval = __this->MaxValue();
}

// public void set_MaxValue(Uno.DateTime value)
void DatePickerBase__set_MaxValue_fn(DatePickerBase* __this, ::g::Uno::DateTime* value)
{
    __this->MaxValue(*value);
}

// public Uno.DateTime get_MinValue()
void DatePickerBase__get_MinValue_fn(DatePickerBase* __this, ::g::Uno::DateTime* __retval)
{
    *__retval = __this->MinValue();
}

// public void set_MinValue(Uno.DateTime value)
void DatePickerBase__set_MinValue_fn(DatePickerBase* __this, ::g::Uno::DateTime* value)
{
    __this->MinValue(*value);
}

// internal void OnMaxValueChanged(Uno.UX.IPropertyListener origin)
void DatePickerBase__OnMaxValueChanged_fn(DatePickerBase* __this, uObject* origin)
{
    __this->OnMaxValueChanged(origin);
}

// internal void OnMinValueChanged(Uno.UX.IPropertyListener origin)
void DatePickerBase__OnMinValueChanged_fn(DatePickerBase* __this, uObject* origin)
{
    __this->OnMinValueChanged(origin);
}

// internal void OnNativeViewValueChanged(Uno.DateTime newValue)
void DatePickerBase__OnNativeViewValueChanged_fn(DatePickerBase* __this, ::g::Uno::DateTime* newValue)
{
    __this->OnNativeViewValueChanged(*newValue);
}

// protected override sealed void OnRooted()
void DatePickerBase__OnRooted_fn(DatePickerBase* __this)
{
    ::g::Fuse::Controls::Panel__OnRooted_fn(__this);
    uObject* dpv = __this->DatePickerView();

    if (dpv != nullptr)
        ::g::Fuse::Controls::IDatePickerView::OnRooted(uInterface(uPtr(dpv), ::TYPES[13/*Fuse.Controls.IDatePickerView*/]));
}

// internal void OnStyleValueChanged(Uno.UX.IPropertyListener origin)
void DatePickerBase__OnStyleValueChanged_fn(DatePickerBase* __this, uObject* origin)
{
    __this->OnStyleValueChanged(origin);
}

// protected override sealed void OnUnrooted()
void DatePickerBase__OnUnrooted_fn(DatePickerBase* __this)
{
    uObject* dpv = __this->DatePickerView();

    if (dpv != nullptr)
        ::g::Fuse::Controls::IDatePickerView::OnUnrooted(uInterface(uPtr(dpv), ::TYPES[13/*Fuse.Controls.IDatePickerView*/]));

    ::g::Fuse::Controls::Panel__OnUnrooted_fn(__this);
}

// internal void OnValueChanged(Uno.UX.IPropertyListener origin)
void DatePickerBase__OnValueChanged_fn(DatePickerBase* __this, uObject* origin)
{
    __this->OnValueChanged(origin);
}

// public void SetMaxValue(Uno.DateTime value, Uno.UX.IPropertyListener origin)
void DatePickerBase__SetMaxValue_fn(DatePickerBase* __this, ::g::Uno::DateTime* value, uObject* origin)
{
    __this->SetMaxValue(*value, origin);
}

// public void SetMinValue(Uno.DateTime value, Uno.UX.IPropertyListener origin)
void DatePickerBase__SetMinValue_fn(DatePickerBase* __this, ::g::Uno::DateTime* value, uObject* origin)
{
    __this->SetMinValue(*value, origin);
}

// public void SetStyle(Fuse.Controls.DatePickerStyle value, Uno.UX.IPropertyListener origin)
void DatePickerBase__SetStyle_fn(DatePickerBase* __this, int32_t* value, uObject* origin)
{
    __this->SetStyle(*value, origin);
}

// public void SetValue(Uno.DateTime value, Uno.UX.IPropertyListener origin)
void DatePickerBase__SetValue_fn(DatePickerBase* __this, ::g::Uno::DateTime* value, uObject* origin)
{
    __this->SetValue(*value, origin);
}

// public Fuse.Controls.DatePickerStyle get_Style()
void DatePickerBase__get_Style_fn(DatePickerBase* __this, int32_t* __retval)
{
    *__retval = __this->Style();
}

// public void set_Style(Fuse.Controls.DatePickerStyle value)
void DatePickerBase__set_Style_fn(DatePickerBase* __this, int32_t* value)
{
    __this->Style(*value);
}

// private void UpdateValue(Uno.DateTime value, Uno.UX.IPropertyListener origin)
void DatePickerBase__UpdateValue_fn(DatePickerBase* __this, ::g::Uno::DateTime* value, uObject* origin)
{
    __this->UpdateValue(*value, origin);
}

// public Uno.DateTime get_Value()
void DatePickerBase__get_Value_fn(DatePickerBase* __this, ::g::Uno::DateTime* __retval)
{
    *__retval = __this->Value();
}

// public void set_Value(Uno.DateTime value)
void DatePickerBase__set_Value_fn(DatePickerBase* __this, ::g::Uno::DateTime* value)
{
    __this->Value(*value);
}

::g::Uno::UX::Selector DatePickerBase::_styleName_;
::g::Uno::UX::Selector DatePickerBase::_valueName_;
::g::Uno::UX::Selector DatePickerBase::_minValueName_;
::g::Uno::UX::Selector DatePickerBase::_maxValueName_;

// private Fuse.Controls.IDatePickerView get_DatePickerView() [instance]
uObject* DatePickerBase::DatePickerView()
{
    return NativeView();
}

// public Uno.DateTime get_MaxValue() [instance]
::g::Uno::DateTime DatePickerBase::MaxValue()
{
    return _maxValue;
}

// public void set_MaxValue(Uno.DateTime value) [instance]
void DatePickerBase::MaxValue(::g::Uno::DateTime value)
{
    SetMaxValue(value, (uObject*)this);
}

// public Uno.DateTime get_MinValue() [instance]
::g::Uno::DateTime DatePickerBase::MinValue()
{
    return _minValue;
}

// public void set_MinValue(Uno.DateTime value) [instance]
void DatePickerBase::MinValue(::g::Uno::DateTime value)
{
    SetMinValue(value, (uObject*)this);
}

// internal void OnMaxValueChanged(Uno.UX.IPropertyListener origin) [instance]
void DatePickerBase::OnMaxValueChanged(uObject* origin)
{
    OnPropertyChanged1(DatePickerBase::_maxValueName_, origin);
}

// internal void OnMinValueChanged(Uno.UX.IPropertyListener origin) [instance]
void DatePickerBase::OnMinValueChanged(uObject* origin)
{
    OnPropertyChanged1(DatePickerBase::_minValueName_, origin);
}

// internal void OnNativeViewValueChanged(Uno.DateTime newValue) [instance]
void DatePickerBase::OnNativeViewValueChanged(::g::Uno::DateTime newValue)
{
    UpdateValue(newValue, (uObject*)this);
}

// internal void OnStyleValueChanged(Uno.UX.IPropertyListener origin) [instance]
void DatePickerBase::OnStyleValueChanged(uObject* origin)
{
    OnPropertyChanged1(DatePickerBase::_styleName_, origin);
}

// internal void OnValueChanged(Uno.UX.IPropertyListener origin) [instance]
void DatePickerBase::OnValueChanged(uObject* origin)
{
    OnPropertyChanged1(DatePickerBase::_valueName_, origin);
}

// public void SetMaxValue(Uno.DateTime value, Uno.UX.IPropertyListener origin) [instance]
void DatePickerBase::SetMaxValue(::g::Uno::DateTime value, uObject* origin)
{
    if (::g::Uno::DateTime__op_Inequality(value, _maxValue))
    {
        _maxValue = value;
        OnMaxValueChanged(origin);
    }

    uObject* dpv = DatePickerView();

    if (dpv != nullptr)
        ::g::Fuse::Controls::IDatePickerView::MaxValue(uInterface(uPtr(dpv), ::TYPES[13/*Fuse.Controls.IDatePickerView*/]), value);
}

// public void SetMinValue(Uno.DateTime value, Uno.UX.IPropertyListener origin) [instance]
void DatePickerBase::SetMinValue(::g::Uno::DateTime value, uObject* origin)
{
    if (::g::Uno::DateTime__op_Inequality(value, _minValue))
    {
        _minValue = value;
        OnMinValueChanged(origin);
    }

    uObject* dpv = DatePickerView();

    if (dpv != nullptr)
        ::g::Fuse::Controls::IDatePickerView::MinValue(uInterface(uPtr(dpv), ::TYPES[13/*Fuse.Controls.IDatePickerView*/]), value);
}

// public void SetStyle(Fuse.Controls.DatePickerStyle value, Uno.UX.IPropertyListener origin) [instance]
void DatePickerBase::SetStyle(int32_t value, uObject* origin)
{
    if (value != _style)
    {
        _style = value;
        OnStyleValueChanged(origin);
        InvalidateLayout(2);
    }

    uObject* dpv = DatePickerView();

    if (dpv != nullptr)
        ::g::Fuse::Controls::IDatePickerView::Style(uInterface(uPtr(dpv), ::TYPES[13/*Fuse.Controls.IDatePickerView*/]), value);
}

// public void SetValue(Uno.DateTime value, Uno.UX.IPropertyListener origin) [instance]
void DatePickerBase::SetValue(::g::Uno::DateTime value, uObject* origin)
{
    UpdateValue(value, origin);
    uObject* dpv = DatePickerView();

    if (dpv != nullptr)
        ::g::Fuse::Controls::IDatePickerView::Value(uInterface(uPtr(dpv), ::TYPES[13/*Fuse.Controls.IDatePickerView*/]), value);
}

// public Fuse.Controls.DatePickerStyle get_Style() [instance]
int32_t DatePickerBase::Style()
{
    return _style;
}

// public void set_Style(Fuse.Controls.DatePickerStyle value) [instance]
void DatePickerBase::Style(int32_t value)
{
    SetStyle(value, (uObject*)this);
}

// private void UpdateValue(Uno.DateTime value, Uno.UX.IPropertyListener origin) [instance]
void DatePickerBase::UpdateValue(::g::Uno::DateTime value, uObject* origin)
{
    if (::g::Uno::DateTime__op_Inequality(value, _value))
    {
        _value = value;
        OnValueChanged(origin);
    }
}

// public Uno.DateTime get_Value() [instance]
::g::Uno::DateTime DatePickerBase::Value()
{
    return _value;
}

// public void set_Value(Uno.DateTime value) [instance]
void DatePickerBase::Value(::g::Uno::DateTime value)
{
    SetValue(value, (uObject*)this);
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.DatePicker/DatePicker.uno
// -------------------------------------------------------------------------------

// public enum DatePickerStyle
uEnumType* DatePickerStyle_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.DatePickerStyle", ::g::Uno::Int_typeof(), 4);
    type->SetLiterals(
        "Default", 0LL,
        "Compact", 1LL,
        "Inline", 2LL,
        "Wheels", 3LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/GraphicsView.ux.uno
// --------------------------------------------------------------------------------

// internal sealed class DefaultTreeRenderer
// {
// static generated DefaultTreeRenderer()
static void DefaultTreeRenderer__cctor__fn(uType* __type)
{
    DefaultTreeRenderer::Instance_ = DefaultTreeRenderer::New1();
}

static void DefaultTreeRenderer_build(uType* type)
{
    ::STRINGS[17] = uString::Const("GraphicsAppearance");
    ::TYPES[4] = ::g::Fuse::Visual_typeof();
    ::TYPES[14] = ::g::Fuse::Controls::Control_typeof();
    ::TYPES[6] = ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr);
    type->SetInterfaces(
        ::g::Fuse::Elements::ITreeRenderer_typeof(), offsetof(DefaultTreeRenderer_type, interface0));
    type->SetFields(0,
        type, (uintptr_t)&DefaultTreeRenderer::Instance_, uFieldFlagsStatic);
}

DefaultTreeRenderer_type* DefaultTreeRenderer_typeof()
{
    static uSStrong<DefaultTreeRenderer_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.FieldCount = 1;
    options.InterfaceCount = 1;
    options.ObjectSize = sizeof(DefaultTreeRenderer);
    options.TypeSize = sizeof(DefaultTreeRenderer_type);
    type = (DefaultTreeRenderer_type*)uClassType::New("Fuse.Controls.DefaultTreeRenderer", options);
    type->fp_build_ = DefaultTreeRenderer_build;
    type->fp_ctor_ = (void*)DefaultTreeRenderer__New1_fn;
    type->fp_cctor_ = DefaultTreeRenderer__cctor__fn;
    type->interface0.fp_RootingStarted = (void(*)(uObject*, ::g::Fuse::Elements::Element*))DefaultTreeRenderer__RootingStarted_fn;
    type->interface0.fp_Rooted = (void(*)(uObject*, ::g::Fuse::Elements::Element*))DefaultTreeRenderer__Rooted_fn;
    type->interface0.fp_Unrooted = (void(*)(uObject*, ::g::Fuse::Elements::Element*))DefaultTreeRenderer__Unrooted_fn;
    type->interface0.fp_BackgroundChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, ::g::Fuse::Drawing::Brush*))DefaultTreeRenderer__BackgroundChanged_fn;
    type->interface0.fp_TransformChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*))DefaultTreeRenderer__TransformChanged_fn;
    type->interface0.fp_Placed = (void(*)(uObject*, ::g::Fuse::Elements::Element*))DefaultTreeRenderer__Placed_fn;
    type->interface0.fp_IsVisibleChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, bool*))DefaultTreeRenderer__IsVisibleChanged_fn;
    type->interface0.fp_IsEnabledChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, bool*))DefaultTreeRenderer__IsEnabledChanged_fn;
    type->interface0.fp_OpacityChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, float*))DefaultTreeRenderer__OpacityChanged_fn;
    type->interface0.fp_ClipToBoundsChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, bool*))DefaultTreeRenderer__ClipToBoundsChanged_fn;
    type->interface0.fp_ZOrderChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, uArray*))DefaultTreeRenderer__ZOrderChanged_fn;
    type->interface0.fp_HitTestModeChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, bool*))DefaultTreeRenderer__HitTestModeChanged_fn;
    type->interface0.fp_RenderBoundsChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*))DefaultTreeRenderer__RenderBoundsChanged_fn;
    type->interface0.fp_Measure = (void(*)(uObject*, ::g::Fuse::Elements::Element*, ::g::Fuse::LayoutParams*, ::g::Uno::Float2*, bool*))DefaultTreeRenderer__Measure_fn;
    return type;
}

// public generated DefaultTreeRenderer()
void DefaultTreeRenderer__ctor__fn(DefaultTreeRenderer* __this)
{
    __this->ctor_();
}

// public void BackgroundChanged(Fuse.Elements.Element e, Fuse.Drawing.Brush background)
void DefaultTreeRenderer__BackgroundChanged_fn(DefaultTreeRenderer* __this, ::g::Fuse::Elements::Element* e, ::g::Fuse::Drawing::Brush* background)
{
    __this->BackgroundChanged(e, background);
}

// public void ClipToBoundsChanged(Fuse.Elements.Element e, bool clipToBounds)
void DefaultTreeRenderer__ClipToBoundsChanged_fn(DefaultTreeRenderer* __this, ::g::Fuse::Elements::Element* e, bool* clipToBounds)
{
    __this->ClipToBoundsChanged(e, *clipToBounds);
}

// public void HitTestModeChanged(Fuse.Elements.Element e, bool enabled)
void DefaultTreeRenderer__HitTestModeChanged_fn(DefaultTreeRenderer* __this, ::g::Fuse::Elements::Element* e, bool* enabled)
{
    __this->HitTestModeChanged(e, *enabled);
}

// private Fuse.Visual InstantiateGraphicsAppearance(Fuse.Elements.Element e)
void DefaultTreeRenderer__InstantiateGraphicsAppearance_fn(DefaultTreeRenderer* __this, ::g::Fuse::Elements::Element* e, ::g::Fuse::Visual** __retval)
{
    *__retval = __this->InstantiateGraphicsAppearance(e);
}

// public void IsEnabledChanged(Fuse.Elements.Element e, bool isEnabled)
void DefaultTreeRenderer__IsEnabledChanged_fn(DefaultTreeRenderer* __this, ::g::Fuse::Elements::Element* e, bool* isEnabled)
{
    __this->IsEnabledChanged(e, *isEnabled);
}

// public void IsVisibleChanged(Fuse.Elements.Element e, bool isVisible)
void DefaultTreeRenderer__IsVisibleChanged_fn(DefaultTreeRenderer* __this, ::g::Fuse::Elements::Element* e, bool* isVisible)
{
    __this->IsVisibleChanged(e, *isVisible);
}

// public bool Measure(Fuse.Elements.Element e, Fuse.LayoutParams lp, float2& size)
void DefaultTreeRenderer__Measure_fn(DefaultTreeRenderer* __this, ::g::Fuse::Elements::Element* e, ::g::Fuse::LayoutParams* lp, ::g::Uno::Float2* size, bool* __retval)
{
    *__retval = __this->Measure(e, *lp, size);
}

// public generated DefaultTreeRenderer New()
void DefaultTreeRenderer__New1_fn(DefaultTreeRenderer** __retval)
{
    *__retval = DefaultTreeRenderer::New1();
}

// public void OpacityChanged(Fuse.Elements.Element e, float opacity)
void DefaultTreeRenderer__OpacityChanged_fn(DefaultTreeRenderer* __this, ::g::Fuse::Elements::Element* e, float* opacity)
{
    __this->OpacityChanged(e, *opacity);
}

// public void Placed(Fuse.Elements.Element e)
void DefaultTreeRenderer__Placed_fn(DefaultTreeRenderer* __this, ::g::Fuse::Elements::Element* e)
{
    __this->Placed(e);
}

// public void RenderBoundsChanged(Fuse.Elements.Element e)
void DefaultTreeRenderer__RenderBoundsChanged_fn(DefaultTreeRenderer* __this, ::g::Fuse::Elements::Element* e)
{
    __this->RenderBoundsChanged(e);
}

// public void Rooted(Fuse.Elements.Element e)
void DefaultTreeRenderer__Rooted_fn(DefaultTreeRenderer* __this, ::g::Fuse::Elements::Element* e)
{
    __this->Rooted(e);
}

// public void RootingStarted(Fuse.Elements.Element e)
void DefaultTreeRenderer__RootingStarted_fn(DefaultTreeRenderer* __this, ::g::Fuse::Elements::Element* e)
{
    __this->RootingStarted(e);
}

// public void TransformChanged(Fuse.Elements.Element e)
void DefaultTreeRenderer__TransformChanged_fn(DefaultTreeRenderer* __this, ::g::Fuse::Elements::Element* e)
{
    __this->TransformChanged(e);
}

// public void Unrooted(Fuse.Elements.Element e)
void DefaultTreeRenderer__Unrooted_fn(DefaultTreeRenderer* __this, ::g::Fuse::Elements::Element* e)
{
    __this->Unrooted(e);
}

// public void ZOrderChanged(Fuse.Elements.Element e, Fuse.Visual[] zorder)
void DefaultTreeRenderer__ZOrderChanged_fn(DefaultTreeRenderer* __this, ::g::Fuse::Elements::Element* e, uArray* zorder)
{
    __this->ZOrderChanged(e, zorder);
}

uSStrong<DefaultTreeRenderer*> DefaultTreeRenderer::Instance_;

// public generated DefaultTreeRenderer() [instance]
void DefaultTreeRenderer::ctor_()
{
}

// public void BackgroundChanged(Fuse.Elements.Element e, Fuse.Drawing.Brush background) [instance]
void DefaultTreeRenderer::BackgroundChanged(::g::Fuse::Elements::Element* e, ::g::Fuse::Drawing::Brush* background)
{
}

// public void ClipToBoundsChanged(Fuse.Elements.Element e, bool clipToBounds) [instance]
void DefaultTreeRenderer::ClipToBoundsChanged(::g::Fuse::Elements::Element* e, bool clipToBounds)
{
}

// public void HitTestModeChanged(Fuse.Elements.Element e, bool enabled) [instance]
void DefaultTreeRenderer::HitTestModeChanged(::g::Fuse::Elements::Element* e, bool enabled)
{
}

// private Fuse.Visual InstantiateGraphicsAppearance(Fuse.Elements.Element e) [instance]
::g::Fuse::Visual* DefaultTreeRenderer::InstantiateGraphicsAppearance(::g::Fuse::Elements::Element* e)
{
    ::g::Uno::UX::Template* t = uPtr(e)->FindTemplate(::STRINGS[17/*"GraphicsApp...*/]);
    return (t != nullptr) ? uAs< ::g::Fuse::Visual*>(uPtr(t)->New1(), ::TYPES[4/*Fuse.Visual*/]) : nullptr;
}

// public void IsEnabledChanged(Fuse.Elements.Element e, bool isEnabled) [instance]
void DefaultTreeRenderer::IsEnabledChanged(::g::Fuse::Elements::Element* e, bool isEnabled)
{
}

// public void IsVisibleChanged(Fuse.Elements.Element e, bool isVisible) [instance]
void DefaultTreeRenderer::IsVisibleChanged(::g::Fuse::Elements::Element* e, bool isVisible)
{
}

// public bool Measure(Fuse.Elements.Element e, Fuse.LayoutParams lp, float2& size) [instance]
bool DefaultTreeRenderer::Measure(::g::Fuse::Elements::Element* e, ::g::Fuse::LayoutParams lp, ::g::Uno::Float2* size)
{
    *size = ::g::Uno::Float2__New1(0.0f);
    return false;
}

// public void OpacityChanged(Fuse.Elements.Element e, float opacity) [instance]
void DefaultTreeRenderer::OpacityChanged(::g::Fuse::Elements::Element* e, float opacity)
{
}

// public void Placed(Fuse.Elements.Element e) [instance]
void DefaultTreeRenderer::Placed(::g::Fuse::Elements::Element* e)
{
}

// public void RenderBoundsChanged(Fuse.Elements.Element e) [instance]
void DefaultTreeRenderer::RenderBoundsChanged(::g::Fuse::Elements::Element* e)
{
}

// public void Rooted(Fuse.Elements.Element e) [instance]
void DefaultTreeRenderer::Rooted(::g::Fuse::Elements::Element* e)
{
    if (uIs(e, ::TYPES[14/*Fuse.Controls.Control*/]))
    {
        ::g::Fuse::Visual* visual = InstantiateGraphicsAppearance(e);

        if (visual != nullptr)
        {
            ::g::Fuse::Controls::Control* c = uCast< ::g::Fuse::Controls::Control*>(e, ::TYPES[14/*Fuse.Controls.Control*/]);
            uPtr(c)->GraphicsVisual(visual);
            ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(c->Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), visual);
        }
    }
}

// public void RootingStarted(Fuse.Elements.Element e) [instance]
void DefaultTreeRenderer::RootingStarted(::g::Fuse::Elements::Element* e)
{
}

// public void TransformChanged(Fuse.Elements.Element e) [instance]
void DefaultTreeRenderer::TransformChanged(::g::Fuse::Elements::Element* e)
{
}

// public void Unrooted(Fuse.Elements.Element e) [instance]
void DefaultTreeRenderer::Unrooted(::g::Fuse::Elements::Element* e)
{
    bool ret2;

    if (uIs(e, ::TYPES[14/*Fuse.Controls.Control*/]))
    {
        ::g::Fuse::Controls::Control* c = uCast< ::g::Fuse::Controls::Control*>(e, ::TYPES[14/*Fuse.Controls.Control*/]);
        ::g::Fuse::Visual* visual = uPtr(c)->GraphicsVisual();

        if (visual != nullptr)
        {
            ::g::Uno::Collections::ICollection::Remove_ex(uInterface(uPtr(uPtr(c)->Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), visual, &ret2);
            c->GraphicsVisual(nullptr);
        }
    }
}

// public void ZOrderChanged(Fuse.Elements.Element e, Fuse.Visual[] zorder) [instance]
void DefaultTreeRenderer::ZOrderChanged(::g::Fuse::Elements::Element* e, uArray* zorder)
{
}

// public generated DefaultTreeRenderer New() [static]
DefaultTreeRenderer* DefaultTreeRenderer::New1()
{
    DefaultTreeRenderer* obj1 = (DefaultTreeRenderer*)uNew(DefaultTreeRenderer_typeof());
    obj1->ctor_();
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.ScrollView/.uno/ux15/Fuse.Controls.ScrollView.g.uno
// ---------------------------------------------------------------------------------------------------------

// public partial sealed class ScrollView.DefaultTrigger
// {
// static DefaultTrigger()
static void ScrollView__DefaultTrigger__cctor_2_fn(uType* __type)
{
    ScrollView__DefaultTrigger::__selector0_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[14/*"Value"*/]);
}

static void ScrollView__DefaultTrigger_build(uType* type)
{
    ::STRINGS[14] = uString::Const("Value");
    ::STRINGS[18] = uString::Const("ScrollView.ux");
    ::TYPES[6] = ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr);
    ::TYPES[15] = ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr);
    type->SetDependencies(
        ::g::FuseControlsScrollView_accessor_Fuse_Controls_ScrollViewBase_KeepFocusInView_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Triggers::WhileBool_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Triggers::WhileBool_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Triggers::WhileBool_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Triggers::WhileBool_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Triggers::WhileBool_type, interface4),
        ::TYPES[15/*Uno.Collections.ICollection<Fuse.Binding>*/], offsetof(::g::Fuse::Triggers::WhileBool_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Triggers::WhileBool_type, interface6),
        ::g::Fuse::Animations::IUnwrappedPlayerFeedback_typeof(), offsetof(::g::Fuse::Triggers::WhileBool_type, interface7),
        ::g::Fuse::Animations::IBasePlayerFeedback_typeof(), offsetof(::g::Fuse::Triggers::WhileBool_type, interface8),
        ::g::Fuse::Triggers::IPulseTrigger_typeof(), offsetof(::g::Fuse::Triggers::WhileBool_type, interface9),
        ::g::Fuse::Triggers::Actions::IToggleable_typeof(), offsetof(::g::Fuse::Triggers::WhileBool_type, interface10));
    type->SetFields(44,
        ::g::Uno::UX::Property1_typeof()->MakeType(::g::Uno::Bool_typeof(), nullptr), offsetof(ScrollView__DefaultTrigger, this_Value_inst), 0,
        ::g::Fuse::Controls::ScrollView_typeof(), offsetof(ScrollView__DefaultTrigger, __parent1), uFieldFlagsWeak,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&ScrollView__DefaultTrigger::__selector0_, uFieldFlagsStatic);
}

::g::Fuse::Triggers::WhileBool_type* ScrollView__DefaultTrigger_typeof()
{
    static uSStrong< ::g::Fuse::Triggers::WhileBool_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Triggers::WhileTrue_typeof();
    options.FieldCount = 47;
    options.InterfaceCount = 11;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(ScrollView__DefaultTrigger);
    options.TypeSize = sizeof(::g::Fuse::Triggers::WhileBool_type);
    type = (::g::Fuse::Triggers::WhileBool_type*)uClassType::New("Fuse.Controls.ScrollView.DefaultTrigger", options);
    type->fp_build_ = ScrollView__DefaultTrigger_build;
    type->fp_cctor_ = ScrollView__DefaultTrigger__cctor_2_fn;
    type->interface10.fp_Toggle = (void(*)(uObject*))::g::Fuse::Triggers::WhileBool__Toggle_fn;
    type->interface9.fp_Pulse = (void(*)(uObject*))::g::Fuse::Triggers::WhileValue__Pulse1_fn;
    type->interface8.fp_OnPlaybackDone = (void(*)(uObject*, uObject*))::g::Fuse::Triggers::Trigger__FuseAnimationsIBasePlayerFeedbackOnPlaybackDone_fn;
    type->interface8.fp_OnStable = (void(*)(uObject*, uObject*))::g::Fuse::Triggers::Trigger__FuseAnimationsIBasePlayerFeedbackOnStable_fn;
    type->interface7.fp_OnProgressUpdated = (void(*)(uObject*, uObject*, double*, double*, int32_t*))::g::Fuse::Triggers::Trigger__FuseAnimationsIUnwrappedPlayerFeedbackOnProgressUpdated_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public DefaultTrigger(Fuse.Controls.ScrollView parent)
void ScrollView__DefaultTrigger__ctor_9_fn(ScrollView__DefaultTrigger* __this, ::g::Fuse::Controls::ScrollView* parent)
{
    __this->ctor_9(parent);
}

// private void InitializeUX()
void ScrollView__DefaultTrigger__InitializeUX_fn(ScrollView__DefaultTrigger* __this)
{
    __this->InitializeUX();
}

// public DefaultTrigger New(Fuse.Controls.ScrollView parent)
void ScrollView__DefaultTrigger__New3_fn(::g::Fuse::Controls::ScrollView* parent, ScrollView__DefaultTrigger** __retval)
{
    *__retval = ScrollView__DefaultTrigger::New3(parent);
}

::g::Uno::UX::Selector ScrollView__DefaultTrigger::__selector0_;

// public DefaultTrigger(Fuse.Controls.ScrollView parent) [instance]
void ScrollView__DefaultTrigger::ctor_9(::g::Fuse::Controls::ScrollView* parent)
{
    ctor_8();
    __parent1 = parent;
    InitializeUX();
}

// private void InitializeUX() [instance]
void ScrollView__DefaultTrigger::InitializeUX()
{
    ::g::Fuse::Reactive::Constant* temp = ::g::Fuse::Reactive::Constant::New1(__parent1);
    this_Value_inst = ::g::FuseControlsScrollView_FuseTriggersWhileBool_Value_Property::New1(this, ScrollView__DefaultTrigger::__selector0_);
    ::g::Fuse::Reactive::Property* temp1 = ::g::Fuse::Reactive::Property::New1(temp, ::g::FuseControlsScrollView_accessor_Fuse_Controls_ScrollViewBase_KeepFocusInView::Singleton());
    ::g::Fuse::Gestures::KeepFocusInView* temp2 = ::g::Fuse::Gestures::KeepFocusInView::New3();
    ::g::Fuse::Reactive::DataBinding* temp3 = ::g::Fuse::Reactive::DataBinding::New1(this_Value_inst, (uObject*)temp1, 3);
    SourceLineNumber(2);
    SourceFileName(::STRINGS[18/*"ScrollView.ux"*/]);
    temp2->SourceLineNumber(3);
    temp2->SourceFileName(::STRINGS[18/*"ScrollView.ux"*/]);
    temp1->SourceLineNumber(2);
    temp1->SourceFileName(::STRINGS[18/*"ScrollView.ux"*/]);
    temp->SourceLineNumber(2);
    temp->SourceFileName(::STRINGS[18/*"ScrollView.ux"*/]);
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(Nodes()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), temp2);
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(Bindings()), ::TYPES[15/*Uno.Collections.ICollection<Fuse.Binding>*/]), temp3);
}

// public DefaultTrigger New(Fuse.Controls.ScrollView parent) [static]
ScrollView__DefaultTrigger* ScrollView__DefaultTrigger::New3(::g::Fuse::Controls::ScrollView* parent)
{
    ScrollView__DefaultTrigger* obj1 = (ScrollView__DefaultTrigger*)uNew(ScrollView__DefaultTrigger_typeof());
    obj1->ctor_9(parent);
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/Navigator.uno
// ------------------------------------------------------------------------------

// private sealed class Navigator.DeferSwitch
// {
static void Navigator__DeferSwitch_build(uType* type)
{
    type->SetFields(0,
        ::g::Fuse::Controls::Navigator__NavPage_typeof(), offsetof(Navigator__DeferSwitch, Page), 0,
        ::g::Fuse::Navigation::NavigationGotoMode_typeof(), offsetof(Navigator__DeferSwitch, GotoMode), 0,
        ::g::Fuse::Navigation::RoutingOperation_typeof(), offsetof(Navigator__DeferSwitch, Operation), 0);
}

uType* Navigator__DeferSwitch_typeof()
{
    static uSStrong<uType*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.FieldCount = 3;
    options.ObjectSize = sizeof(Navigator__DeferSwitch);
    options.TypeSize = sizeof(uType);
    type = uClassType::New("Fuse.Controls.Navigator.DeferSwitch", options);
    type->fp_build_ = Navigator__DeferSwitch_build;
    type->fp_ctor_ = (void*)Navigator__DeferSwitch__New1_fn;
    return type;
}

// public generated DeferSwitch()
void Navigator__DeferSwitch__ctor__fn(Navigator__DeferSwitch* __this)
{
    __this->ctor_();
}

// public generated DeferSwitch New()
void Navigator__DeferSwitch__New1_fn(Navigator__DeferSwitch** __retval)
{
    *__retval = Navigator__DeferSwitch::New1();
}

// public generated DeferSwitch() [instance]
void Navigator__DeferSwitch::ctor_()
{
}

// public generated DeferSwitch New() [static]
Navigator__DeferSwitch* Navigator__DeferSwitch::New1()
{
    Navigator__DeferSwitch* obj1 = (Navigator__DeferSwitch*)uNew(Navigator__DeferSwitch_typeof());
    obj1->ctor_();
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/NativeViewHost.uno
// -------------------------------------------------------------------------------

// private sealed class NativeViewHost.Disable
// {
static void NativeViewHost__Disable_build(uType* type)
{
    ::TYPES[16] = ::g::Uno::Action_typeof();
    type->SetDependencies(
        ::g::Fuse::UpdateManager_typeof());
    type->SetInterfaces(
        ::g::Uno::IDisposable_typeof(), offsetof(NativeViewHost__Disable_type, interface0));
    type->SetFields(0,
        ::g::Fuse::Controls::NativeViewHost_typeof(), offsetof(NativeViewHost__Disable, _host), 0,
        ::g::Uno::Bool_typeof(), offsetof(NativeViewHost__Disable, _canceled), 0);
}

NativeViewHost__Disable_type* NativeViewHost__Disable_typeof()
{
    static uSStrong<NativeViewHost__Disable_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.FieldCount = 2;
    options.InterfaceCount = 1;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(NativeViewHost__Disable);
    options.TypeSize = sizeof(NativeViewHost__Disable_type);
    type = (NativeViewHost__Disable_type*)uClassType::New("Fuse.Controls.NativeViewHost.Disable", options);
    type->fp_build_ = NativeViewHost__Disable_build;
    type->interface0.fp_Dispose = (void(*)(uObject*))NativeViewHost__Disable__UnoIDisposableDispose_fn;
    return type;
}

// public Disable(Fuse.Controls.NativeViewHost host)
void NativeViewHost__Disable__ctor__fn(NativeViewHost__Disable* __this, ::g::Fuse::Controls::NativeViewHost* host)
{
    __this->ctor_(host);
}

// public Disable New(Fuse.Controls.NativeViewHost host)
void NativeViewHost__Disable__New1_fn(::g::Fuse::Controls::NativeViewHost* host, NativeViewHost__Disable** __retval)
{
    *__retval = NativeViewHost__Disable::New1(host);
}

// private void NextFrame()
void NativeViewHost__Disable__NextFrame_fn(NativeViewHost__Disable* __this)
{
    __this->NextFrame();
}

// private void Uno.IDisposable.Dispose()
void NativeViewHost__Disable__UnoIDisposableDispose_fn(NativeViewHost__Disable* __this)
{
    __this->_canceled = true;
}

// public Disable(Fuse.Controls.NativeViewHost host) [instance]
void NativeViewHost__Disable::ctor_(::g::Fuse::Controls::NativeViewHost* host)
{
    _host = host;
    uPtr(_host)->DisableOffscreen();
    ::g::Fuse::UpdateManager::PerformNextFrame(uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)NativeViewHost__Disable__NextFrame_fn, this), 0, 1);
    uPtr(_host)->PostUpdateTransform();
}

// private void NextFrame() [instance]
void NativeViewHost__Disable::NextFrame()
{
    if (_canceled)
        return;

    uPtr(_host)->_draw = false;
    uPtr(_host)->_toggeling = nullptr;
    uPtr(_host)->InvalidateVisual();
    _host = nullptr;
}

// public Disable New(Fuse.Controls.NativeViewHost host) [static]
NativeViewHost__Disable* NativeViewHost__Disable::New1(::g::Fuse::Controls::NativeViewHost* host)
{
    NativeViewHost__Disable* obj1 = (NativeViewHost__Disable*)uNew(NativeViewHost__Disable_typeof());
    obj1->ctor_(host);
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/DockPanel.uno
// --------------------------------------------------------------------------

// public sealed class DockPanel
// {
static void DockPanel_build(uType* type)
{
    type->SetDependencies(
        ::g::Fuse::Layouts::DockLayout_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface18));
    type->SetFields(115,
        ::g::Fuse::Layouts::DockLayout_typeof(), offsetof(DockPanel, _dockLayout), 0);
}

::g::Fuse::Controls::Panel_type* DockPanel_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Panel_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::Panel_typeof();
    options.FieldCount = 116;
    options.InterfaceCount = 19;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(DockPanel);
    options.TypeSize = sizeof(::g::Fuse::Controls::Panel_type);
    type = (::g::Fuse::Controls::Panel_type*)uClassType::New("Fuse.Controls.DockPanel", options);
    type->fp_build_ = DockPanel_build;
    type->fp_ctor_ = (void*)DockPanel__New4_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public DockPanel()
void DockPanel__ctor_7_fn(DockPanel* __this)
{
    __this->ctor_7();
}

// public DockPanel New()
void DockPanel__New4_fn(DockPanel** __retval)
{
    *__retval = DockPanel::New4();
}

// public static void SetDock(Fuse.Elements.Element elm, Fuse.Layouts.Dock dock)
void DockPanel__SetDock_fn(::g::Fuse::Elements::Element* elm, int32_t* dock)
{
    DockPanel::SetDock(elm, *dock);
}

// public DockPanel() [instance]
void DockPanel::ctor_7()
{
    ctor_6();
    Layout(_dockLayout = ::g::Fuse::Layouts::DockLayout::New2());
}

// public DockPanel New() [static]
DockPanel* DockPanel::New4()
{
    DockPanel* obj1 = (DockPanel*)uNew(DockPanel_typeof());
    obj1->ctor_7();
    return obj1;
}

// public static void SetDock(Fuse.Elements.Element elm, Fuse.Layouts.Dock dock) [static]
void DockPanel::SetDock(::g::Fuse::Elements::Element* elm, int32_t dock)
{
    ::g::Fuse::Layouts::DockLayout::SetDock(elm, dock);
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.WebView/DownloadEventArgs.uno
// -----------------------------------------------------------------------------------

// public sealed class DownloadEventArgs
// {
static void DownloadEventArgs_build(uType* type)
{
    ::STRINGS[19] = uString::Const("url");
    ::STRINGS[20] = uString::Const("path");
    ::TYPES[17] = ::g::Fuse::Scripting::IEventSerializer_typeof();
    type->SetInterfaces(
        ::g::Fuse::Scripting::IScriptEvent_typeof(), offsetof(DownloadEventArgs_type, interface0));
    type->SetFields(0,
        ::g::Uno::String_typeof(), offsetof(DownloadEventArgs, Url), 0,
        ::g::Uno::String_typeof(), offsetof(DownloadEventArgs, Path), 0);
}

DownloadEventArgs_type* DownloadEventArgs_typeof()
{
    static uSStrong<DownloadEventArgs_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Uno::EventArgs_typeof();
    options.FieldCount = 2;
    options.InterfaceCount = 1;
    options.ObjectSize = sizeof(DownloadEventArgs);
    options.TypeSize = sizeof(DownloadEventArgs_type);
    type = (DownloadEventArgs_type*)uClassType::New("Fuse.Controls.DownloadEventArgs", options);
    type->fp_build_ = DownloadEventArgs_build;
    type->interface0.fp_Serialize = (void(*)(uObject*, uObject*))DownloadEventArgs__FuseScriptingIScriptEventSerialize_fn;
    return type;
}

// public DownloadEventArgs(string url, string path)
void DownloadEventArgs__ctor_1_fn(DownloadEventArgs* __this, uString* url, uString* path)
{
    __this->ctor_1(url, path);
}

// private void Fuse.Scripting.IScriptEvent.Serialize(Fuse.Scripting.IEventSerializer s)
void DownloadEventArgs__FuseScriptingIScriptEventSerialize_fn(DownloadEventArgs* __this, uObject* s)
{
    ::g::Fuse::Scripting::IEventSerializer::AddString(uInterface(uPtr(s), ::TYPES[17/*Fuse.Scripting.IEventSerializer*/]), ::STRINGS[19/*"url"*/], __this->Url);
    ::g::Fuse::Scripting::IEventSerializer::AddString(uInterface(s, ::TYPES[17/*Fuse.Scripting.IEventSerializer*/]), ::STRINGS[20/*"path"*/], __this->Path);
}

// public DownloadEventArgs New(string url, string path)
void DownloadEventArgs__New2_fn(uString* url, uString* path, DownloadEventArgs** __retval)
{
    *__retval = DownloadEventArgs::New2(url, path);
}

// public DownloadEventArgs(string url, string path) [instance]
void DownloadEventArgs::ctor_1(uString* url, uString* path)
{
    ctor_();
    Url = url;
    Path = path;
}

// public DownloadEventArgs New(string url, string path) [static]
DownloadEventArgs* DownloadEventArgs::New2(uString* url, uString* path)
{
    DownloadEventArgs* obj1 = (DownloadEventArgs*)uNew(DownloadEventArgs_typeof());
    obj1->ctor_1(url, path);
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/EdgeNavigator.ScriptClass.uno
// ----------------------------------------------------------------------------------------------

// public partial sealed class EdgeNavigator
// {
// static EdgeNavigator()
static void EdgeNavigator__cctor_5_fn(uType* __type)
{
    ::g::Fuse::Properties_typeof()->Init();
    ::g::Fuse::Scripting::ScriptClass_typeof()->Init();
    EdgeNavigator::_controlPageDataProperty_ = ::g::Fuse::Properties::CreateHandle();
    ::g::Fuse::Scripting::ScriptClass::Register(__type, uArray::Init< ::g::Fuse::Scripting::ScriptMember*>(::TYPES[19/*Fuse.Scripting.ScriptMember[]*/], 2, (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New2(::TYPES[20/*Fuse.Scripting.ScriptMethod<Fuse.Controls.EdgeNavigator>*/], ::STRINGS[21/*"dismiss"*/], uDelegate::New(::TYPES[21/*Uno.Action<Fuse.Controls.EdgeNavigator>*/], (void*)EdgeNavigator__dismiss_fn)), (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New1(::TYPES[20/*Fuse.Scripting.ScriptMethod<Fuse.Controls.EdgeNavigator>*/], ::STRINGS[22/*"open"*/], uDelegate::New(::TYPES[22/*Uno.Action<Fuse.Controls.EdgeNavigator, object[]>*/], (void*)EdgeNavigator__open_fn))));
}

static void EdgeNavigator_build(uType* type)
{
    ::STRINGS[21] = uString::Const("dismiss");
    ::STRINGS[22] = uString::Const("open");
    ::STRINGS[5] = uString::Const("");
    ::STRINGS[23] = uString::Const("EdgeNaviagator.open requires 1 parameter (edge)");
    ::STRINGS[24] = uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/EdgeNavigator.ScriptClass.uno");
    ::TYPES[18] = ::g::Uno::Type_typeof();
    ::TYPES[19] = ::g::Fuse::Scripting::ScriptMember_typeof()->Array();
    ::TYPES[20] = ::g::Fuse::Scripting::ScriptMethod1_typeof()->MakeType(type, nullptr);
    ::TYPES[21] = ::g::Uno::Action1_typeof()->MakeType(type, nullptr);
    ::TYPES[22] = ::g::Uno::Action2_typeof()->MakeType(type, uObject_typeof()->Array(), nullptr);
    ::TYPES[2] = ::g::Fuse::Visual_typeof()->MakeMethod(2/*FirstChild<Fuse.Visual>*/, ::g::Fuse::Visual_typeof(), nullptr);
    ::TYPES[3] = ::g::Fuse::Node_typeof()->MakeMethod(3/*NextSibling<Fuse.Visual>*/, ::g::Fuse::Visual_typeof(), nullptr);
    ::TYPES[23] = ::g::Fuse::Marshal_typeof()->MakeMethod(0/*ToType<Fuse.Navigation.NavigationEdge>*/, ::g::Fuse::Navigation::NavigationEdge_typeof(), nullptr);
    ::TYPES[24] = ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Animations::Animator_typeof(), nullptr);
    type->SetDependencies(
        ::g::Fuse::Navigation::EdgeNavigation_typeof(),
        ::g::Fuse::Navigation::PageData_typeof(),
        ::g::Fuse::TranslationModes_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(EdgeNavigator_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(EdgeNavigator_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(EdgeNavigator_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(EdgeNavigator_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(EdgeNavigator_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(EdgeNavigator_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(EdgeNavigator_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(EdgeNavigator_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(EdgeNavigator_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(EdgeNavigator_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(EdgeNavigator_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(EdgeNavigator_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(EdgeNavigator_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(EdgeNavigator_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(EdgeNavigator_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(EdgeNavigator_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(EdgeNavigator_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(EdgeNavigator_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(EdgeNavigator_type, interface18),
        ::g::Fuse::Navigation::INavigation_typeof(), offsetof(EdgeNavigator_type, interface19),
        ::g::Fuse::Reactive::IObserver_typeof(), offsetof(EdgeNavigator_type, interface20),
        ::g::Fuse::Node__ISubtreeDataProvider_typeof(), offsetof(EdgeNavigator_type, interface21),
        ::g::Fuse::Navigation::IBaseNavigation_typeof(), offsetof(EdgeNavigator_type, interface22),
        ::g::Fuse::Navigation::IRouterOutlet_typeof(), offsetof(EdgeNavigator_type, interface23));
    type->SetFields(124,
        ::g::Fuse::Navigation::EdgeNavigation_typeof(), offsetof(EdgeNavigator, _edgeNavigation), 0,
        ::g::Fuse::Controls::CommonNavigationPages_typeof(), offsetof(EdgeNavigator, _pages), 0,
        ::g::Fuse::PropertyHandle_typeof(), (uintptr_t)&EdgeNavigator::_controlPageDataProperty_, uFieldFlagsStatic);
}

EdgeNavigator_type* EdgeNavigator_typeof()
{
    static uSStrong<EdgeNavigator_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::NavigationControl_typeof();
    options.FieldCount = 127;
    options.InterfaceCount = 24;
    options.DependencyCount = 3;
    options.ObjectSize = sizeof(EdgeNavigator);
    options.TypeSize = sizeof(EdgeNavigator_type);
    type = (EdgeNavigator_type*)uClassType::New("Fuse.Controls.EdgeNavigator", options);
    type->fp_build_ = EdgeNavigator_build;
    type->fp_cctor_ = EdgeNavigator__cctor_5_fn;
    type->fp_CreateTriggers = (void(*)(::g::Fuse::Controls::NavigationControl*, ::g::Fuse::Elements::Element*, ::g::Fuse::Controls::NavigationControl__ControlPageData*))EdgeNavigator__CreateTriggers_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))EdgeNavigator__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))EdgeNavigator__OnUnrooted_fn;
    type->interface23.fp_PartialPrepareGoto = (void(*)(uObject*, double*))EdgeNavigator__FuseNavigationIRouterOutletPartialPrepareGoto_fn;
    type->interface23.fp_CancelPrepare = (void(*)(uObject*))EdgeNavigator__FuseNavigationIRouterOutletCancelPrepare_fn;
    type->interface23.fp_CompareCurrent = (void(*)(uObject*, ::g::Fuse::Navigation::RouterPage*, ::g::Fuse::Visual**, int32_t*))EdgeNavigator__FuseNavigationIRouterOutletCompareCurrent_fn;
    type->interface23.fp_Goto = (void(*)(uObject*, ::g::Fuse::Navigation::RouterPage*, int32_t*, int32_t*, uString*, ::g::Fuse::Visual**, int32_t*))EdgeNavigator__FuseNavigationIRouterOutletGoto_fn;
    type->interface23.fp_GetCurrent = (void(*)(uObject*, ::g::Fuse::Visual**, ::g::Fuse::Navigation::RouterPage**))EdgeNavigator__FuseNavigationIRouterOutletGetCurrent_fn;
    type->interface23.fp_get_Type = (void(*)(uObject*, int32_t*))EdgeNavigator__FuseNavigationIRouterOutletget_Type_fn;
    type->interface19.fp_GetPageState = (void(*)(uObject*, ::g::Fuse::Visual*, ::g::Fuse::Navigation::NavigationPageState*))::g::Fuse::Controls::NavigationControl__FuseNavigationINavigationGetPageState_fn;
    type->interface20.fp_OnSet = (void(*)(uObject*, uObject*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnSet_fn;
    type->interface20.fp_OnFailed = (void(*)(uObject*, uString*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnFailed_fn;
    type->interface20.fp_OnAdd = (void(*)(uObject*, uObject*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnAdd_fn;
    type->interface20.fp_OnRemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnRemoveAt_fn;
    type->interface20.fp_OnInsertAt = (void(*)(uObject*, int32_t*, uObject*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnInsertAt_fn;
    type->interface20.fp_OnNewAt = (void(*)(uObject*, int32_t*, uObject*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnNewAt_fn;
    type->interface20.fp_OnNewAll = (void(*)(uObject*, uObject*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnNewAll_fn;
    type->interface20.fp_OnClear = (void(*)(uObject*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnClear_fn;
    type->interface21.fp_TryGetDataProvider = (void(*)(uObject*, ::g::Fuse::Node*, int32_t*, uObject**, int32_t*))::g::Fuse::Controls::NavigationControl__FuseNodeISubtreeDataProviderTryGetDataProvider_fn;
    type->interface19.fp_get_ActivePage = (void(*)(uObject*, ::g::Fuse::Visual**))::g::Fuse::Controls::NavigationControl__FuseNavigationINavigationget_ActivePage_fn;
    type->interface19.fp_get_State = (void(*)(uObject*, int32_t*))::g::Fuse::Controls::NavigationControl__FuseNavigationINavigationget_State_fn;
    type->interface19.fp_Goto = (void(*)(uObject*, ::g::Fuse::Visual*, int32_t*))::g::Fuse::Controls::NavigationControl__Goto_fn;
    type->interface19.fp_Toggle = (void(*)(uObject*, ::g::Fuse::Visual*))::g::Fuse::Controls::NavigationControl__Toggle_fn;
    type->interface19.fp_add_PageProgressChanged = (void(*)(uObject*, uDelegate*))::g::Fuse::Controls::NavigationControl__add_PageProgressChanged_fn;
    type->interface19.fp_remove_PageProgressChanged = (void(*)(uObject*, uDelegate*))::g::Fuse::Controls::NavigationControl__remove_PageProgressChanged_fn;
    type->interface19.fp_add_Navigated = (void(*)(uObject*, uDelegate*))::g::Fuse::Controls::NavigationControl__add_Navigated_fn;
    type->interface19.fp_remove_Navigated = (void(*)(uObject*, uDelegate*))::g::Fuse::Controls::NavigationControl__remove_Navigated_fn;
    type->interface19.fp_add_StateChanged = (void(*)(uObject*, uDelegate*))::g::Fuse::Controls::NavigationControl__add_StateChanged_fn;
    type->interface19.fp_remove_StateChanged = (void(*)(uObject*, uDelegate*))::g::Fuse::Controls::NavigationControl__remove_StateChanged_fn;
    type->interface22.fp_GoForward = (void(*)(uObject*))::g::Fuse::Controls::NavigationControl__GoForward_fn;
    type->interface22.fp_GoBack = (void(*)(uObject*))::g::Fuse::Controls::NavigationControl__GoBack_fn;
    type->interface22.fp_get_CanGoBack = (void(*)(uObject*, bool*))::g::Fuse::Controls::NavigationControl__get_CanGoBack_fn;
    type->interface22.fp_get_CanGoForward = (void(*)(uObject*, bool*))::g::Fuse::Controls::NavigationControl__get_CanGoForward_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// protected override sealed void CreateTriggers(Fuse.Elements.Element elm, Fuse.Controls.NavigationControl.ControlPageData pd)
void EdgeNavigator__CreateTriggers_fn(EdgeNavigator* __this, ::g::Fuse::Elements::Element* elm, ::g::Fuse::Controls::NavigationControl__ControlPageData* pd)
{
    int32_t e = ::g::Fuse::Navigation::EdgeNavigation::GetEdge(elm);

    switch (e)
    {
        case 0:
        {
            __this->SetupEdge(pd, elm, ::g::Uno::Float2__New2(-1.0f, 0.0f), 1);
            break;
        }
        case 1:
        {
            __this->SetupEdge(pd, elm, ::g::Uno::Float2__New2(1.0f, 0.0f), 3);
            break;
        }
        case 2:
        {
            __this->SetupEdge(pd, elm, ::g::Uno::Float2__New2(0.0f, -1.0f), 4);
            break;
        }
        case 3:
        {
            __this->SetupEdge(pd, elm, ::g::Uno::Float2__New2(0.0f, 1.0f), 12);
            break;
        }
        case 4:
            break;
    }
}

// private static void dismiss(Fuse.Controls.EdgeNavigator e)
void EdgeNavigator__dismiss_fn(EdgeNavigator* e)
{
    EdgeNavigator::dismiss(e);
}

// private void Dismiss()
void EdgeNavigator__Dismiss_fn(EdgeNavigator* __this)
{
    __this->Dismiss();
}

// private void Fuse.Navigation.IRouterOutlet.CancelPrepare()
void EdgeNavigator__FuseNavigationIRouterOutletCancelPrepare_fn(EdgeNavigator* __this)
{
}

// private Fuse.Navigation.RoutingResult Fuse.Navigation.IRouterOutlet.CompareCurrent(Fuse.Navigation.RouterPage routerPage, Fuse.Visual& pageVisual)
void EdgeNavigator__FuseNavigationIRouterOutletCompareCurrent_fn(EdgeNavigator* __this, ::g::Fuse::Navigation::RouterPage* routerPage, ::g::Fuse::Visual** pageVisual, int32_t* __retval)
{
    return *__retval = ::g::Fuse::Controls::CommonNavigation::CompareCurrent(__this, __this->Active(), routerPage, pageVisual), void();
}

// private Fuse.Navigation.RouterPage Fuse.Navigation.IRouterOutlet.GetCurrent(Fuse.Visual& pageVisual)
void EdgeNavigator__FuseNavigationIRouterOutletGetCurrent_fn(EdgeNavigator* __this, ::g::Fuse::Visual** pageVisual, ::g::Fuse::Navigation::RouterPage** __retval)
{
    *pageVisual = __this->Active();

    if (__this->Active() == nullptr)
        return *__retval = ::g::Fuse::Navigation::RouterPage::New1(::STRINGS[5/*""*/], nullptr, nullptr), void();
    else
        return *__retval = uPtr(::g::Fuse::Navigation::PageData::GetOrCreate(__this->Active(), true))->RouterPage(), void();
}

// private Fuse.Navigation.RoutingResult Fuse.Navigation.IRouterOutlet.Goto(Fuse.Navigation.RouterPage routerPage, Fuse.Navigation.NavigationGotoMode gotoMode, Fuse.Navigation.RoutingOperation operation, string operationStyle, Fuse.Visual& pageVisual)
void EdgeNavigator__FuseNavigationIRouterOutletGoto_fn(EdgeNavigator* __this, ::g::Fuse::Navigation::RouterPage* routerPage, int32_t* gotoMode, int32_t* operation, uString* operationStyle, ::g::Fuse::Visual** pageVisual, int32_t* __retval)
{
    int32_t gotoMode_ = *gotoMode;
    int32_t operation_ = *operation;
    return *__retval = ::g::Fuse::Controls::CommonNavigation::Goto(__this, routerPage, gotoMode_, operation_, operationStyle, pageVisual), void();
}

// private void Fuse.Navigation.IRouterOutlet.PartialPrepareGoto(double progress)
void EdgeNavigator__FuseNavigationIRouterOutletPartialPrepareGoto_fn(EdgeNavigator* __this, double* progress)
{
}

// private Fuse.Navigation.OutletType Fuse.Navigation.IRouterOutlet.get_Type()
void EdgeNavigator__FuseNavigationIRouterOutletget_Type_fn(EdgeNavigator* __this, int32_t* __retval)
{
    return *__retval = __this->RouterOutletType(), void();
}

// private void GotoEdge(Fuse.Navigation.NavigationEdge edge)
void EdgeNavigator__GotoEdge_fn(EdgeNavigator* __this, int32_t* edge)
{
    __this->GotoEdge(*edge);
}

// protected override sealed void OnRooted()
void EdgeNavigator__OnRooted_fn(EdgeNavigator* __this)
{
    ::g::Fuse::Controls::NavigationControl__OnRooted_fn(__this);
    uPtr(__this->_pages)->Rooted(__this);
    __this->RootActivePage();
}

// protected override sealed void OnUnrooted()
void EdgeNavigator__OnUnrooted_fn(EdgeNavigator* __this)
{
    __this->UnrootActivePage();
    uPtr(__this->_pages)->Unrooted();
    ::g::Fuse::Controls::NavigationControl__OnUnrooted_fn(__this);
}

// private static void open(Fuse.Controls.EdgeNavigator e, object[] args)
void EdgeNavigator__open_fn(EdgeNavigator* e, uArray* args)
{
    EdgeNavigator::open(e, args);
}

// private void SetupEdge(Fuse.Controls.NavigationControl.ControlPageData pd, Fuse.Elements.Element elm, float2 rel, Fuse.Elements.Alignment align)
void EdgeNavigator__SetupEdge_fn(EdgeNavigator* __this, ::g::Fuse::Controls::NavigationControl__ControlPageData* pd, ::g::Fuse::Elements::Element* elm, ::g::Uno::Float2* rel, int32_t* align)
{
    __this->SetupEdge(pd, elm, *rel, *align);
}

uSStrong< ::g::Fuse::PropertyHandle*> EdgeNavigator::_controlPageDataProperty_;

// private void Dismiss() [instance]
void EdgeNavigator::Dismiss()
{
    if (uPtr(_edgeNavigation)->IsAnyPanelActive())
        uPtr(_edgeNavigation)->Goto(nullptr, 0);
}

// private void GotoEdge(Fuse.Navigation.NavigationEdge edge) [instance]
void EdgeNavigator::GotoEdge(int32_t edge)
{
    for (::g::Fuse::Visual* elm = (::g::Fuse::Visual*)FirstChild(::TYPES[2/*Fuse.Visual.FirstChild<Fuse.Visual>*/]); elm != nullptr; elm = (::g::Fuse::Visual*)uPtr(elm)->NextSibling(::TYPES[3/*Fuse.Node.NextSibling<Fuse.Visual>*/]))
    {
        int32_t e = ::g::Fuse::Navigation::EdgeNavigation::GetEdge(elm);

        if (e != edge)
            continue;

        uPtr(_edgeNavigation)->Goto(elm, 0);
        break;
    }
}

// private void SetupEdge(Fuse.Controls.NavigationControl.ControlPageData pd, Fuse.Elements.Element elm, float2 rel, Fuse.Elements.Alignment align) [instance]
void EdgeNavigator::SetupEdge(::g::Fuse::Controls::NavigationControl__ControlPageData* pd, ::g::Fuse::Elements::Element* elm, ::g::Uno::Float2 rel, int32_t align)
{
    uPtr(elm)->Alignment(align);
    ::g::Fuse::Animations::Move* move = ::g::Fuse::Animations::Move::New2();
    move->X(rel.X);
    move->Y(rel.Y);
    move->RelativeTo(::g::Fuse::TranslationModes::Size());
    ::g::Fuse::Navigation::EnteringAnimation* enter = ::g::Fuse::Navigation::EnteringAnimation::New2();
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(enter->Animators()), ::TYPES[24/*Uno.Collections.ICollection<Fuse.Animations.Animator>*/]), move);
    uPtr(pd)->Enter = enter;
}

// private static void dismiss(Fuse.Controls.EdgeNavigator e) [static]
void EdgeNavigator::dismiss(EdgeNavigator* e)
{
    EdgeNavigator_typeof()->Init();
    uPtr(e)->Dismiss();
}

// private static void open(Fuse.Controls.EdgeNavigator e, object[] args) [static]
void EdgeNavigator::open(EdgeNavigator* e, uArray* args)
{
    EdgeNavigator_typeof()->Init();
    int32_t ret2;

    if (uPtr(args)->Length() != 1)
    {
        ::g::Fuse::Diagnostics::UserError(::STRINGS[23/*"EdgeNaviaga...*/], e, ::STRINGS[24/*"/Users/mort...*/], 37, ::STRINGS[22/*"open"*/], nullptr);
        return;
    }

    int32_t edge = (::g::Fuse::Marshal__ToType_fn(::TYPES[23/*Fuse.Marshal.ToType<Fuse.Navigation.NavigationEdge>*/], uPtr(args)->Strong<uObject*>(0), &ret2), ret2);
    uPtr(e)->GotoEdge(edge);
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/Navigator.uno
// ------------------------------------------------------------------------------

// internal sealed class Element_Opacity_Property
// {
static void Element_Opacity_Property_build(uType* type)
{
    ::STRINGS[25] = uString::Const("Opacity");
    ::TYPES[5] = ::g::Fuse::Elements::Element_typeof();
    type->SetBase(::g::Uno::UX::Property1_typeof()->MakeType(::g::Uno::Float_typeof(), nullptr));
    type->SetFields(1,
        ::TYPES[5/*Fuse.Elements.Element*/], offsetof(Element_Opacity_Property, _obj), 0);
}

::g::Uno::UX::Property1_type* Element_Opacity_Property_typeof()
{
    static uSStrong< ::g::Uno::UX::Property1_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Uno::UX::Property1_typeof();
    options.FieldCount = 2;
    options.ObjectSize = sizeof(Element_Opacity_Property);
    options.TypeSize = sizeof(::g::Uno::UX::Property1_type);
    type = (::g::Uno::UX::Property1_type*)uClassType::New("Fuse.Controls.Element_Opacity_Property", options);
    type->fp_build_ = Element_Opacity_Property_build;
    type->fp_Get1 = (void(*)(::g::Uno::UX::Property1*, ::g::Uno::UX::PropertyObject*, uTRef))Element_Opacity_Property__Get1_fn;
    type->fp_get_Object = (void(*)(::g::Uno::UX::Property*, ::g::Uno::UX::PropertyObject**))Element_Opacity_Property__get_Object_fn;
    type->fp_Set1 = (void(*)(::g::Uno::UX::Property1*, ::g::Uno::UX::PropertyObject*, void*, uObject*))Element_Opacity_Property__Set1_fn;
    type->fp_get_SupportsOriginSetter = (void(*)(::g::Uno::UX::PropertyAccessor*, bool*))Element_Opacity_Property__get_SupportsOriginSetter_fn;
    return type;
}

// public Element_Opacity_Property(Fuse.Elements.Element obj)
void Element_Opacity_Property__ctor_3_fn(Element_Opacity_Property* __this, ::g::Fuse::Elements::Element* obj)
{
    __this->ctor_3(obj);
}

// public override sealed float Get(Uno.UX.PropertyObject obj)
void Element_Opacity_Property__Get1_fn(Element_Opacity_Property* __this, ::g::Uno::UX::PropertyObject* obj, float* __retval)
{
    return *__retval = uPtr(uCast< ::g::Fuse::Elements::Element*>(obj, ::TYPES[5/*Fuse.Elements.Element*/]))->Opacity(), void();
}

// public Element_Opacity_Property New(Fuse.Elements.Element obj)
void Element_Opacity_Property__New1_fn(::g::Fuse::Elements::Element* obj, Element_Opacity_Property** __retval)
{
    *__retval = Element_Opacity_Property::New1(obj);
}

// public override sealed Uno.UX.PropertyObject get_Object()
void Element_Opacity_Property__get_Object_fn(Element_Opacity_Property* __this, ::g::Uno::UX::PropertyObject** __retval)
{
    return *__retval = __this->_obj, void();
}

// public override sealed void Set(Uno.UX.PropertyObject obj, float v, Uno.UX.IPropertyListener origin)
void Element_Opacity_Property__Set1_fn(Element_Opacity_Property* __this, ::g::Uno::UX::PropertyObject* obj, float* v, uObject* origin)
{
    float v_ = *v;
    uPtr(uCast< ::g::Fuse::Elements::Element*>(obj, ::TYPES[5/*Fuse.Elements.Element*/]))->SetOpacity(v_, origin);
}

// public override sealed bool get_SupportsOriginSetter()
void Element_Opacity_Property__get_SupportsOriginSetter_fn(Element_Opacity_Property* __this, bool* __retval)
{
    return *__retval = true, void();
}

// public Element_Opacity_Property(Fuse.Elements.Element obj) [instance]
void Element_Opacity_Property::ctor_3(::g::Fuse::Elements::Element* obj)
{
    ctor_2(::g::Uno::UX::Selector__op_Implicit(::STRINGS[25/*"Opacity"*/]));
    _obj = obj;
}

// public Element_Opacity_Property New(Fuse.Elements.Element obj) [static]
Element_Opacity_Property* Element_Opacity_Property::New1(::g::Fuse::Elements::Element* obj)
{
    Element_Opacity_Property* obj1 = (Element_Opacity_Property*)uNew(Element_Opacity_Property_typeof());
    obj1->ctor_3(obj);
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Ellipse.uno
// -----------------------------------------------------------------------------------

// public partial sealed class Ellipse
// {
static void Ellipse_build(uType* type)
{
    type->SetDependencies(
        ::g::Uno::Math_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface18),
        ::g::Fuse::Drawing::IDrawObjectWatcherFeedback_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface19));
    type->SetFields(121);
}

::g::Fuse::Controls::Shape_type* Ellipse_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Shape_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::EllipticalShape_typeof();
    options.FieldCount = 121;
    options.InterfaceCount = 20;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(Ellipse);
    options.TypeSize = sizeof(::g::Fuse::Controls::Shape_type);
    type = (::g::Fuse::Controls::Shape_type*)uClassType::New("Fuse.Controls.Ellipse", options);
    type->fp_build_ = Ellipse_build;
    type->fp_CreateSurfacePath = (void(*)(::g::Fuse::Controls::Shape*, ::g::Fuse::Drawing::Surface*, ::g::Fuse::Drawing::SurfacePath**))Ellipse__CreateSurfacePath_fn;
    type->fp_OnHitTestLocalVisual = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::HitTestContext*))Ellipse__OnHitTestLocalVisual_fn;
    type->interface19.fp_Changed = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackChanged_fn;
    type->interface19.fp_Prepare = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackPrepare_fn;
    type->interface19.fp_Unprepare = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackUnprepare_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Shape__OnPropertyChanged2_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// protected override sealed Fuse.Drawing.SurfacePath CreateSurfacePath(Fuse.Drawing.Surface surface)
void Ellipse__CreateSurfacePath_fn(Ellipse* __this, ::g::Fuse::Drawing::Surface* surface, ::g::Fuse::Drawing::SurfacePath** __retval)
{
    return *__retval = __this->CreateEllipticalPath(surface, ::g::Uno::Float2__op_Division1(__this->ActualSize(), 2.0f), ::g::Uno::Float2__op_Division1(__this->ActualSize(), 2.0f), false), void();
}

// protected override sealed void OnHitTestLocalVisual(Fuse.HitTestContext htc)
void Ellipse__OnHitTestLocalVisual_fn(Ellipse* __this, ::g::Fuse::HitTestContext* htc)
{
    ::g::Fuse::Controls::Control__OnHitTestLocalVisual_fn(__this, htc);

    if (!__this->HasFills())
        return;

    float pointsZeroTolerance = 1e-05f;

    if ((__this->ActualSize().Y < 1e-05f) || (__this->ActualSize().X < 1e-05f))
        return;

    ::g::Uno::Float2 offPoint = ::g::Uno::Float2__op_Division2(::g::Uno::Float2__op_Subtraction2(uPtr(htc)->LocalPoint(), ::g::Uno::Float2__op_Division1(__this->ActualSize(), 2.0f)), ::g::Uno::Float2__op_Division1(__this->ActualSize(), 2.0f));

    if (::g::Uno::Vector::Length(offPoint) > 1.0f)
        return;

    if (__this->UseAngle())
    {
        float localAngle = ::g::Uno::Math::Atan22(offPoint.Y, offPoint.X);

        if (!::g::Fuse::Drawing::SurfaceUtil::AngleInRange(localAngle, __this->StartAngle(), __this->EffectiveEndAngle()))
            return;
    }

    htc->Hit(__this);
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/EllipticalShape.Surface.uno
// ---------------------------------------------------------------------------------------------------

// public interfacemodifiers class EllipticalShape
// {
// static generated EllipticalShape()
static void EllipticalShape__cctor_4_fn(uType* __type)
{
    EllipticalShape::EndAngleName_ = ::g::Uno::UX::Selector__New1(::STRINGS[26/*"EndAngle"*/]);
    EllipticalShape::StartAngleName_ = ::g::Uno::UX::Selector__New1(::STRINGS[27/*"StartAngle"*/]);
    EllipticalShape::LengthAngleName_ = ::g::Uno::UX::Selector__New1(::STRINGS[28/*"LengthAngle"*/]);
}

static void EllipticalShape_build(uType* type)
{
    ::STRINGS[26] = uString::Const("EndAngle");
    ::STRINGS[27] = uString::Const("StartAngle");
    ::STRINGS[28] = uString::Const("LengthAngle");
    type->SetDependencies(
        ::g::Uno::Math_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface18),
        ::g::Fuse::Drawing::IDrawObjectWatcherFeedback_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface19));
    type->SetFields(116,
        ::g::Uno::Float_typeof(), offsetof(EllipticalShape, _startAngle), 0,
        ::g::Uno::Float_typeof(), offsetof(EllipticalShape, _endAngle), 0,
        ::g::Uno::Bool_typeof(), offsetof(EllipticalShape, _hasAngle), 0,
        ::g::Uno::Float_typeof(), offsetof(EllipticalShape, _lengthAngle), 0,
        ::g::Uno::Bool_typeof(), offsetof(EllipticalShape, _hasLengthAngle), 0,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&EllipticalShape::EndAngleName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&EllipticalShape::StartAngleName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&EllipticalShape::LengthAngleName_, uFieldFlagsStatic);
}

::g::Fuse::Controls::Shape_type* EllipticalShape_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Shape_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::Shape_typeof();
    options.FieldCount = 124;
    options.InterfaceCount = 20;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(EllipticalShape);
    options.TypeSize = sizeof(::g::Fuse::Controls::Shape_type);
    type = (::g::Fuse::Controls::Shape_type*)uClassType::New("Fuse.Controls.EllipticalShape", options);
    type->fp_build_ = EllipticalShape_build;
    type->fp_cctor_ = EllipticalShape__cctor_4_fn;
    type->interface19.fp_Changed = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackChanged_fn;
    type->interface19.fp_Prepare = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackPrepare_fn;
    type->interface19.fp_Unprepare = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackUnprepare_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Shape__OnPropertyChanged2_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// protected generated EllipticalShape()
void EllipticalShape__ctor_7_fn(EllipticalShape* __this)
{
    __this->ctor_7();
}

// protected Fuse.Drawing.SurfacePath CreateEllipticalPath(Fuse.Drawing.Surface surface, float2 center, float2 radius, [bool drawArc])
void EllipticalShape__CreateEllipticalPath_fn(EllipticalShape* __this, ::g::Fuse::Drawing::Surface* surface, ::g::Uno::Float2* center, ::g::Uno::Float2* radius, bool* drawArc, ::g::Fuse::Drawing::SurfacePath** __retval)
{
    *__retval = __this->CreateEllipticalPath(surface, *center, *radius, *drawArc);
}

// internal float get_EffectiveEndAngle()
void EllipticalShape__get_EffectiveEndAngle_fn(EllipticalShape* __this, float* __retval)
{
    *__retval = __this->EffectiveEndAngle();
}

// public float get_StartAngle()
void EllipticalShape__get_StartAngle_fn(EllipticalShape* __this, float* __retval)
{
    *__retval = __this->StartAngle();
}

// public void set_StartAngle(float value)
void EllipticalShape__set_StartAngle_fn(EllipticalShape* __this, float* value)
{
    __this->StartAngle(*value);
}

// internal bool get_UseAngle()
void EllipticalShape__get_UseAngle_fn(EllipticalShape* __this, bool* __retval)
{
    *__retval = __this->UseAngle();
}

::g::Uno::UX::Selector EllipticalShape::EndAngleName_;
::g::Uno::UX::Selector EllipticalShape::StartAngleName_;
::g::Uno::UX::Selector EllipticalShape::LengthAngleName_;

// protected generated EllipticalShape() [instance]
void EllipticalShape::ctor_7()
{
    ctor_6();
}

// protected Fuse.Drawing.SurfacePath CreateEllipticalPath(Fuse.Drawing.Surface surface, float2 center, float2 radius, [bool drawArc]) [instance]
::g::Fuse::Drawing::SurfacePath* EllipticalShape::CreateEllipticalPath(::g::Fuse::Drawing::Surface* surface, ::g::Uno::Float2 center, ::g::Uno::Float2 radius, bool drawArc)
{
    ::g::Fuse::Drawing::LineSegments* list = ::g::Fuse::Drawing::LineSegments::New1();
    float startAngle = StartAngle();
    float endAngle = EffectiveEndAngle();

    if (UseAngle())
    {
        ::g::Uno::Float2 s = ::g::Uno::Float2__New2(::g::Uno::Math::Cos1(startAngle), ::g::Uno::Math::Sin1(startAngle));
        ::g::Uno::Float2 c = ::g::Uno::Float2__New2(::g::Uno::Math::Cos1((startAngle + endAngle) / 2.0f), ::g::Uno::Math::Sin1((startAngle + endAngle) / 2.0f));
        ::g::Uno::Float2 e = ::g::Uno::Float2__New2(::g::Uno::Math::Cos1(endAngle), ::g::Uno::Math::Sin1(endAngle));

        if (drawArc)
            uPtr(list)->MoveTo(::g::Uno::Float2__op_Addition2(center, ::g::Uno::Float2__op_Multiply2(s, radius)));
        else
        {
            uPtr(list)->MoveTo(center);
            list->LineTo(::g::Uno::Float2__op_Addition2(center, ::g::Uno::Float2__op_Multiply2(s, radius)));
        }

        uPtr(list)->EllipticArcTo(::g::Uno::Float2__op_Addition2(center, ::g::Uno::Float2__op_Multiply2(c, radius)), radius, 0.0f, false, startAngle < endAngle);
        list->EllipticArcTo(::g::Uno::Float2__op_Addition2(center, ::g::Uno::Float2__op_Multiply2(e, radius)), radius, 0.0f, false, startAngle < endAngle);

        if (!drawArc)
        {
            uPtr(list)->LineTo(center);
            list->ClosePath();
        }
    }
    else
    {
        uPtr(list)->MoveTo(::g::Uno::Float2__op_Addition2(center, ::g::Uno::Float2__New2(radius.X, 0.0f)));
        list->EllipticArcTo(::g::Uno::Float2__op_Subtraction2(center, ::g::Uno::Float2__New2(radius.X, 0.0f)), radius, 0.0f, true, true);
        list->EllipticArcTo(::g::Uno::Float2__op_Addition2(center, ::g::Uno::Float2__New2(radius.X, 0.0f)), radius, 0.0f, true, true);
        list->ClosePath();
    }

    return uPtr(surface)->CreatePath(list->Segments(), 0);
}

// internal float get_EffectiveEndAngle() [instance]
float EllipticalShape::EffectiveEndAngle()
{
    return _hasLengthAngle ? _startAngle + _lengthAngle : _endAngle;
}

// public float get_StartAngle() [instance]
float EllipticalShape::StartAngle()
{
    return _startAngle;
}

// public void set_StartAngle(float value) [instance]
void EllipticalShape::StartAngle(float value)
{
    if (_hasAngle && (_startAngle == value))
        return;

    _startAngle = value;
    _hasAngle = true;
    InvalidateSurfacePath();
    OnPropertyChanged(EllipticalShape::StartAngleName_);
}

// internal bool get_UseAngle() [instance]
bool EllipticalShape::UseAngle()
{
    if (!_hasAngle)
        return false;

    float zeroTolerance = 1e-05f;

    if (_hasLengthAngle && (::g::Uno::Math::Abs1(_lengthAngle) >= 6.28317547f))
        return false;

    return true;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/NativeViewHost.uno
// -------------------------------------------------------------------------------

// private sealed class NativeViewHost.Enable
// {
static void NativeViewHost__Enable_build(uType* type)
{
    ::TYPES[16] = ::g::Uno::Action_typeof();
    type->SetDependencies(
        ::g::Fuse::UpdateManager_typeof());
    type->SetInterfaces(
        ::g::Uno::IDisposable_typeof(), offsetof(NativeViewHost__Enable_type, interface0));
    type->SetFields(0,
        ::g::Fuse::Controls::NativeViewHost_typeof(), offsetof(NativeViewHost__Enable, _host), 0,
        ::g::Uno::Bool_typeof(), offsetof(NativeViewHost__Enable, _canceled), 0);
}

NativeViewHost__Enable_type* NativeViewHost__Enable_typeof()
{
    static uSStrong<NativeViewHost__Enable_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.FieldCount = 2;
    options.InterfaceCount = 1;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(NativeViewHost__Enable);
    options.TypeSize = sizeof(NativeViewHost__Enable_type);
    type = (NativeViewHost__Enable_type*)uClassType::New("Fuse.Controls.NativeViewHost.Enable", options);
    type->fp_build_ = NativeViewHost__Enable_build;
    type->interface0.fp_Dispose = (void(*)(uObject*))NativeViewHost__Enable__UnoIDisposableDispose_fn;
    return type;
}

// public Enable(Fuse.Controls.NativeViewHost host)
void NativeViewHost__Enable__ctor__fn(NativeViewHost__Enable* __this, ::g::Fuse::Controls::NativeViewHost* host)
{
    __this->ctor_(host);
}

// public Enable New(Fuse.Controls.NativeViewHost host)
void NativeViewHost__Enable__New1_fn(::g::Fuse::Controls::NativeViewHost* host, NativeViewHost__Enable** __retval)
{
    *__retval = NativeViewHost__Enable::New1(host);
}

// private void NextFrame()
void NativeViewHost__Enable__NextFrame_fn(NativeViewHost__Enable* __this)
{
    __this->NextFrame();
}

// private void Uno.IDisposable.Dispose()
void NativeViewHost__Enable__UnoIDisposableDispose_fn(NativeViewHost__Enable* __this)
{
    __this->_canceled = true;
}

// public Enable(Fuse.Controls.NativeViewHost host) [instance]
void NativeViewHost__Enable::ctor_(::g::Fuse::Controls::NativeViewHost* host)
{
    _host = host;
    uPtr(_host)->_draw = true;
    uPtr(_host)->InvalidateVisual();
    uPtr(_host)->InvalidateRenderBounds();
    ::g::Fuse::UpdateManager::PerformNextFrame(uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)NativeViewHost__Enable__NextFrame_fn, this), 0, 1);
}

// private void NextFrame() [instance]
void NativeViewHost__Enable::NextFrame()
{
    if (_canceled)
        return;

    uPtr(_host)->EnableOffscreen();
    uPtr(_host)->_toggeling = nullptr;
    _host = nullptr;
}

// public Enable New(Fuse.Controls.NativeViewHost host) [static]
NativeViewHost__Enable* NativeViewHost__Enable::New1(::g::Fuse::Controls::NativeViewHost* host)
{
    NativeViewHost__Enable* obj1 = (NativeViewHost__Enable*)uNew(NativeViewHost__Enable_typeof());
    obj1->ctor_(host);
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/TreeRenderer.Android.uno
// -------------------------------------------------------------------------------------

// internal static extern class Extensions
// {
static void Extensions_build(uType* type)
{
    ::STRINGS[29] = uString::Const("Cannot convert to a color");
    ::STRINGS[30] = uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/TreeRenderer.Android.uno");
    ::STRINGS[31] = uString::Const("GetColor");
    ::TYPES[25] = ::g::Fuse::Drawing::SolidColor_typeof();
    ::TYPES[26] = ::g::Fuse::Drawing::StaticSolidColor_typeof();
    type->SetDependencies(
        ::g::Uno::Color_typeof());
}

uClassType* Extensions_typeof()
{
    static uSStrong<uClassType*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.DependencyCount = 1;
    options.TypeSize = sizeof(uClassType);
    type = uClassType::New("Fuse.Controls.Extensions", options);
    type->fp_build_ = Extensions_build;
    return type;
}

// public static int GetColor(Fuse.Drawing.Brush brush)
void Extensions__GetColor_fn(::g::Fuse::Drawing::Brush* brush, int32_t* __retval)
{
    *__retval = Extensions::GetColor(brush);
}

// public static int GetColor(Fuse.Drawing.Brush brush) [static]
int32_t Extensions::GetColor(::g::Fuse::Drawing::Brush* brush)
{
    ::g::Uno::Float4 c = ::g::Uno::Float4__New1(0.0f);

    if (brush != nullptr)
    {
        ::g::Fuse::Drawing::SolidColor* sc = uAs< ::g::Fuse::Drawing::SolidColor*>(brush, ::TYPES[25/*Fuse.Drawing.SolidColor*/]);

        if (sc != nullptr)
            c = uPtr(sc)->Color();

        ::g::Fuse::Drawing::StaticSolidColor* ssc = uAs< ::g::Fuse::Drawing::StaticSolidColor*>(brush, ::TYPES[26/*Fuse.Drawing.StaticSolidColor*/]);

        if (ssc != nullptr)
            c = uPtr(ssc)->Color();

        if ((sc == nullptr) && (ssc == nullptr))
            ::g::Fuse::Diagnostics::Unsupported(::STRINGS[29/*"Cannot conv...*/], brush, ::STRINGS[30/*"/Users/mort...*/], 253, ::STRINGS[31/*"GetColor"*/]);
    }

    return (int32_t)::g::Uno::Color::ToArgb(c);
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.WebView/WebView.uno
// -------------------------------------------------------------------------

// internal sealed class FallbackWebViewClient
// {
static void FallbackWebViewClient_build(uType* type)
{
    ::STRINGS[5] = uString::Const("");
    ::TYPES[27] = ::g::Uno::Collections::List_typeof()->MakeType(::g::Fuse::Controls::BufferedWebViewCall_typeof(), nullptr);
    ::TYPES[28] = ::g::Fuse::Controls::BufferedWebViewCall_typeof();
    ::TYPES[29] = ::g::Uno::EventHandler_typeof();
    ::TYPES[30] = ::g::Uno::UX::ValueChangedHandler_typeof()->MakeType(::g::Uno::Double_typeof(), nullptr);
    type->SetInterfaces(
        ::g::Fuse::Controls::IWebView_typeof(), offsetof(FallbackWebViewClient_type, interface0),
        ::g::Fuse::Triggers::IProgress_typeof(), offsetof(FallbackWebViewClient_type, interface1),
        ::g::Fuse::Navigation::IBaseNavigation_typeof(), offsetof(FallbackWebViewClient_type, interface2),
        ::g::Fuse::Controls::ISourceReceiver_typeof(), offsetof(FallbackWebViewClient_type, interface3));
    type->SetFields(0,
        ::TYPES[27/*Uno.Collections.List<Fuse.Controls.BufferedWebViewCall>*/], offsetof(FallbackWebViewClient, _bufferedCalls), 0,
        ::g::Uno::String_typeof(), offsetof(FallbackWebViewClient, _BaseUrl), 0,
        ::g::Uno::UX::FileSource_typeof(), offsetof(FallbackWebViewClient, _File), 0,
        ::g::Uno::Bool_typeof(), offsetof(FallbackWebViewClient, _ScrollEnabled), 0,
        ::g::Uno::String_typeof(), offsetof(FallbackWebViewClient, _Source), 0,
        ::g::Uno::String_typeof(), offsetof(FallbackWebViewClient, _Url), 0,
        ::g::Uno::Bool_typeof(), offsetof(FallbackWebViewClient, _ZoomEnabled), 0,
        ::TYPES[29/*Uno.EventHandler*/], offsetof(FallbackWebViewClient, BeginDownload1), 0,
        ::TYPES[29/*Uno.EventHandler*/], offsetof(FallbackWebViewClient, BeginLoading1), 0,
        ::TYPES[29/*Uno.EventHandler*/], offsetof(FallbackWebViewClient, FileDownloaded1), 0,
        ::TYPES[29/*Uno.EventHandler*/], offsetof(FallbackWebViewClient, PageLoaded1), 0,
        ::TYPES[30/*Uno.UX.ValueChangedHandler<double>*/], offsetof(FallbackWebViewClient, ProgressChanged1), 0,
        ::TYPES[29/*Uno.EventHandler*/], offsetof(FallbackWebViewClient, URISchemeHandler1), 0,
        ::TYPES[29/*Uno.EventHandler*/], offsetof(FallbackWebViewClient, UrlChanged1), 0);
}

FallbackWebViewClient_type* FallbackWebViewClient_typeof()
{
    static uSStrong<FallbackWebViewClient_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.FieldCount = 14;
    options.InterfaceCount = 4;
    options.ObjectSize = sizeof(FallbackWebViewClient);
    options.TypeSize = sizeof(FallbackWebViewClient_type);
    type = (FallbackWebViewClient_type*)uClassType::New("Fuse.Controls.FallbackWebViewClient", options);
    type->fp_build_ = FallbackWebViewClient_build;
    type->fp_ctor_ = (void*)FallbackWebViewClient__New1_fn;
    type->interface0.fp_Eval1 = (void(*)(uObject*, uString*, uDelegate*))FallbackWebViewClient__Eval1_fn;
    type->interface0.fp_Eval = (void(*)(uObject*, uString*))FallbackWebViewClient__Eval_fn;
    type->interface0.fp_LoadHtml = (void(*)(uObject*, uString*))FallbackWebViewClient__LoadHtml_fn;
    type->interface0.fp_LoadHtml1 = (void(*)(uObject*, uString*, uString*))FallbackWebViewClient__LoadHtml1_fn;
    type->interface0.fp_LoadUrl = (void(*)(uObject*, uString*))FallbackWebViewClient__LoadUrl_fn;
    type->interface0.fp_Stop = (void(*)(uObject*))FallbackWebViewClient__Stop_fn;
    type->interface0.fp_Reload = (void(*)(uObject*))FallbackWebViewClient__Reload_fn;
    type->interface0.fp_get_BaseUrl = (void(*)(uObject*, uString**))FallbackWebViewClient__get_BaseUrl_fn;
    type->interface0.fp_set_BaseUrl = (void(*)(uObject*, uString*))FallbackWebViewClient__set_BaseUrl_fn;
    type->interface0.fp_get_Url = (void(*)(uObject*, uString**))FallbackWebViewClient__get_Url_fn;
    type->interface0.fp_set_Url = (void(*)(uObject*, uString*))FallbackWebViewClient__set_Url_fn;
    type->interface0.fp_get_File = (void(*)(uObject*, ::g::Uno::UX::FileSource**))FallbackWebViewClient__get_File_fn;
    type->interface0.fp_set_File = (void(*)(uObject*, ::g::Uno::UX::FileSource*))FallbackWebViewClient__set_File_fn;
    type->interface0.fp_get_ZoomEnabled = (void(*)(uObject*, bool*))FallbackWebViewClient__get_ZoomEnabled_fn;
    type->interface0.fp_set_ZoomEnabled = (void(*)(uObject*, bool*))FallbackWebViewClient__set_ZoomEnabled_fn;
    type->interface0.fp_get_ScrollEnabled = (void(*)(uObject*, bool*))FallbackWebViewClient__get_ScrollEnabled_fn;
    type->interface0.fp_set_ScrollEnabled = (void(*)(uObject*, bool*))FallbackWebViewClient__set_ScrollEnabled_fn;
    type->interface0.fp_add_PageLoaded = (void(*)(uObject*, uDelegate*))FallbackWebViewClient__add_PageLoaded_fn;
    type->interface0.fp_remove_PageLoaded = (void(*)(uObject*, uDelegate*))FallbackWebViewClient__remove_PageLoaded_fn;
    type->interface0.fp_add_BeginLoading = (void(*)(uObject*, uDelegate*))FallbackWebViewClient__add_BeginLoading_fn;
    type->interface0.fp_remove_BeginLoading = (void(*)(uObject*, uDelegate*))FallbackWebViewClient__remove_BeginLoading_fn;
    type->interface0.fp_add_UrlChanged = (void(*)(uObject*, uDelegate*))FallbackWebViewClient__add_UrlChanged_fn;
    type->interface0.fp_remove_UrlChanged = (void(*)(uObject*, uDelegate*))FallbackWebViewClient__remove_UrlChanged_fn;
    type->interface0.fp_add_URISchemeHandler = (void(*)(uObject*, uDelegate*))FallbackWebViewClient__add_URISchemeHandler_fn;
    type->interface0.fp_remove_URISchemeHandler = (void(*)(uObject*, uDelegate*))FallbackWebViewClient__remove_URISchemeHandler_fn;
    type->interface0.fp_add_BeginDownload = (void(*)(uObject*, uDelegate*))FallbackWebViewClient__add_BeginDownload_fn;
    type->interface0.fp_remove_BeginDownload = (void(*)(uObject*, uDelegate*))FallbackWebViewClient__remove_BeginDownload_fn;
    type->interface0.fp_add_FileDownloaded = (void(*)(uObject*, uDelegate*))FallbackWebViewClient__add_FileDownloaded_fn;
    type->interface0.fp_remove_FileDownloaded = (void(*)(uObject*, uDelegate*))FallbackWebViewClient__remove_FileDownloaded_fn;
    type->interface1.fp_get_Progress = (void(*)(uObject*, double*))FallbackWebViewClient__get_Progress_fn;
    type->interface1.fp_add_ProgressChanged = (void(*)(uObject*, uDelegate*))FallbackWebViewClient__add_ProgressChanged_fn;
    type->interface1.fp_remove_ProgressChanged = (void(*)(uObject*, uDelegate*))FallbackWebViewClient__remove_ProgressChanged_fn;
    type->interface2.fp_GoForward = (void(*)(uObject*))FallbackWebViewClient__GoForward_fn;
    type->interface2.fp_GoBack = (void(*)(uObject*))FallbackWebViewClient__GoBack_fn;
    type->interface2.fp_get_CanGoBack = (void(*)(uObject*, bool*))FallbackWebViewClient__get_CanGoBack_fn;
    type->interface2.fp_get_CanGoForward = (void(*)(uObject*, bool*))FallbackWebViewClient__get_CanGoForward_fn;
    type->interface3.fp_get_Source = (void(*)(uObject*, uString**))FallbackWebViewClient__get_Source_fn;
    type->interface3.fp_set_Source = (void(*)(uObject*, uString*))FallbackWebViewClient__set_Source_fn;
    return type;
}

// public FallbackWebViewClient()
void FallbackWebViewClient__ctor__fn(FallbackWebViewClient* __this)
{
    __this->ctor_();
}

// public void ApplyBufferedCalls(Fuse.Controls.IWebView wv)
void FallbackWebViewClient__ApplyBufferedCalls_fn(FallbackWebViewClient* __this, uObject* wv)
{
    __this->ApplyBufferedCalls(wv);
}

// public generated string get_BaseUrl()
void FallbackWebViewClient__get_BaseUrl_fn(FallbackWebViewClient* __this, uString** __retval)
{
    *__retval = __this->BaseUrl();
}

// public generated void set_BaseUrl(string value)
void FallbackWebViewClient__set_BaseUrl_fn(FallbackWebViewClient* __this, uString* value)
{
    __this->BaseUrl(value);
}

// public generated void add_BeginDownload(Uno.EventHandler value)
void FallbackWebViewClient__add_BeginDownload_fn(FallbackWebViewClient* __this, uDelegate* value)
{
    __this->add_BeginDownload(value);
}

// public generated void remove_BeginDownload(Uno.EventHandler value)
void FallbackWebViewClient__remove_BeginDownload_fn(FallbackWebViewClient* __this, uDelegate* value)
{
    __this->remove_BeginDownload(value);
}

// public generated void add_BeginLoading(Uno.EventHandler value)
void FallbackWebViewClient__add_BeginLoading_fn(FallbackWebViewClient* __this, uDelegate* value)
{
    __this->add_BeginLoading(value);
}

// public generated void remove_BeginLoading(Uno.EventHandler value)
void FallbackWebViewClient__remove_BeginLoading_fn(FallbackWebViewClient* __this, uDelegate* value)
{
    __this->remove_BeginLoading(value);
}

// public bool get_CanGoBack()
void FallbackWebViewClient__get_CanGoBack_fn(FallbackWebViewClient* __this, bool* __retval)
{
    *__retval = __this->CanGoBack();
}

// public bool get_CanGoForward()
void FallbackWebViewClient__get_CanGoForward_fn(FallbackWebViewClient* __this, bool* __retval)
{
    *__retval = __this->CanGoForward();
}

// public void Eval(string js)
void FallbackWebViewClient__Eval_fn(FallbackWebViewClient* __this, uString* js)
{
    __this->Eval(js);
}

// public void Eval(string js, Uno.Action<string> resultHandler)
void FallbackWebViewClient__Eval1_fn(FallbackWebViewClient* __this, uString* js, uDelegate* resultHandler)
{
    __this->Eval1(js, resultHandler);
}

// public generated Uno.UX.FileSource get_File()
void FallbackWebViewClient__get_File_fn(FallbackWebViewClient* __this, ::g::Uno::UX::FileSource** __retval)
{
    *__retval = __this->File();
}

// public generated void set_File(Uno.UX.FileSource value)
void FallbackWebViewClient__set_File_fn(FallbackWebViewClient* __this, ::g::Uno::UX::FileSource* value)
{
    __this->File(value);
}

// public generated void add_FileDownloaded(Uno.EventHandler value)
void FallbackWebViewClient__add_FileDownloaded_fn(FallbackWebViewClient* __this, uDelegate* value)
{
    __this->add_FileDownloaded(value);
}

// public generated void remove_FileDownloaded(Uno.EventHandler value)
void FallbackWebViewClient__remove_FileDownloaded_fn(FallbackWebViewClient* __this, uDelegate* value)
{
    __this->remove_FileDownloaded(value);
}

// public void GoBack()
void FallbackWebViewClient__GoBack_fn(FallbackWebViewClient* __this)
{
    __this->GoBack();
}

// public void GoForward()
void FallbackWebViewClient__GoForward_fn(FallbackWebViewClient* __this)
{
    __this->GoForward();
}

// public void LoadHtml(string html)
void FallbackWebViewClient__LoadHtml_fn(FallbackWebViewClient* __this, uString* html)
{
    __this->LoadHtml(html);
}

// public void LoadHtml(string html, string baseUrl)
void FallbackWebViewClient__LoadHtml1_fn(FallbackWebViewClient* __this, uString* html, uString* baseUrl)
{
    __this->LoadHtml1(html, baseUrl);
}

// public void LoadUrl(string url)
void FallbackWebViewClient__LoadUrl_fn(FallbackWebViewClient* __this, uString* url)
{
    __this->LoadUrl(url);
}

// public FallbackWebViewClient New()
void FallbackWebViewClient__New1_fn(FallbackWebViewClient** __retval)
{
    *__retval = FallbackWebViewClient::New1();
}

// public generated void add_PageLoaded(Uno.EventHandler value)
void FallbackWebViewClient__add_PageLoaded_fn(FallbackWebViewClient* __this, uDelegate* value)
{
    __this->add_PageLoaded(value);
}

// public generated void remove_PageLoaded(Uno.EventHandler value)
void FallbackWebViewClient__remove_PageLoaded_fn(FallbackWebViewClient* __this, uDelegate* value)
{
    __this->remove_PageLoaded(value);
}

// public double get_Progress()
void FallbackWebViewClient__get_Progress_fn(FallbackWebViewClient* __this, double* __retval)
{
    *__retval = __this->Progress();
}

// public generated void add_ProgressChanged(Uno.UX.ValueChangedHandler<double> value)
void FallbackWebViewClient__add_ProgressChanged_fn(FallbackWebViewClient* __this, uDelegate* value)
{
    __this->add_ProgressChanged(value);
}

// public generated void remove_ProgressChanged(Uno.UX.ValueChangedHandler<double> value)
void FallbackWebViewClient__remove_ProgressChanged_fn(FallbackWebViewClient* __this, uDelegate* value)
{
    __this->remove_ProgressChanged(value);
}

// public void Reload()
void FallbackWebViewClient__Reload_fn(FallbackWebViewClient* __this)
{
    __this->Reload();
}

// public generated bool get_ScrollEnabled()
void FallbackWebViewClient__get_ScrollEnabled_fn(FallbackWebViewClient* __this, bool* __retval)
{
    *__retval = __this->ScrollEnabled();
}

// public generated void set_ScrollEnabled(bool value)
void FallbackWebViewClient__set_ScrollEnabled_fn(FallbackWebViewClient* __this, bool* value)
{
    __this->ScrollEnabled(*value);
}

// public generated string get_Source()
void FallbackWebViewClient__get_Source_fn(FallbackWebViewClient* __this, uString** __retval)
{
    *__retval = __this->Source();
}

// public generated void set_Source(string value)
void FallbackWebViewClient__set_Source_fn(FallbackWebViewClient* __this, uString* value)
{
    __this->Source(value);
}

// public void Stop()
void FallbackWebViewClient__Stop_fn(FallbackWebViewClient* __this)
{
    __this->Stop();
}

// public generated void add_URISchemeHandler(Uno.EventHandler value)
void FallbackWebViewClient__add_URISchemeHandler_fn(FallbackWebViewClient* __this, uDelegate* value)
{
    __this->add_URISchemeHandler(value);
}

// public generated void remove_URISchemeHandler(Uno.EventHandler value)
void FallbackWebViewClient__remove_URISchemeHandler_fn(FallbackWebViewClient* __this, uDelegate* value)
{
    __this->remove_URISchemeHandler(value);
}

// public generated string get_Url()
void FallbackWebViewClient__get_Url_fn(FallbackWebViewClient* __this, uString** __retval)
{
    *__retval = __this->Url();
}

// public generated void set_Url(string value)
void FallbackWebViewClient__set_Url_fn(FallbackWebViewClient* __this, uString* value)
{
    __this->Url(value);
}

// public generated void add_UrlChanged(Uno.EventHandler value)
void FallbackWebViewClient__add_UrlChanged_fn(FallbackWebViewClient* __this, uDelegate* value)
{
    __this->add_UrlChanged(value);
}

// public generated void remove_UrlChanged(Uno.EventHandler value)
void FallbackWebViewClient__remove_UrlChanged_fn(FallbackWebViewClient* __this, uDelegate* value)
{
    __this->remove_UrlChanged(value);
}

// public generated bool get_ZoomEnabled()
void FallbackWebViewClient__get_ZoomEnabled_fn(FallbackWebViewClient* __this, bool* __retval)
{
    *__retval = __this->ZoomEnabled();
}

// public generated void set_ZoomEnabled(bool value)
void FallbackWebViewClient__set_ZoomEnabled_fn(FallbackWebViewClient* __this, bool* value)
{
    __this->ZoomEnabled(*value);
}

// public FallbackWebViewClient() [instance]
void FallbackWebViewClient::ctor_()
{
    _bufferedCalls = ((::g::Uno::Collections::List*)::g::Uno::Collections::List::New1(::TYPES[27/*Uno.Collections.List<Fuse.Controls.BufferedWebViewCall>*/]));
    ZoomEnabled(true);
    ScrollEnabled(true);
}

// public void ApplyBufferedCalls(Fuse.Controls.IWebView wv) [instance]
void FallbackWebViewClient::ApplyBufferedCalls(uObject* wv)
{
    uObject* ret2;
    bool ret3;

    while (uPtr(_bufferedCalls)->Count() > 0)
    {
        uObject* call = (::g::Uno::Collections::List__get_Item_fn(uPtr(_bufferedCalls), uCRef<int32_t>(0), &ret2), ret2);
        ::g::Fuse::Controls::BufferedWebViewCall::Apply(uInterface(uPtr(call), ::TYPES[28/*Fuse.Controls.BufferedWebViewCall*/]), wv);
        ::g::Uno::Collections::List__Remove_fn(uPtr(_bufferedCalls), call, &ret3);
    }
}

// public generated string get_BaseUrl() [instance]
uString* FallbackWebViewClient::BaseUrl()
{
    return _BaseUrl;
}

// public generated void set_BaseUrl(string value) [instance]
void FallbackWebViewClient::BaseUrl(uString* value)
{
    _BaseUrl = value;
}

// public generated void add_BeginDownload(Uno.EventHandler value) [instance]
void FallbackWebViewClient::add_BeginDownload(uDelegate* value)
{
    BeginDownload1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(BeginDownload1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public generated void remove_BeginDownload(Uno.EventHandler value) [instance]
void FallbackWebViewClient::remove_BeginDownload(uDelegate* value)
{
    BeginDownload1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(BeginDownload1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public generated void add_BeginLoading(Uno.EventHandler value) [instance]
void FallbackWebViewClient::add_BeginLoading(uDelegate* value)
{
    BeginLoading1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(BeginLoading1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public generated void remove_BeginLoading(Uno.EventHandler value) [instance]
void FallbackWebViewClient::remove_BeginLoading(uDelegate* value)
{
    BeginLoading1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(BeginLoading1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public bool get_CanGoBack() [instance]
bool FallbackWebViewClient::CanGoBack()
{
    return false;
}

// public bool get_CanGoForward() [instance]
bool FallbackWebViewClient::CanGoForward()
{
    return false;
}

// public void Eval(string js) [instance]
void FallbackWebViewClient::Eval(uString* js)
{
    ::g::Uno::Collections::List__Add_fn(uPtr(_bufferedCalls), (uObject*)::g::Fuse::Controls::JavaScriptCall::New1(js, nullptr));
}

// public void Eval(string js, Uno.Action<string> resultHandler) [instance]
void FallbackWebViewClient::Eval1(uString* js, uDelegate* resultHandler)
{
    ::g::Uno::Collections::List__Add_fn(uPtr(_bufferedCalls), (uObject*)::g::Fuse::Controls::JavaScriptCall::New1(js, resultHandler));
}

// public generated Uno.UX.FileSource get_File() [instance]
::g::Uno::UX::FileSource* FallbackWebViewClient::File()
{
    return _File;
}

// public generated void set_File(Uno.UX.FileSource value) [instance]
void FallbackWebViewClient::File(::g::Uno::UX::FileSource* value)
{
    _File = value;
}

// public generated void add_FileDownloaded(Uno.EventHandler value) [instance]
void FallbackWebViewClient::add_FileDownloaded(uDelegate* value)
{
    FileDownloaded1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(FileDownloaded1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public generated void remove_FileDownloaded(Uno.EventHandler value) [instance]
void FallbackWebViewClient::remove_FileDownloaded(uDelegate* value)
{
    FileDownloaded1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(FileDownloaded1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public void GoBack() [instance]
void FallbackWebViewClient::GoBack()
{
}

// public void GoForward() [instance]
void FallbackWebViewClient::GoForward()
{
}

// public void LoadHtml(string html) [instance]
void FallbackWebViewClient::LoadHtml(uString* html)
{
    LoadHtml1(html, ::STRINGS[5/*""*/]);
}

// public void LoadHtml(string html, string baseUrl) [instance]
void FallbackWebViewClient::LoadHtml1(uString* html, uString* baseUrl)
{
    ::g::Uno::Collections::List__Add_fn(uPtr(_bufferedCalls), (uObject*)::g::Fuse::Controls::LoadHtmlCall::New1(html, baseUrl));
}

// public void LoadUrl(string url) [instance]
void FallbackWebViewClient::LoadUrl(uString* url)
{
}

// public generated void add_PageLoaded(Uno.EventHandler value) [instance]
void FallbackWebViewClient::add_PageLoaded(uDelegate* value)
{
    PageLoaded1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(PageLoaded1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public generated void remove_PageLoaded(Uno.EventHandler value) [instance]
void FallbackWebViewClient::remove_PageLoaded(uDelegate* value)
{
    PageLoaded1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(PageLoaded1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public double get_Progress() [instance]
double FallbackWebViewClient::Progress()
{
    return 0.0;
}

// public generated void add_ProgressChanged(Uno.UX.ValueChangedHandler<double> value) [instance]
void FallbackWebViewClient::add_ProgressChanged(uDelegate* value)
{
    ProgressChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(ProgressChanged1, value), ::TYPES[30/*Uno.UX.ValueChangedHandler<double>*/]);
}

// public generated void remove_ProgressChanged(Uno.UX.ValueChangedHandler<double> value) [instance]
void FallbackWebViewClient::remove_ProgressChanged(uDelegate* value)
{
    ProgressChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(ProgressChanged1, value), ::TYPES[30/*Uno.UX.ValueChangedHandler<double>*/]);
}

// public void Reload() [instance]
void FallbackWebViewClient::Reload()
{
}

// public generated bool get_ScrollEnabled() [instance]
bool FallbackWebViewClient::ScrollEnabled()
{
    return _ScrollEnabled;
}

// public generated void set_ScrollEnabled(bool value) [instance]
void FallbackWebViewClient::ScrollEnabled(bool value)
{
    _ScrollEnabled = value;
}

// public generated string get_Source() [instance]
uString* FallbackWebViewClient::Source()
{
    return _Source;
}

// public generated void set_Source(string value) [instance]
void FallbackWebViewClient::Source(uString* value)
{
    _Source = value;
}

// public void Stop() [instance]
void FallbackWebViewClient::Stop()
{
}

// public generated void add_URISchemeHandler(Uno.EventHandler value) [instance]
void FallbackWebViewClient::add_URISchemeHandler(uDelegate* value)
{
    URISchemeHandler1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(URISchemeHandler1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public generated void remove_URISchemeHandler(Uno.EventHandler value) [instance]
void FallbackWebViewClient::remove_URISchemeHandler(uDelegate* value)
{
    URISchemeHandler1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(URISchemeHandler1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public generated string get_Url() [instance]
uString* FallbackWebViewClient::Url()
{
    return _Url;
}

// public generated void set_Url(string value) [instance]
void FallbackWebViewClient::Url(uString* value)
{
    _Url = value;
}

// public generated void add_UrlChanged(Uno.EventHandler value) [instance]
void FallbackWebViewClient::add_UrlChanged(uDelegate* value)
{
    UrlChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(UrlChanged1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public generated void remove_UrlChanged(Uno.EventHandler value) [instance]
void FallbackWebViewClient::remove_UrlChanged(uDelegate* value)
{
    UrlChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(UrlChanged1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public generated bool get_ZoomEnabled() [instance]
bool FallbackWebViewClient::ZoomEnabled()
{
    return _ZoomEnabled;
}

// public generated void set_ZoomEnabled(bool value) [instance]
void FallbackWebViewClient::ZoomEnabled(bool value)
{
    _ZoomEnabled = value;
}

// public FallbackWebViewClient New() [static]
FallbackWebViewClient* FallbackWebViewClient::New1()
{
    FallbackWebViewClient* obj1 = (FallbackWebViewClient*)uNew(FallbackWebViewClient_typeof());
    obj1->ctor_();
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Path.uno
// --------------------------------------------------------------------------------

// public enum FitMode
uEnumType* FitMode_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.FitMode", ::g::Uno::Int_typeof(), 3);
    type->SetLiterals(
        "GeometryMaximum", 0LL,
        "ShrinkToGeometry", 1LL,
        "Extents", 2LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/GraphicsView.ux.uno
// --------------------------------------------------------------------------------

// public partial class GraphicsView
// {
// static GraphicsView()
static void GraphicsView__cctor_3_fn(uType* __type)
{
}

static void GraphicsView_build(uType* type)
{
    type->SetDependencies(
        ::g::Fuse::Controls::DefaultTreeRenderer_typeof(),
        ::g::Fuse::Platform::Lifecycle_typeof(),
        ::g::Fuse::Platform::SystemUI_typeof(),
        ::g::Fuse::UpdateManager_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(GraphicsView_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(GraphicsView_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(GraphicsView_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(GraphicsView_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(GraphicsView_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(GraphicsView_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(GraphicsView_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(GraphicsView_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(GraphicsView_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(GraphicsView_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(GraphicsView_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(GraphicsView_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(GraphicsView_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(GraphicsView_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(GraphicsView_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(GraphicsView_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(GraphicsView_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(GraphicsView_type, interface17),
        ::g::Fuse::IViewport_typeof(), offsetof(GraphicsView_type, interface18),
        ::g::Fuse::IRenderViewport_typeof(), offsetof(GraphicsView_type, interface19),
        ::g::Fuse::Elements::ITreeRenderer_typeof(), offsetof(GraphicsView_type, interface20),
        ::g::Fuse::Controls::IProxyHost_typeof(), offsetof(GraphicsView_type, interface21),
        ::g::Fuse::ICommonViewport_typeof(), offsetof(GraphicsView_type, interface22));
    type->SetFields(108,
        ::g::Fuse::FrustumViewport_typeof(), offsetof(GraphicsView, _frustumViewport), 0,
        ::g::Fuse::OrthographicFrustum_typeof(), offsetof(GraphicsView, _frustum), 0,
        ::g::Fuse::DrawContext_typeof(), offsetof(GraphicsView, _dc), 0,
        ::g::Uno::Float4_typeof(), offsetof(GraphicsView, _color), 0,
        ::g::Uno::Bool_typeof(), offsetof(GraphicsView, _frameScheduled), 0,
        ::g::Uno::Bool_typeof(), offsetof(GraphicsView, _inBackground), 0,
        ::g::Uno::Int_typeof(), offsetof(GraphicsView, rotationHackRedrawCount), 0);
}

GraphicsView_type* GraphicsView_typeof()
{
    static uSStrong<GraphicsView_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::LayoutControl_typeof();
    options.FieldCount = 115;
    options.InterfaceCount = 23;
    options.DependencyCount = 4;
    options.ObjectSize = sizeof(GraphicsView);
    options.TypeSize = sizeof(GraphicsView_type);
    type = (GraphicsView_type*)uClassType::New("Fuse.Controls.GraphicsView", options);
    type->fp_build_ = GraphicsView_build;
    type->fp_cctor_ = GraphicsView__cctor_3_fn;
    type->fp_CalcRenderBounds = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::VisualBounds**))GraphicsView__CalcRenderBounds_fn;
    type->fp_DrawWithChildren = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::DrawContext*))GraphicsView__DrawWithChildren_fn;
    type->fp_OnInvalidateVisual = (void(*)(::g::Fuse::Visual*))GraphicsView__OnInvalidateVisual_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))GraphicsView__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))GraphicsView__OnUnrooted_fn;
    type->fp_get_TreeRenderer = (void(*)(::g::Fuse::Elements::Element*, uObject**))GraphicsView__get_TreeRenderer_fn;
    type->fp_get_VisualContext = (void(*)(::g::Fuse::Visual*, int32_t*))GraphicsView__get_VisualContext_fn;
    type->interface21.fp_Insert = (void(*)(uObject*, ::g::Fuse::Controls::Native::ViewHandle*))GraphicsView__FuseControlsIProxyHostInsert_fn;
    type->interface21.fp_Remove = (void(*)(uObject*, ::g::Fuse::Controls::Native::ViewHandle*))GraphicsView__FuseControlsIProxyHostRemove_fn;
    type->interface20.fp_RootingStarted = (void(*)(uObject*, ::g::Fuse::Elements::Element*))GraphicsView__FuseElementsITreeRendererRootingStarted_fn;
    type->interface20.fp_Rooted = (void(*)(uObject*, ::g::Fuse::Elements::Element*))GraphicsView__FuseElementsITreeRendererRooted_fn;
    type->interface20.fp_Unrooted = (void(*)(uObject*, ::g::Fuse::Elements::Element*))GraphicsView__FuseElementsITreeRendererUnrooted_fn;
    type->interface20.fp_BackgroundChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, ::g::Fuse::Drawing::Brush*))GraphicsView__FuseElementsITreeRendererBackgroundChanged_fn;
    type->interface20.fp_TransformChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*))GraphicsView__FuseElementsITreeRendererTransformChanged_fn;
    type->interface20.fp_Placed = (void(*)(uObject*, ::g::Fuse::Elements::Element*))GraphicsView__FuseElementsITreeRendererPlaced_fn;
    type->interface20.fp_IsVisibleChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, bool*))GraphicsView__FuseElementsITreeRendererIsVisibleChanged_fn;
    type->interface20.fp_IsEnabledChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, bool*))GraphicsView__FuseElementsITreeRendererIsEnabledChanged_fn;
    type->interface20.fp_OpacityChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, float*))GraphicsView__FuseElementsITreeRendererOpacityChanged_fn;
    type->interface20.fp_ClipToBoundsChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, bool*))GraphicsView__FuseElementsITreeRendererClipToBoundsChanged_fn;
    type->interface20.fp_HitTestModeChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, bool*))GraphicsView__FuseElementsITreeRendererHitTestModeChanged_fn;
    type->interface20.fp_RenderBoundsChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*))GraphicsView__FuseElementsITreeRendererRenderBoundsChanged_fn;
    type->interface20.fp_ZOrderChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, uArray*))GraphicsView__FuseElementsITreeRendererZOrderChanged_fn;
    type->interface20.fp_Measure = (void(*)(uObject*, ::g::Fuse::Elements::Element*, ::g::Fuse::LayoutParams*, ::g::Uno::Float2*, bool*))GraphicsView__FuseElementsITreeRendererMeasure_fn;
    type->interface21.fp_get_WorldTransformInverse = (void(*)(uObject*, ::g::Uno::Float4x4*))GraphicsView__FuseControlsIProxyHostget_WorldTransformInverse_fn;
    type->interface18.fp_PointToWorldRay = (void(*)(uObject*, ::g::Uno::Float2*, ::g::Fuse::Ray*))GraphicsView__PointToWorldRay_fn;
    type->interface18.fp_WorldToLocalRay = (void(*)(uObject*, uObject*, ::g::Fuse::Ray*, ::g::Fuse::Visual*, ::g::Fuse::Ray*))GraphicsView__WorldToLocalRay_fn;
    type->interface19.fp_get_ViewProjectionTransform = (void(*)(uObject*, ::g::Uno::Float4x4*))GraphicsView__get_ViewProjectionTransform_fn;
    type->interface22.fp_get_PixelsPerPoint = (void(*)(uObject*, float*))GraphicsView__get_PixelsPerPoint_fn;
    type->interface22.fp_get_Size = (void(*)(uObject*, ::g::Uno::Float2*))GraphicsView__get_Size1_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public GraphicsView()
void GraphicsView__ctor_6_fn(GraphicsView* __this)
{
    __this->ctor_6();
}

// private Fuse.Elements.ITreeRenderer get_BaseTreeRenderer()
void GraphicsView__get_BaseTreeRenderer_fn(GraphicsView* __this, uObject** __retval)
{
    *__retval = __this->BaseTreeRenderer();
}

// protected override sealed Fuse.VisualBounds CalcRenderBounds()
void GraphicsView__CalcRenderBounds_fn(GraphicsView* __this, ::g::Fuse::VisualBounds** __retval)
{
    ::g::Fuse::VisualBounds* ret2;
    return *__retval = uPtr((::g::Fuse::Controls::Control__CalcRenderBounds_fn(__this, &ret2), ret2))->AddRect(::g::Uno::Float2__New1(0.0f), __this->ActualSize()), void();
}

// public float4 get_Color()
void GraphicsView__get_Color_fn(GraphicsView* __this, ::g::Uno::Float4* __retval)
{
    *__retval = __this->Color();
}

// public void set_Color(float4 value)
void GraphicsView__set_Color_fn(GraphicsView* __this, ::g::Uno::Float4* value)
{
    __this->Color(*value);
}

// private void DrawFrame()
void GraphicsView__DrawFrame_fn(GraphicsView* __this)
{
    __this->DrawFrame();
}

// protected override sealed void DrawWithChildren(Fuse.DrawContext dc)
void GraphicsView__DrawWithChildren_fn(GraphicsView* __this, ::g::Fuse::DrawContext* dc)
{
    if (!__this->_inBackground)
        ::g::Fuse::Elements::Element__DrawWithChildren_fn(__this, dc);
}

// private void Fuse.Controls.IProxyHost.Insert(Fuse.Controls.Native.ViewHandle viewHandle)
void GraphicsView__FuseControlsIProxyHostInsert_fn(GraphicsView* __this, ::g::Fuse::Controls::Native::ViewHandle* viewHandle)
{
    uObject* vh = uAs<uObject*>(__this->NativeView(), ::g::Fuse::Controls::Native::IViewHost_typeof());

    if (vh != nullptr)
        ::g::Fuse::Controls::Native::IViewHost::Insert(uInterface(uPtr(vh), ::g::Fuse::Controls::Native::IViewHost_typeof()), viewHandle);
    else
        ::g::Fuse::Diagnostics::InternalError(::g::Uno::String::op_Addition(__this, uString::Const(" does not have a NativeView: IViewHost")), nullptr, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/GraphicsView.ux.uno"), 147, uString::Const("Fuse.Controls.IProxyHost.Insert"));
}

// private void Fuse.Controls.IProxyHost.Remove(Fuse.Controls.Native.ViewHandle viewHandle)
void GraphicsView__FuseControlsIProxyHostRemove_fn(GraphicsView* __this, ::g::Fuse::Controls::Native::ViewHandle* viewHandle)
{
    uObject* vh = uAs<uObject*>(__this->NativeView(), ::g::Fuse::Controls::Native::IViewHost_typeof());

    if (vh != nullptr)
        ::g::Fuse::Controls::Native::IViewHost::Remove(uInterface(uPtr(vh), ::g::Fuse::Controls::Native::IViewHost_typeof()), viewHandle);
    else
        ::g::Fuse::Diagnostics::InternalError(::g::Uno::String::op_Addition(__this, uString::Const(" does not have a NativeView: IViewHost")), nullptr, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/GraphicsView.ux.uno"), 159, uString::Const("Fuse.Controls.IProxyHost.Remove"));
}

// private float4x4 Fuse.Controls.IProxyHost.get_WorldTransformInverse()
void GraphicsView__FuseControlsIProxyHostget_WorldTransformInverse_fn(GraphicsView* __this, ::g::Uno::Float4x4* __retval)
{
    return *__retval = __this->WorldTransformInverse(), void();
}

// private void Fuse.Elements.ITreeRenderer.BackgroundChanged(Fuse.Elements.Element e, Fuse.Drawing.Brush background)
void GraphicsView__FuseElementsITreeRendererBackgroundChanged_fn(GraphicsView* __this, ::g::Fuse::Elements::Element* e, ::g::Fuse::Drawing::Brush* background)
{
    uPtr(::g::Fuse::Controls::DefaultTreeRenderer::Instance())->BackgroundChanged(e, background);
}

// private void Fuse.Elements.ITreeRenderer.ClipToBoundsChanged(Fuse.Elements.Element e, bool clipToBounds)
void GraphicsView__FuseElementsITreeRendererClipToBoundsChanged_fn(GraphicsView* __this, ::g::Fuse::Elements::Element* e, bool* clipToBounds)
{
    bool clipToBounds_ = *clipToBounds;
    ::g::Fuse::Elements::ITreeRenderer::ClipToBoundsChanged(uInterface(uPtr(__this->GetTreeRenderer(e)), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e, clipToBounds_);
}

// private void Fuse.Elements.ITreeRenderer.HitTestModeChanged(Fuse.Elements.Element e, bool enabled)
void GraphicsView__FuseElementsITreeRendererHitTestModeChanged_fn(GraphicsView* __this, ::g::Fuse::Elements::Element* e, bool* enabled)
{
    bool enabled_ = *enabled;
    ::g::Fuse::Elements::ITreeRenderer::HitTestModeChanged(uInterface(uPtr(__this->GetTreeRenderer(e)), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e, enabled_);
}

// private void Fuse.Elements.ITreeRenderer.IsEnabledChanged(Fuse.Elements.Element e, bool isEnabled)
void GraphicsView__FuseElementsITreeRendererIsEnabledChanged_fn(GraphicsView* __this, ::g::Fuse::Elements::Element* e, bool* isEnabled)
{
    bool isEnabled_ = *isEnabled;
    ::g::Fuse::Elements::ITreeRenderer::IsEnabledChanged(uInterface(uPtr(__this->GetTreeRenderer(e)), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e, isEnabled_);
}

// private void Fuse.Elements.ITreeRenderer.IsVisibleChanged(Fuse.Elements.Element e, bool isVisible)
void GraphicsView__FuseElementsITreeRendererIsVisibleChanged_fn(GraphicsView* __this, ::g::Fuse::Elements::Element* e, bool* isVisible)
{
    bool isVisible_ = *isVisible;
    ::g::Fuse::Elements::ITreeRenderer::IsVisibleChanged(uInterface(uPtr(__this->GetTreeRenderer(e)), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e, isVisible_);
}

// private bool Fuse.Elements.ITreeRenderer.Measure(Fuse.Elements.Element e, Fuse.LayoutParams lp, float2& size)
void GraphicsView__FuseElementsITreeRendererMeasure_fn(GraphicsView* __this, ::g::Fuse::Elements::Element* e, ::g::Fuse::LayoutParams* lp, ::g::Uno::Float2* size, bool* __retval)
{
    ::g::Fuse::LayoutParams lp_ = *lp;
    return *__retval = ::g::Fuse::Elements::ITreeRenderer::Measure(uInterface(uPtr(__this->GetTreeRenderer(e)), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e, lp_, size), void();
}

// private void Fuse.Elements.ITreeRenderer.OpacityChanged(Fuse.Elements.Element e, float opacity)
void GraphicsView__FuseElementsITreeRendererOpacityChanged_fn(GraphicsView* __this, ::g::Fuse::Elements::Element* e, float* opacity)
{
    float opacity_ = *opacity;
    ::g::Fuse::Elements::ITreeRenderer::OpacityChanged(uInterface(uPtr(__this->GetTreeRenderer(e)), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e, opacity_);
}

// private void Fuse.Elements.ITreeRenderer.Placed(Fuse.Elements.Element e)
void GraphicsView__FuseElementsITreeRendererPlaced_fn(GraphicsView* __this, ::g::Fuse::Elements::Element* e)
{
    ::g::Fuse::Elements::ITreeRenderer::Placed(uInterface(uPtr(__this->GetTreeRenderer(e)), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e);
}

// private void Fuse.Elements.ITreeRenderer.RenderBoundsChanged(Fuse.Elements.Element e)
void GraphicsView__FuseElementsITreeRendererRenderBoundsChanged_fn(GraphicsView* __this, ::g::Fuse::Elements::Element* e)
{
    ::g::Fuse::Elements::ITreeRenderer::RenderBoundsChanged(uInterface(uPtr(__this->GetTreeRenderer(e)), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e);
}

// private void Fuse.Elements.ITreeRenderer.Rooted(Fuse.Elements.Element e)
void GraphicsView__FuseElementsITreeRendererRooted_fn(GraphicsView* __this, ::g::Fuse::Elements::Element* e)
{
    ::g::Fuse::Elements::ITreeRenderer::Rooted(uInterface(uPtr(__this->GetTreeRenderer(e)), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e);
}

// private void Fuse.Elements.ITreeRenderer.RootingStarted(Fuse.Elements.Element e)
void GraphicsView__FuseElementsITreeRendererRootingStarted_fn(GraphicsView* __this, ::g::Fuse::Elements::Element* e)
{
    ::g::Fuse::Elements::ITreeRenderer::RootingStarted(uInterface(uPtr(__this->GetTreeRenderer(e)), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e);
}

// private void Fuse.Elements.ITreeRenderer.TransformChanged(Fuse.Elements.Element e)
void GraphicsView__FuseElementsITreeRendererTransformChanged_fn(GraphicsView* __this, ::g::Fuse::Elements::Element* e)
{
    ::g::Fuse::Elements::ITreeRenderer::TransformChanged(uInterface(uPtr(__this->GetTreeRenderer(e)), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e);
}

// private void Fuse.Elements.ITreeRenderer.Unrooted(Fuse.Elements.Element e)
void GraphicsView__FuseElementsITreeRendererUnrooted_fn(GraphicsView* __this, ::g::Fuse::Elements::Element* e)
{
    ::g::Fuse::Elements::ITreeRenderer::Unrooted(uInterface(uPtr(__this->GetTreeRenderer(e)), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e);
}

// private void Fuse.Elements.ITreeRenderer.ZOrderChanged(Fuse.Elements.Element e, Fuse.Visual[] zorder)
void GraphicsView__FuseElementsITreeRendererZOrderChanged_fn(GraphicsView* __this, ::g::Fuse::Elements::Element* e, uArray* zorder)
{
}

// private Fuse.Elements.ITreeRenderer GetTreeRenderer(Fuse.Elements.Element e)
void GraphicsView__GetTreeRenderer_fn(GraphicsView* __this, ::g::Fuse::Elements::Element* e, uObject** __retval)
{
    *__retval = __this->GetTreeRenderer(e);
}

// private void InitializeUX()
void GraphicsView__InitializeUX_fn(GraphicsView* __this)
{
    __this->InitializeUX();
}

// private void OnEnteringBackground(Fuse.Platform.ApplicationState s)
void GraphicsView__OnEnteringBackground_fn(GraphicsView* __this, int32_t* s)
{
    __this->OnEnteringBackground(*s);
}

// private void OnEnteringForeground(Fuse.Platform.ApplicationState s)
void GraphicsView__OnEnteringForeground_fn(GraphicsView* __this, int32_t* s)
{
    __this->OnEnteringForeground(*s);
}

// protected override sealed void OnInvalidateVisual()
void GraphicsView__OnInvalidateVisual_fn(GraphicsView* __this)
{
    ::g::Fuse::Controls::Control__OnInvalidateVisual_fn(__this);
    __this->ScheduleFrame();
}

// private void OnResized(object sender, Uno.EventArgs args)
void GraphicsView__OnResized_fn(GraphicsView* __this, uObject* sender, ::g::Uno::EventArgs* args)
{
    __this->OnResized(sender, args);
}

// protected override sealed void OnRooted()
void GraphicsView__OnRooted_fn(GraphicsView* __this)
{
    ::g::Fuse::Controls::LayoutControl__OnRooted_fn(__this);
    __this->_dc = ::g::Fuse::DrawContext::New1((uObject*)__this);
    ::g::Fuse::Platform::SystemUI::add_FrameChanged(uDelegate::New(::TYPES[29/*Uno.EventHandler*/], (void*)GraphicsView__OnResized_fn, __this));
    __this->rotationHackRedrawCount = 5;
    ::g::Fuse::Platform::Lifecycle::add_EnteringForeground(uDelegate::New(::g::Uno::Action1_typeof()->MakeType(::g::Fuse::Platform::ApplicationState_typeof(), nullptr), (void*)GraphicsView__OnEnteringForeground_fn, __this));
    ::g::Fuse::Platform::Lifecycle::add_EnteringBackground(uDelegate::New(::g::Uno::Action1_typeof()->MakeType(::g::Fuse::Platform::ApplicationState_typeof(), nullptr), (void*)GraphicsView__OnEnteringBackground_fn, __this));
}

// protected override sealed void OnUnrooted()
void GraphicsView__OnUnrooted_fn(GraphicsView* __this)
{
    ::g::Fuse::Controls::LayoutControl__OnUnrooted_fn(__this);
    ::g::Fuse::Platform::SystemUI::remove_FrameChanged(uDelegate::New(::TYPES[29/*Uno.EventHandler*/], (void*)GraphicsView__OnResized_fn, __this));
    __this->_dc = nullptr;
    ::g::Fuse::Platform::Lifecycle::remove_EnteringForeground(uDelegate::New(::g::Uno::Action1_typeof()->MakeType(::g::Fuse::Platform::ApplicationState_typeof(), nullptr), (void*)GraphicsView__OnEnteringForeground_fn, __this));
    ::g::Fuse::Platform::Lifecycle::remove_EnteringBackground(uDelegate::New(::g::Uno::Action1_typeof()->MakeType(::g::Fuse::Platform::ApplicationState_typeof(), nullptr), (void*)GraphicsView__OnEnteringBackground_fn, __this));
}

// public float get_PixelsPerPoint()
void GraphicsView__get_PixelsPerPoint_fn(GraphicsView* __this, float* __retval)
{
    *__retval = __this->PixelsPerPoint();
}

// public Fuse.Ray PointToWorldRay(float2 pixelPos)
void GraphicsView__PointToWorldRay_fn(GraphicsView* __this, ::g::Uno::Float2* pixelPos, ::g::Fuse::Ray* __retval)
{
    *__retval = __this->PointToWorldRay(*pixelPos);
}

// private void ScheduleFrame()
void GraphicsView__ScheduleFrame_fn(GraphicsView* __this)
{
    __this->ScheduleFrame();
}

// public new float2 get_Size()
void GraphicsView__get_Size1_fn(GraphicsView* __this, ::g::Uno::Float2* __retval)
{
    *__retval = __this->Size1();
}

// public override sealed Fuse.Elements.ITreeRenderer get_TreeRenderer()
void GraphicsView__get_TreeRenderer_fn(GraphicsView* __this, uObject** __retval)
{
    return *__retval = (uObject*)__this, void();
}

// public float4x4 get_ViewProjectionTransform()
void GraphicsView__get_ViewProjectionTransform_fn(GraphicsView* __this, ::g::Uno::Float4x4* __retval)
{
    *__retval = __this->ViewProjectionTransform();
}

// public override sealed Fuse.VisualContext get_VisualContext()
void GraphicsView__get_VisualContext_fn(GraphicsView* __this, int32_t* __retval)
{
    return *__retval = 1, void();
}

// public Fuse.Ray WorldToLocalRay(Fuse.IViewport world, Fuse.Ray worldRay, Fuse.Visual where)
void GraphicsView__WorldToLocalRay_fn(GraphicsView* __this, uObject* world, ::g::Fuse::Ray* worldRay, ::g::Fuse::Visual* where, ::g::Fuse::Ray* __retval)
{
    *__retval = __this->WorldToLocalRay(world, *worldRay, where);
}

// public GraphicsView() [instance]
void GraphicsView::ctor_6()
{
    _frustum = ::g::Fuse::OrthographicFrustum::New1();
    _color = ::g::Uno::Float4__New2(0.0f, 0.0f, 0.0f, 0.0f);
    ctor_5();
    InitializeUX();
    _frustumViewport = ::g::Fuse::FrustumViewport::New1();
    uPtr(_frustumViewport)->Update((uObject*)this, (uObject*)_frustum);
}

// private Fuse.Elements.ITreeRenderer get_BaseTreeRenderer() [instance]
uObject* GraphicsView::BaseTreeRenderer()
{
    uObject* ret3;
    return (::g::Fuse::Elements::Element__get_TreeRenderer_fn(this, &ret3), ret3);
}

// public float4 get_Color() [instance]
::g::Uno::Float4 GraphicsView::Color()
{
    return _color;
}

// public void set_Color(float4 value) [instance]
void GraphicsView::Color(::g::Uno::Float4 value)
{
    if (::g::Uno::Float4__op_Inequality(_color, value))
    {
        _color = value;
        InvalidateVisual();
    }
}

// private void DrawFrame() [instance]
void GraphicsView::DrawFrame()
{
    if (_inBackground || !IsRootingCompleted())
        return;

    _frameScheduled = false;
    uObject* gv = uAs<uObject*>(NativeView(), ::g::Fuse::Controls::Native::IGraphicsView_typeof());

    if (gv != nullptr)
    {
        uPtr(_frustum)->LocalFromWorld(WorldTransformInverse());
        uPtr(_frustumViewport)->Update((uObject*)this, (uObject*)_frustum);
        ::g::Uno::Int2 size = ::g::Uno::Int2__New2((int32_t)(ActualSize().X * PixelsPerPoint()), (int32_t)(ActualSize().Y * PixelsPerPoint()));

        if (::g::Fuse::Controls::Native::IGraphicsView::BeginDraw(uInterface(uPtr(gv), ::g::Fuse::Controls::Native::IGraphicsView_typeof()), size))
        {
            double t;
            ::g::Fuse::Internal::DrawManager::PrepareDraw(_dc);
            uPtr(_dc)->PushViewport((uObject*)this);
            uPtr(_dc)->PushScissor(::g::Uno::Recti__New1(0, 0, size.X, size.Y));
            uPtr(_dc)->Clear(Color(), 1.0f);
            Draw(_dc);
            uPtr(_dc)->PopScissor();
            uPtr(_dc)->PopViewport();
            ::g::Fuse::Internal::DrawManager::EndDraw(_dc);
            ::g::Fuse::Controls::Native::IGraphicsView::EndDraw(uInterface(uPtr(gv), ::g::Fuse::Controls::Native::IGraphicsView_typeof()));
        }

        if (rotationHackRedrawCount > 0)
        {
            ScheduleFrame();
            rotationHackRedrawCount = (rotationHackRedrawCount - 1);
        }
    }
}

// private Fuse.Elements.ITreeRenderer GetTreeRenderer(Fuse.Elements.Element e) [instance]
uObject* GraphicsView::GetTreeRenderer(::g::Fuse::Elements::Element* e)
{
    if (((e == this) && (uPtr(e)->Parent() != nullptr)) && (uPtr(uPtr(e)->Parent())->VisualContext() == 2))
        return BaseTreeRenderer();
    else
        return (uObject*)::g::Fuse::Controls::DefaultTreeRenderer::Instance();
}

// private void InitializeUX() [instance]
void GraphicsView::InitializeUX()
{
    GraphicsView__Template* AndroidAppearance = GraphicsView__Template::New2(this, this);
    GraphicsView__Template1* iOSAppearance = GraphicsView__Template1::New2(this, this);
    SourceLineNumber(1);
    SourceFileName(uString::Const("GraphicsView.ux"));
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(Templates()), ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Uno::UX::Template_typeof(), nullptr)), AndroidAppearance);
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(Templates()), ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Uno::UX::Template_typeof(), nullptr)), iOSAppearance);
}

// private void OnEnteringBackground(Fuse.Platform.ApplicationState s) [instance]
void GraphicsView::OnEnteringBackground(int32_t s)
{
    _inBackground = true;
}

// private void OnEnteringForeground(Fuse.Platform.ApplicationState s) [instance]
void GraphicsView::OnEnteringForeground(int32_t s)
{
    rotationHackRedrawCount = 2;
    _inBackground = false;
    _frameScheduled = false;
    ScheduleFrame();
    ::g::Fuse::UpdateManager::PerformNextFrame(uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)::g::Fuse::Visual__InvalidateVisual_fn, this), 0, 1);
}

// private void OnResized(object sender, Uno.EventArgs args) [instance]
void GraphicsView::OnResized(uObject* sender, ::g::Uno::EventArgs* args)
{
    rotationHackRedrawCount = 5;
}

// public float get_PixelsPerPoint() [instance]
float GraphicsView::PixelsPerPoint()
{
    if (Parent() != nullptr)
        return ::g::Fuse::ICommonViewport::PixelsPerPoint(uInterface(uPtr(uPtr(Parent())->Viewport()), ::TYPES[36/*Fuse.ICommonViewport*/]));
    else
    {
        if (::g::Fuse::AppBase::Current2() == nullptr)
            return 1.0f;

        return uPtr(::g::Fuse::AppBase::Current2())->PixelsPerPoint();
    }
}

// public Fuse.Ray PointToWorldRay(float2 pixelPos) [instance]
::g::Fuse::Ray GraphicsView::PointToWorldRay(::g::Uno::Float2 pixelPos)
{
    return ::g::Fuse::ViewportHelpers::PointToWorldRay((uObject*)this, uPtr(_frustumViewport)->ViewProjectionTransformInverse, pixelPos);
}

// private void ScheduleFrame() [instance]
void GraphicsView::ScheduleFrame()
{
    if (!_frameScheduled)
    {
        ::g::Fuse::UpdateManager::AddOnceAction(uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)GraphicsView__DrawFrame_fn, this), 2);
        _frameScheduled = true;
    }
}

// public new float2 get_Size() [instance]
::g::Uno::Float2 GraphicsView::Size1()
{
    return ActualSize();
}

// public float4x4 get_ViewProjectionTransform() [instance]
::g::Uno::Float4x4 GraphicsView::ViewProjectionTransform()
{
    return uPtr(_frustumViewport)->ViewProjectionTransform;
}

// public Fuse.Ray WorldToLocalRay(Fuse.IViewport world, Fuse.Ray worldRay, Fuse.Visual where) [instance]
::g::Fuse::Ray GraphicsView::WorldToLocalRay(uObject* world, ::g::Fuse::Ray worldRay, ::g::Fuse::Visual* where)
{
    return ::g::Fuse::ViewportHelpers::WorldToLocalRay((uObject*)this, world, worldRay, where);
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Curve.uno
// ---------------------------------------------------------------------------------

// private enum CurvePoint.HasFlags
uEnumType* CurvePoint__HasFlags_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.CurvePoint.HasFlags", ::g::Uno::Int_typeof(), 7);
    type->SetLiterals(
        "None", 0LL,
        "X", 1LL,
        "Y", 2LL,
        "TangentIn", 4LL,
        "TangentOut", 8LL,
        "ControlIn", 16LL,
        "ControlOut", 32LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.DatePicker/DatePicker.uno
// -------------------------------------------------------------------------------

// internal abstract interface IDatePickerView
// {
uInterfaceType* IDatePickerView_typeof()
{
    static uSStrong<uInterfaceType*> type;
    if (type != nullptr) return type;

    type = uInterfaceType::New("Fuse.Controls.IDatePickerView", 0, 0);
    return type;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Image.Visual.uno
// ---------------------------------------------------------------------------------

// public partial sealed class Image
// {
// static Image()
static void Image__cctor_3_fn(uType* __type)
{
    ::g::Fuse::Scripting::ScriptClass_typeof()->Init();
    ::g::Fuse::Scripting::ScriptClass::Register(__type, uArray::Init< ::g::Fuse::Scripting::ScriptMember*>(::TYPES[19/*Fuse.Scripting.ScriptMember[]*/], 4, (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New2(::TYPES[31/*Fuse.Scripting.ScriptMethod<Fuse.Controls.Image>*/], ::STRINGS[32/*"load"*/], uDelegate::New(::TYPES[32/*Uno.Action<Fuse.Controls.Image>*/], (void*)Image__load_fn)), (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New2(::TYPES[31/*Fuse.Scripting.ScriptMethod<Fuse.Controls.Image>*/], ::STRINGS[33/*"reload"*/], uDelegate::New(::TYPES[32/*Uno.Action<Fuse.Controls.Image>*/], (void*)Image__reload_fn)), (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New2(::TYPES[31/*Fuse.Scripting.ScriptMethod<Fuse.Controls.Image>*/], ::STRINGS[34/*"retry"*/], uDelegate::New(::TYPES[32/*Uno.Action<Fuse.Controls.Image>*/], (void*)Image__retry_fn)), (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New2(::TYPES[31/*Fuse.Scripting.ScriptMethod<Fuse.Controls.Image>*/], ::STRINGS[35/*"clearCache"*/], uDelegate::New(::TYPES[32/*Uno.Action<Fuse.Controls.Image>*/], (void*)Image__clearCache_fn))));
}

static void Image_build(uType* type)
{
    ::STRINGS[32] = uString::Const("load");
    ::STRINGS[33] = uString::Const("reload");
    ::STRINGS[34] = uString::Const("retry");
    ::STRINGS[35] = uString::Const("clearCache");
    ::STRINGS[36] = uString::Const("unknown failure");
    ::STRINGS[5] = uString::Const("");
    ::TYPES[18] = ::g::Uno::Type_typeof();
    ::TYPES[19] = ::g::Fuse::Scripting::ScriptMember_typeof()->Array();
    ::TYPES[31] = ::g::Fuse::Scripting::ScriptMethod1_typeof()->MakeType(type, nullptr);
    ::TYPES[32] = ::g::Uno::Action1_typeof()->MakeType(type, nullptr);
    ::TYPES[33] = ::g::Fuse::Resources::HttpImageSource_typeof();
    ::TYPES[29] = ::g::Uno::EventHandler_typeof();
    ::TYPES[34] = ::g::Fuse::Resources::ImageSourceErrorHandler_typeof();
    ::TYPES[35] = ::g::Fuse::Controls::Native::IImageView_typeof();
    ::TYPES[36] = ::g::Fuse::ICommonViewport_typeof();
    type->SetDependencies(
        ::g::Fuse::Triggers::BusyTask_typeof(),
        ::g::Uno::EventArgs_typeof(),
        ::g::Fuse::Controls::ImageElementDraw_typeof(),
        ::g::Uno::Math_typeof(),
        ::g::Fuse::Elements::Internal::Scale9Rectangle_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface17));
    type->SetFields(108,
        ::g::Uno::Float2_typeof(), offsetof(Image, _origin), 0,
        ::g::Uno::Float2_typeof(), offsetof(Image, _scale), 0,
        ::g::Uno::Float2_typeof(), offsetof(Image, _drawOrigin), 0,
        ::g::Uno::Float2_typeof(), offsetof(Image, _drawSize), 0,
        ::g::Uno::Float4_typeof(), offsetof(Image, _uvClip), 0,
        ::g::Fuse::Internal::ImageContainer_typeof(), offsetof(Image, _container), 0,
        ::g::Fuse::Resources::ImageSourceErrorArgs_typeof(), offsetof(Image, _lastError), 0,
        ::g::Uno::Float4_typeof(), offsetof(Image, _color), 0,
        ::g::Uno::Float4_typeof(), offsetof(Image, _scale9Margin), 0,
        ::g::Uno::Bool_typeof(), offsetof(Image, _hasScale9Margin), 0,
        ::g::Uno::Bool_typeof(), offsetof(Image, _isLoaded), 0,
        ::g::Uno::Bool_typeof(), offsetof(Image, _autoLoad), 0,
        ::g::Fuse::Triggers::BusyTask_typeof(), offsetof(Image, _loadingTask), 0,
        ::g::Uno::Bool_typeof(), offsetof(Image, _markedFailed), 0,
        ::g::Uno::Bool_typeof(), offsetof(Image, _hasContentBox), 0,
        ::g::Uno::Float4_typeof(), offsetof(Image, _contentBox), 0,
        ::TYPES[29/*Uno.EventHandler*/], offsetof(Image, ParamChanged1), 0,
        ::TYPES[29/*Uno.EventHandler*/], offsetof(Image, SourceChanged1), 0);
}

::g::Fuse::Controls::Control_type* Image_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Control_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::LayoutControl_typeof();
    options.FieldCount = 126;
    options.InterfaceCount = 18;
    options.DependencyCount = 5;
    options.ObjectSize = sizeof(Image);
    options.TypeSize = sizeof(::g::Fuse::Controls::Control_type);
    type = (::g::Fuse::Controls::Control_type*)uClassType::New("Fuse.Controls.Image", options);
    type->fp_build_ = Image_build;
    type->fp_cctor_ = Image__cctor_3_fn;
    type->fp_ArrangePaddingBox = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::LayoutParams*))Image__ArrangePaddingBox_fn;
    type->fp_CalcRenderBounds = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::VisualBounds**))Image__CalcRenderBounds_fn;
    type->fp_CreateNativeView = (void(*)(::g::Fuse::Controls::Control*, uObject**))Image__CreateNativeView_fn;
    type->fp_DrawVisual = (void(*)(::g::Fuse::Controls::Control*, ::g::Fuse::DrawContext*))Image__DrawVisual_fn;
    type->fp_FastTrackDrawWithOpacity = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::DrawContext*, bool*))Image__FastTrackDrawWithOpacity_fn;
    type->fp_GetContentSize = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::LayoutParams*, ::g::Uno::Float2*))Image__GetContentSize_fn;
    type->fp_get_HitTestLocalVisualBounds = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::VisualBounds**))Image__get_HitTestLocalVisualBounds_fn;
    type->fp_OnHitTestLocalVisual = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::HitTestContext*))Image__OnHitTestLocalVisual_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))Image__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))Image__OnUnrooted_fn;
    type->fp_PushPropertiesToNativeView = (void(*)(::g::Fuse::Controls::Control*))Image__PushPropertiesToNativeView_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// protected override sealed void ArrangePaddingBox(Fuse.LayoutParams lp)
void Image__ArrangePaddingBox_fn(Image* __this, ::g::Fuse::LayoutParams* lp)
{
    ::g::Fuse::LayoutParams lp_ = *lp;
    ::g::Fuse::Controls::LayoutControl__ArrangePaddingBox_fn(__this, uCRef(lp_));
    ::g::Uno::Float2 size = lp_.Size();
    uPtr(uPtr(__this->Container())->Sizing)->snapToPixels = __this->SnapToPixels();
    uPtr(uPtr(__this->Container())->Sizing)->absoluteZoom = __this->AbsoluteZoom();
    ::g::Uno::Float2 contentDesiredSize = __this->GetSize();
    __this->_scale = uPtr(uPtr(__this->Container())->Sizing)->CalcScale(size, contentDesiredSize);
    __this->_origin = uPtr(uPtr(__this->Container())->Sizing)->CalcOrigin(size, ::g::Uno::Float2__op_Multiply2(contentDesiredSize, __this->_scale));
    __this->_drawOrigin = __this->_origin;
    __this->_drawSize = ::g::Uno::Float2__op_Multiply2(contentDesiredSize, __this->_scale);
    __this->_uvClip = uPtr(uPtr(__this->Container())->Sizing)->CalcClip(size, &__this->_drawOrigin, &__this->_drawSize);
    __this->InvalidateRenderBounds();
    __this->SetContentBox(::g::Uno::Float4__New7(__this->_drawOrigin, ::g::Uno::Float2__op_Addition2(__this->_drawOrigin, __this->_drawSize)));
    __this->UpdateNativeImageTransform();
}

// public bool get_AutoLoad()
void Image__get_AutoLoad_fn(Image* __this, bool* __retval)
{
    *__retval = __this->AutoLoad();
}

// public void set_AutoLoad(bool value)
void Image__set_AutoLoad_fn(Image* __this, bool* value)
{
    __this->AutoLoad(*value);
}

// protected override sealed Fuse.VisualBounds CalcRenderBounds()
void Image__CalcRenderBounds_fn(Image* __this, ::g::Fuse::VisualBounds** __retval)
{
    ::g::Fuse::VisualBounds* ret10;
    ::g::Fuse::VisualBounds* b = (::g::Fuse::Controls::Control__CalcRenderBounds_fn(__this, &ret10), ret10);
    b = uPtr(b)->AddRect(__this->_drawOrigin, ::g::Uno::Float2__op_Addition2(__this->_drawOrigin, __this->_drawSize));
    return *__retval = b, void();
}

// private static void clearCache(Fuse.Controls.Image img)
void Image__clearCache_fn(Image* img)
{
    Image::clearCache(img);
}

// public float4 get_Color()
void Image__get_Color_fn(Image* __this, ::g::Uno::Float4* __retval)
{
    *__retval = __this->Color();
}

// public void set_Color(float4 value)
void Image__set_Color_fn(Image* __this, ::g::Uno::Float4* value)
{
    __this->Color(*value);
}

// internal Fuse.Internal.ImageContainer get_Container()
void Image__get_Container_fn(Image* __this, ::g::Fuse::Internal::ImageContainer** __retval)
{
    *__retval = __this->Container();
}

// protected override sealed Fuse.Controls.Native.IView CreateNativeView()
void Image__CreateNativeView_fn(Image* __this, uObject** __retval)
{
    return *__retval = (uObject*)::g::Fuse::Controls::Native::Android::ImageView::New5(), void();
}

// protected override sealed void DrawVisual(Fuse.DrawContext dc)
void Image__DrawVisual_fn(Image* __this, ::g::Fuse::DrawContext* dc)
{
    __this->DrawVisualColor(dc, __this->Color());
}

// private void DrawVisualColor(Fuse.DrawContext dc, float4 color)
void Image__DrawVisualColor_fn(Image* __this, ::g::Fuse::DrawContext* dc, ::g::Uno::Float4* color)
{
    __this->DrawVisualColor(dc, *color);
}

// protected override sealed bool FastTrackDrawWithOpacity(Fuse.DrawContext dc)
void Image__FastTrackDrawWithOpacity_fn(Image* __this, ::g::Fuse::DrawContext* dc, bool* __retval)
{
    ::g::Uno::Float4 ind1;
    bool ret11;

    if (!(::g::Fuse::Controls::LayoutControl__FastTrackDrawWithOpacity_fn(__this, dc, &ret11), ret11))
        return *__retval = false, void();

    __this->DrawVisualColor(dc, ::g::Uno::Float4__New8((ind1 = __this->Color(), ::g::Uno::Float3__New2(ind1.X, ind1.Y, ind1.Z)), __this->Color().W * __this->Opacity()));
    return *__retval = true, void();
}

// protected override sealed float2 GetContentSize(Fuse.LayoutParams lp)
void Image__GetContentSize_fn(Image* __this, ::g::Fuse::LayoutParams* lp, ::g::Uno::Float2* __retval)
{
    ::g::Uno::Float2 ret12;
    ::g::Fuse::LayoutParams lp_ = *lp;
    ::g::Uno::Float2 b = (::g::Fuse::Controls::LayoutControl__GetContentSize_fn(__this, uCRef(lp_), &ret12), ret12);
    uPtr(uPtr(__this->Container())->Sizing)->snapToPixels = __this->SnapToPixels();
    uPtr(uPtr(__this->Container())->Sizing)->absoluteZoom = __this->AbsoluteZoom();
    ::g::Uno::Float2 r = uPtr(uPtr(__this->Container())->Sizing)->ExpandFillSize(__this->GetSize(), lp_);
    b = ::g::Uno::Math::Max3(r, b);
    return *__retval = b, void();
}

// private float2 GetSize()
void Image__GetSize_fn(Image* __this, ::g::Uno::Float2* __retval)
{
    *__retval = __this->GetSize();
}

// protected override sealed Fuse.VisualBounds get_HitTestLocalVisualBounds()
void Image__get_HitTestLocalVisualBounds_fn(Image* __this, ::g::Fuse::VisualBounds** __retval)
{
    ::g::Fuse::VisualBounds* ret13;
    ::g::Fuse::VisualBounds* b = (::g::Fuse::Controls::Control__get_HitTestLocalVisualBounds_fn(__this, &ret13), ret13);
    b = uPtr(b)->AddRect(::g::Uno::Float2__New1(0.0f), __this->ActualSize());
    return *__retval = b, void();
}

// private Fuse.Controls.Native.IImageView get_ImageView()
void Image__get_ImageView_fn(Image* __this, uObject** __retval)
{
    *__retval = __this->ImageView();
}

// public bool get_IsLoaded()
void Image__get_IsLoaded_fn(Image* __this, bool* __retval)
{
    *__retval = __this->IsLoaded();
}

// private static void load(Fuse.Controls.Image img)
void Image__load_fn(Image* img)
{
    Image::load(img);
}

// public void Load()
void Image__Load_fn(Image* __this)
{
    __this->Load();
}

// private void OnContainerParamChanged(object s, object a)
void Image__OnContainerParamChanged_fn(Image* __this, uObject* s, uObject* a)
{
    __this->OnContainerParamChanged(s, a);
}

// private void OnContainerSourceChanged(object s, object a)
void Image__OnContainerSourceChanged_fn(Image* __this, uObject* s, uObject* a)
{
    __this->OnContainerSourceChanged(s, a);
}

// private void OnContainerSourceError(object s, Fuse.Resources.ImageSourceErrorArgs args)
void Image__OnContainerSourceError_fn(Image* __this, uObject* s, ::g::Fuse::Resources::ImageSourceErrorArgs* args)
{
    __this->OnContainerSourceError(s, args);
}

// protected override sealed void OnHitTestLocalVisual(Fuse.HitTestContext htc)
void Image__OnHitTestLocalVisual_fn(Image* __this, ::g::Fuse::HitTestContext* htc)
{
    ::g::Uno::Float2 lp = uPtr(htc)->LocalPoint();

    if ((((lp.X >= __this->_drawOrigin.X) && (lp.X <= (__this->_drawOrigin.X + __this->_drawSize.X))) && (lp.Y >= __this->_drawOrigin.Y)) && (lp.Y <= (__this->_drawOrigin.Y + __this->_drawSize.Y)))
        uPtr(htc)->Hit(__this);

    ::g::Fuse::Controls::Control__OnHitTestLocalVisual_fn(__this, htc);
}

// private void OnIsVisibleChanged(object s, object a)
void Image__OnIsVisibleChanged1_fn(Image* __this, uObject* s, uObject* a)
{
    __this->OnIsVisibleChanged1(s, a);
}

// private void OnParamChanged()
void Image__OnParamChanged_fn(Image* __this)
{
    __this->OnParamChanged();
}

// protected override sealed void OnRooted()
void Image__OnRooted_fn(Image* __this)
{
    ::g::Fuse::Controls::LayoutControl__OnRooted_fn(__this);
    __this->_markedFailed = false;
    __this->AddDrawCost(1.0);
    __this->add_IsVisibleChanged(uDelegate::New(::TYPES[29/*Uno.EventHandler*/], (void*)Image__OnIsVisibleChanged1_fn, __this));
    uPtr(__this->_container)->add_ParamChanged(uDelegate::New(::TYPES[29/*Uno.EventHandler*/], (void*)Image__OnContainerParamChanged_fn, __this));
    uPtr(__this->_container)->add_SourceChanged(uDelegate::New(::TYPES[29/*Uno.EventHandler*/], (void*)Image__OnContainerSourceChanged_fn, __this));
    uPtr(__this->_container)->add_SourceError(uDelegate::New(::TYPES[34/*Fuse.Resources.ImageSourceErrorHandler*/], (void*)Image__OnContainerSourceError_fn, __this));
    uPtr(__this->_container)->IsRooted(true);
}

// private void OnSourceChanged()
void Image__OnSourceChanged_fn(Image* __this)
{
    __this->OnSourceChanged();
}

// protected override sealed void OnUnrooted()
void Image__OnUnrooted_fn(Image* __this)
{
    __this->remove_IsVisibleChanged(uDelegate::New(::TYPES[29/*Uno.EventHandler*/], (void*)Image__OnIsVisibleChanged1_fn, __this));
    uPtr(__this->_container)->IsRooted(false);
    uPtr(__this->_container)->remove_ParamChanged(uDelegate::New(::TYPES[29/*Uno.EventHandler*/], (void*)Image__OnContainerParamChanged_fn, __this));
    uPtr(__this->_container)->remove_SourceChanged(uDelegate::New(::TYPES[29/*Uno.EventHandler*/], (void*)Image__OnContainerSourceChanged_fn, __this));
    uPtr(__this->_container)->remove_SourceError(uDelegate::New(::TYPES[34/*Fuse.Resources.ImageSourceErrorHandler*/], (void*)Image__OnContainerSourceError_fn, __this));
    __this->RemoveDrawCost(1.0);
    ::g::Fuse::Controls::LayoutControl__OnUnrooted_fn(__this);
}

// public generated void add_ParamChanged(Uno.EventHandler value)
void Image__add_ParamChanged_fn(Image* __this, uDelegate* value)
{
    __this->add_ParamChanged(value);
}

// public generated void remove_ParamChanged(Uno.EventHandler value)
void Image__remove_ParamChanged_fn(Image* __this, uDelegate* value)
{
    __this->remove_ParamChanged(value);
}

// protected override sealed void PushPropertiesToNativeView()
void Image__PushPropertiesToNativeView_fn(Image* __this)
{
    ::g::Fuse::Controls::Control__PushPropertiesToNativeView_fn(__this);
    __this->UpdateNativeImageSource();
    __this->UpdateNativeImageTransform();
}

// private static void reload(Fuse.Controls.Image img)
void Image__reload_fn(Image* img)
{
    Image::reload(img);
}

// public void Reload()
void Image__Reload_fn(Image* __this)
{
    __this->Reload();
}

// private static void retry(Fuse.Controls.Image img)
void Image__retry_fn(Image* img)
{
    Image::retry(img);
}

// public float4 get_Scale9Margin()
void Image__get_Scale9Margin_fn(Image* __this, ::g::Uno::Float4* __retval)
{
    *__retval = __this->Scale9Margin();
}

// public void set_Scale9Margin(float4 value)
void Image__set_Scale9Margin_fn(Image* __this, ::g::Uno::Float4* value)
{
    __this->Scale9Margin(*value);
}

// internal void SetContentBox(float4 contentBox)
void Image__SetContentBox_fn(Image* __this, ::g::Uno::Float4* contentBox)
{
    __this->SetContentBox(*contentBox);
}

// public Fuse.Resources.ImageSource get_Source()
void Image__get_Source_fn(Image* __this, ::g::Fuse::Resources::ImageSource** __retval)
{
    *__retval = __this->Source();
}

// public void set_Source(Fuse.Resources.ImageSource value)
void Image__set_Source_fn(Image* __this, ::g::Fuse::Resources::ImageSource* value)
{
    __this->Source(value);
}

// public generated void add_SourceChanged(Uno.EventHandler value)
void Image__add_SourceChanged_fn(Image* __this, uDelegate* value)
{
    __this->add_SourceChanged(value);
}

// public generated void remove_SourceChanged(Uno.EventHandler value)
void Image__remove_SourceChanged_fn(Image* __this, uDelegate* value)
{
    __this->remove_SourceChanged(value);
}

// internal static float3x3 TransformFromImageOrientation(Fuse.Resources.Exif.ImageOrientation orientation)
void Image__TransformFromImageOrientation_fn(int32_t* orientation, ::g::Uno::Float3x3* __retval)
{
    *__retval = Image::TransformFromImageOrientation(*orientation);
}

// private void UpdateNativeImageSource()
void Image__UpdateNativeImageSource_fn(Image* __this)
{
    __this->UpdateNativeImageSource();
}

// private void UpdateNativeImageTransform()
void Image__UpdateNativeImageTransform_fn(Image* __this)
{
    __this->UpdateNativeImageTransform();
}

// public bool get_AutoLoad() [instance]
bool Image::AutoLoad()
{
    return _autoLoad;
}

// public void set_AutoLoad(bool value) [instance]
void Image::AutoLoad(bool value)
{
    _autoLoad = value;
    _isLoaded = _autoLoad;
    OnParamChanged();
}

// public float4 get_Color() [instance]
::g::Uno::Float4 Image::Color()
{
    return _color;
}

// public void set_Color(float4 value) [instance]
void Image::Color(::g::Uno::Float4 value)
{
    if (::g::Uno::Float4__op_Inequality(_color, value))
    {
        _color = value;
        OnParamChanged();
    }
}

// internal Fuse.Internal.ImageContainer get_Container() [instance]
::g::Fuse::Internal::ImageContainer* Image::Container()
{
    return _container;
}

// private void DrawVisualColor(Fuse.DrawContext dc, float4 color) [instance]
void Image::DrawVisualColor(::g::Fuse::DrawContext* dc, ::g::Uno::Float4 color)
{
    ::g::Uno::Float4 ind2;
    ::g::Uno::Float4 ind3;
    ::g::Uno::Float4 ind4;
    ::g::Uno::Graphics::Texture2D* tex = uPtr(Container())->GetTexture();

    if (tex == nullptr)
        return;

    if (uPtr(Container())->StretchMode() == 4)
        uPtr(::g::Fuse::Elements::Internal::Scale9Rectangle::Impl())->Draw(dc, this, ActualSize(), GetSize(), tex, color, Scale9Margin());
    else
    {
        ::g::Uno::Float3x3 imageTransform = Image::TransformFromImageOrientation(uPtr(Source())->Orientation());
        uPtr(::g::Fuse::Controls::ImageElementDraw::Impl())->Draw(dc, this, _drawOrigin, _drawSize, (ind2 = _uvClip, ::g::Uno::Float2__New2(ind2.X, ind2.Y)), ::g::Uno::Float2__op_Subtraction2((ind3 = _uvClip, ::g::Uno::Float2__New2(ind3.Z, ind3.W)), (ind4 = _uvClip, ::g::Uno::Float2__New2(ind4.X, ind4.Y))), imageTransform, tex, uPtr(Container())->ResampleMode(), color);
    }
}

// private float2 GetSize() [instance]
::g::Uno::Float2 Image::GetSize()
{
    if ((Source() == nullptr) || !_isLoaded)
        return ::g::Uno::Float2__New1(0.0f);

    ::g::Uno::Float2 size = uPtr(Source())->Size();
    ::g::Uno::Int2 pixelSize = uPtr(Source())->PixelSize();

    if ((uPtr(Source())->Orientation() & 1) == 1)
    {
        size = ::g::Uno::Float2__New2(uPtr(Source())->Size().Y, uPtr(Source())->Size().X);
        pixelSize = ::g::Uno::Int2__New2(uPtr(Source())->PixelSize().Y, uPtr(Source())->PixelSize().X);
    }

    return uPtr(uPtr(Container())->Sizing)->CalcContentSize(size, pixelSize);
}

// private Fuse.Controls.Native.IImageView get_ImageView() [instance]
uObject* Image::ImageView()
{
    return uAs<uObject*>(NativeView(), ::TYPES[35/*Fuse.Controls.Native.IImageView*/]);
}

// public bool get_IsLoaded() [instance]
bool Image::IsLoaded()
{
    return _isLoaded;
}

// public void Load() [instance]
void Image::Load()
{
    if (Source() != nullptr)
    {
        uPtr(Source())->Load();
        _isLoaded = true;
    }
}

// private void OnContainerParamChanged(object s, object a) [instance]
void Image::OnContainerParamChanged(uObject* s, uObject* a)
{
    OnParamChanged();
}

// private void OnContainerSourceChanged(object s, object a) [instance]
void Image::OnContainerSourceChanged(uObject* s, uObject* a)
{
    _isLoaded = AutoLoad();
    OnSourceChanged();
}

// private void OnContainerSourceError(object s, Fuse.Resources.ImageSourceErrorArgs args) [instance]
void Image::OnContainerSourceError(uObject* s, ::g::Fuse::Resources::ImageSourceErrorArgs* args)
{
    _lastError = args;

    if (!_markedFailed && (uPtr(uPtr(_container)->Source())->State() == 3))
        OnSourceChanged();

    _isLoaded = false;
}

// private void OnIsVisibleChanged(object s, object a) [instance]
void Image::OnIsVisibleChanged1(uObject* s, uObject* a)
{
    uPtr(_container)->IsVisible(IsVisible());
}

// private void OnParamChanged() [instance]
void Image::OnParamChanged()
{
    if (::g::Uno::Delegate::op_Inequality(ParamChanged1, nullptr))
        uPtr(ParamChanged1)->Invoke(2, this, (::g::Uno::EventArgs*)::g::Uno::EventArgs::Empty());

    if (_isLoaded)
    {
        InvalidateLayout(2);
        InvalidateRenderBounds();
        UpdateNativeImageSource();
    }
}

// private void OnSourceChanged() [instance]
void Image::OnSourceChanged()
{
    if (::g::Uno::Delegate::op_Inequality(SourceChanged1, nullptr))
        uPtr(SourceChanged1)->Invoke(2, this, (::g::Uno::EventArgs*)::g::Uno::EventArgs::Empty());

    if (_isLoaded)
    {
        if (uPtr(_container)->Source() != nullptr)
        {
            _markedFailed = (uPtr(uPtr(_container)->Source())->State() == 3);
            bool isLoading = uPtr(uPtr(_container)->Source())->State() == 2;
            ::g::Fuse::Triggers::BusyTask::SetBusy(this, &_loadingTask, _markedFailed ? 16 : isLoading ? 1 : 0, _markedFailed ? (_lastError == nullptr) ? ::STRINGS[36/*"unknown fai...*/] : (uString*)uPtr(_lastError)->Reason : ::STRINGS[5/*""*/]);
        }

        InvalidateLayout(2);
        InvalidateRenderBounds();
        UpdateNativeImageSource();
    }
}

// public generated void add_ParamChanged(Uno.EventHandler value) [instance]
void Image::add_ParamChanged(uDelegate* value)
{
    ParamChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(ParamChanged1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public generated void remove_ParamChanged(Uno.EventHandler value) [instance]
void Image::remove_ParamChanged(uDelegate* value)
{
    ParamChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(ParamChanged1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public void Reload() [instance]
void Image::Reload()
{
    if (Source() != nullptr)
    {
        uPtr(Source())->Reload();
        _isLoaded = true;
    }
}

// public float4 get_Scale9Margin() [instance]
::g::Uno::Float4 Image::Scale9Margin()
{
    return _scale9Margin;
}

// public void set_Scale9Margin(float4 value) [instance]
void Image::Scale9Margin(::g::Uno::Float4 value)
{
    if (!_hasScale9Margin || ::g::Uno::Float4__op_Inequality(_scale9Margin, value))
    {
        _scale9Margin = value;
        _hasScale9Margin = true;
        OnParamChanged();
    }
}

// internal void SetContentBox(float4 contentBox) [instance]
void Image::SetContentBox(::g::Uno::Float4 contentBox)
{
    _hasContentBox = true;
    _contentBox = contentBox;
}

// public Fuse.Resources.ImageSource get_Source() [instance]
::g::Fuse::Resources::ImageSource* Image::Source()
{
    return uPtr(_container)->Source();
}

// public void set_Source(Fuse.Resources.ImageSource value) [instance]
void Image::Source(::g::Fuse::Resources::ImageSource* value)
{
    uPtr(_container)->Source(value);
}

// public generated void add_SourceChanged(Uno.EventHandler value) [instance]
void Image::add_SourceChanged(uDelegate* value)
{
    SourceChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(SourceChanged1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public generated void remove_SourceChanged(Uno.EventHandler value) [instance]
void Image::remove_SourceChanged(uDelegate* value)
{
    SourceChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(SourceChanged1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// private void UpdateNativeImageSource() [instance]
void Image::UpdateNativeImageSource()
{
    uObject* imageView = ImageView();

    if (imageView != nullptr)
    {
        ::g::Fuse::Controls::Native::IImageView::IsLoaded(uInterface(uPtr(imageView), ::TYPES[35/*Fuse.Controls.Native.IImageView*/]), IsLoaded());
        ::g::Fuse::Controls::Native::IImageView::ImageSource(uInterface(imageView, ::TYPES[35/*Fuse.Controls.Native.IImageView*/]), Source());
        ::g::Fuse::Controls::Native::IImageView::TintColor(uInterface(uPtr(ImageView()), ::TYPES[35/*Fuse.Controls.Native.IImageView*/]), Color());
    }
}

// private void UpdateNativeImageTransform() [instance]
void Image::UpdateNativeImageTransform()
{
    uObject* imageView = ImageView();

    if (imageView != nullptr)
        ::g::Fuse::Controls::Native::IImageView::UpdateImageTransform(uInterface(uPtr(imageView), ::TYPES[35/*Fuse.Controls.Native.IImageView*/]), ::g::Fuse::ICommonViewport::PixelsPerPoint(uInterface(uPtr(Viewport()), ::TYPES[36/*Fuse.ICommonViewport*/])), _origin, _scale, _drawSize);
}

// private static void clearCache(Fuse.Controls.Image img) [static]
void Image::clearCache(Image* img)
{
    Image_typeof()->Init();
    ::g::Fuse::Resources::ImageSource* src = uPtr(img)->Source();

    if (src != nullptr)
    {
        ::g::Fuse::Resources::HttpImageSource* http = uAs< ::g::Fuse::Resources::HttpImageSource*>(src, ::TYPES[33/*Fuse.Resources.HttpImageSource*/]);

        if (http != nullptr)
            uPtr(http)->ClearCache();
    }
}

// private static void load(Fuse.Controls.Image img) [static]
void Image::load(Image* img)
{
    Image_typeof()->Init();
    uPtr(img)->Load();
}

// private static void reload(Fuse.Controls.Image img) [static]
void Image::reload(Image* img)
{
    Image_typeof()->Init();
    uPtr(img)->Reload();
}

// private static void retry(Fuse.Controls.Image img) [static]
void Image::retry(Image* img)
{
    Image_typeof()->Init();
    ::g::Fuse::Resources::ImageSource* src = uPtr(img)->Source();

    if ((src != nullptr) && (uPtr(src)->State() == 3))
        uPtr(img)->Reload();
}

// internal static float3x3 TransformFromImageOrientation(Fuse.Resources.Exif.ImageOrientation orientation) [static]
::g::Uno::Float3x3 Image::TransformFromImageOrientation(int32_t orientation)
{
    Image_typeof()->Init();
    ::g::Uno::Float3x3 transform = ::g::Uno::Float3x3__Identity();

    if ((orientation & 4) == 4)
    {
        transform.M22 = -1.0f;
        transform.M32 = 1.0f;
    }

    if ((orientation & 2) == 2)
    {
        transform.M11 = -1.0f;
        transform.M22 = -transform.M22;
        transform.M31 = 1.0f;
        transform.M32 = (1.0f - transform.M32);
    }

    if ((orientation & 1) == 1)
    {
        transform.M12 = -transform.M11;
        transform.M11 = 0.0f;
        transform.M21 = transform.M22;
        transform.M22 = 0.0f;
        float tmp = transform.M31;
        transform.M31 = transform.M32;
        transform.M32 = (1.0f - tmp);
    }

    return transform;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Image.Visual.uno
// ---------------------------------------------------------------------------------

// internal sealed class ImageElementDraw
// {
// static generated ImageElementDraw()
static void ImageElementDraw__cctor__fn(uType* __type)
{
    ImageElementDraw::Impl_ = ImageElementDraw::New1();
}

static void ImageElementDraw_build(uType* type)
{
    ::STRINGS[37] = uString::Const("Invalid enum value");
    ::STRINGS[38] = uString::Const("resampleMode");
    type->SetDependencies(
        ::g::Fuse::Common::Blitter_typeof());
    type->SetFields(0,
        type, (uintptr_t)&ImageElementDraw::Impl_, uFieldFlagsStatic);
}

uType* ImageElementDraw_typeof()
{
    static uSStrong<uType*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.FieldCount = 1;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(ImageElementDraw);
    options.TypeSize = sizeof(uType);
    type = uClassType::New("Fuse.Controls.ImageElementDraw", options);
    type->fp_build_ = ImageElementDraw_build;
    type->fp_ctor_ = (void*)ImageElementDraw__New1_fn;
    type->fp_cctor_ = ImageElementDraw__cctor__fn;
    return type;
}

// public generated ImageElementDraw()
void ImageElementDraw__ctor__fn(ImageElementDraw* __this)
{
    __this->ctor_();
}

// public void Draw(Fuse.DrawContext dc, Fuse.Visual element, float2 offset, float2 size, float2 uvPosition, float2 uvSize, float3x3 imageTransform, texture2D tex, Fuse.Drawing.ResampleMode resampleMode, float4 Color)
void ImageElementDraw__Draw_fn(ImageElementDraw* __this, ::g::Fuse::DrawContext* dc, ::g::Fuse::Visual* element, ::g::Uno::Float2* offset, ::g::Uno::Float2* size, ::g::Uno::Float2* uvPosition, ::g::Uno::Float2* uvSize, ::g::Uno::Float3x3* imageTransform, ::g::Uno::Graphics::Texture2D* tex, int32_t* resampleMode, ::g::Uno::Float4* Color)
{
    __this->Draw(dc, element, *offset, *size, *uvPosition, *uvSize, *imageTransform, tex, *resampleMode, *Color);
}

// private Uno.Graphics.SamplerState GetSamplerState(Fuse.Drawing.ResampleMode resampleMode)
void ImageElementDraw__GetSamplerState_fn(ImageElementDraw* __this, int32_t* resampleMode, ::g::Uno::Graphics::SamplerState* __retval)
{
    *__retval = __this->GetSamplerState(*resampleMode);
}

// public generated ImageElementDraw New()
void ImageElementDraw__New1_fn(ImageElementDraw** __retval)
{
    *__retval = ImageElementDraw::New1();
}

uSStrong<ImageElementDraw*> ImageElementDraw::Impl_;

// public generated ImageElementDraw() [instance]
void ImageElementDraw::ctor_()
{
}

// public void Draw(Fuse.DrawContext dc, Fuse.Visual element, float2 offset, float2 size, float2 uvPosition, float2 uvSize, float3x3 imageTransform, texture2D tex, Fuse.Drawing.ResampleMode resampleMode, float4 Color) [instance]
void ImageElementDraw::Draw(::g::Fuse::DrawContext* dc, ::g::Fuse::Visual* element, ::g::Uno::Float2 offset, ::g::Uno::Float2 size, ::g::Uno::Float2 uvPosition, ::g::Uno::Float2 uvSize, ::g::Uno::Float3x3 imageTransform, ::g::Uno::Graphics::Texture2D* tex, int32_t resampleMode, ::g::Uno::Float4 Color)
{
    uPtr(::g::Fuse::Common::Blitter::Singleton())->Blit(tex, GetSamplerState(resampleMode), false, ::g::Uno::Rect__New2(uvPosition, uvSize), imageTransform, ::g::Uno::Rect__New2(offset, size), uPtr(dc)->GetLocalToClipTransform(element), Color, 0);
}

// private Uno.Graphics.SamplerState GetSamplerState(Fuse.Drawing.ResampleMode resampleMode) [instance]
::g::Uno::Graphics::SamplerState ImageElementDraw::GetSamplerState(int32_t resampleMode)
{
    switch (resampleMode)
    {
        case 0:
            return ::g::Uno::Graphics::SamplerState__NearestClamp();
        case 1:
            return ::g::Uno::Graphics::SamplerState__LinearClamp();
        case 2:
            return ::g::Uno::Graphics::SamplerState__TrilinearClamp();
        default:
            U_THROW(::g::Uno::ArgumentException::New5(::STRINGS[37/*"Invalid enu...*/], ::STRINGS[38/*"resampleMode"*/]));
    }
}

// public generated ImageElementDraw New() [static]
ImageElementDraw* ImageElementDraw::New1()
{
    ImageElementDraw* obj1 = (ImageElementDraw*)uNew(ImageElementDraw_typeof());
    obj1->ctor_();
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/TreeRendererPanel.uno
// ----------------------------------------------------------------------------------

// internal abstract interface INativeViewRoot
// {
uInterfaceType* INativeViewRoot_typeof()
{
    static uSStrong<uInterfaceType*> type;
    if (type != nullptr) return type;

    type = uInterfaceType::New("Fuse.Controls.INativeViewRoot", 0, 0);
    return type;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/NativeViewHost.uno
// -------------------------------------------------------------------------------

// public enum NativeViewHost.InitialState
uEnumType* NativeViewHost__InitialState_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.NativeViewHost.InitialState", ::g::Uno::Int_typeof(), 2);
    type->SetLiterals(
        "Enabled", 0LL,
        "Disabled", 1LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/GraphicsView.ux.uno
// --------------------------------------------------------------------------------

// internal abstract interface IProxyHost
// {
uInterfaceType* IProxyHost_typeof()
{
    static uSStrong<uInterfaceType*> type;
    if (type != nullptr) return type;

    type = uInterfaceType::New("Fuse.Controls.IProxyHost", 0, 0);
    return type;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/GraphicsView.ux.uno
// --------------------------------------------------------------------------------

// internal static class IProxyHostExtensions
// {
static void IProxyHostExtensions_build(uType* type)
{
    ::TYPES[37] = ::g::Fuse::Controls::IProxyHost_typeof();
}

uClassType* IProxyHostExtensions_typeof()
{
    static uSStrong<uClassType*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.TypeSize = sizeof(uClassType);
    type = uClassType::New("Fuse.Controls.IProxyHostExtensions", options);
    type->fp_build_ = IProxyHostExtensions_build;
    return type;
}

// public static Fuse.Controls.IProxyHost FindProxyHost(Fuse.Visual visual)
void IProxyHostExtensions__FindProxyHost_fn(::g::Fuse::Visual* visual, uObject** __retval)
{
    *__retval = IProxyHostExtensions::FindProxyHost(visual);
}

// public static Fuse.Controls.IProxyHost FindProxyHost(Fuse.Visual visual) [static]
uObject* IProxyHostExtensions::FindProxyHost(::g::Fuse::Visual* visual)
{
    if (visual == nullptr)
        return nullptr;

    ::g::Fuse::Visual* parent = uPtr(visual)->Parent();

    if (parent == nullptr)
        return nullptr;

    if (uIs(parent, ::TYPES[37/*Fuse.Controls.IProxyHost*/]) && (uPtr(uPtr(parent)->Parent())->VisualContext() == 2))
        return uAs<uObject*>(parent, ::TYPES[37/*Fuse.Controls.IProxyHost*/]);
    else
        return IProxyHostExtensions::FindProxyHost(parent);
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.WebView/WebView.uno
// -------------------------------------------------------------------------

// public abstract interface ISourceReceiver
// {
uInterfaceType* ISourceReceiver_typeof()
{
    static uSStrong<uInterfaceType*> type;
    if (type != nullptr) return type;

    type = uInterfaceType::New("Fuse.Controls.ISourceReceiver", 0, 0);
    return type;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/TextControls/TextControl.GraphicsText.uno
// ----------------------------------------------------------------------------------------------------------

// internal abstract interface ITextRenderer
// {
uInterfaceType* ITextRenderer_typeof()
{
    static uSStrong<uInterfaceType*> type;
    if (type != nullptr) return type;

    type = uInterfaceType::New("Fuse.Controls.ITextRenderer", 0, 0);
    return type;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.TimePicker/TimePicker.uno
// -------------------------------------------------------------------------------

// internal abstract interface ITimePickerView
// {
uInterfaceType* ITimePickerView_typeof()
{
    static uSStrong<uInterfaceType*> type;
    if (type != nullptr) return type;

    type = uInterfaceType::New("Fuse.Controls.ITimePickerView", 0, 0);
    return type;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.WebView/WebView.uno
// -------------------------------------------------------------------------

// public abstract interface IWebView
// {
uInterfaceType* IWebView_typeof()
{
    static uSStrong<uInterfaceType*> type;
    if (type != nullptr) return type;

    type = uInterfaceType::New("Fuse.Controls.IWebView", 0, 0);
    return type;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.WebView/WebView.uno
// -------------------------------------------------------------------------

// internal sealed class JavaScriptCall
// {
static void JavaScriptCall_build(uType* type)
{
    ::TYPES[38] = ::g::Fuse::Controls::IWebView_typeof();
    type->SetInterfaces(
        ::g::Fuse::Controls::BufferedWebViewCall_typeof(), offsetof(JavaScriptCall_type, interface0));
    type->SetFields(0,
        ::g::Uno::Action1_typeof()->MakeType(::g::Uno::String_typeof(), nullptr), offsetof(JavaScriptCall, Handler), 0,
        ::g::Uno::String_typeof(), offsetof(JavaScriptCall, Script), 0);
}

JavaScriptCall_type* JavaScriptCall_typeof()
{
    static uSStrong<JavaScriptCall_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.FieldCount = 2;
    options.InterfaceCount = 1;
    options.ObjectSize = sizeof(JavaScriptCall);
    options.TypeSize = sizeof(JavaScriptCall_type);
    type = (JavaScriptCall_type*)uClassType::New("Fuse.Controls.JavaScriptCall", options);
    type->fp_build_ = JavaScriptCall_build;
    type->interface0.fp_Apply = (void(*)(uObject*, uObject*))JavaScriptCall__Apply_fn;
    return type;
}

// public JavaScriptCall(string script, Uno.Action<string> handler)
void JavaScriptCall__ctor__fn(JavaScriptCall* __this, uString* script, uDelegate* handler)
{
    __this->ctor_(script, handler);
}

// public void Apply(Fuse.Controls.IWebView wv)
void JavaScriptCall__Apply_fn(JavaScriptCall* __this, uObject* wv)
{
    __this->Apply(wv);
}

// public JavaScriptCall New(string script, Uno.Action<string> handler)
void JavaScriptCall__New1_fn(uString* script, uDelegate* handler, JavaScriptCall** __retval)
{
    *__retval = JavaScriptCall::New1(script, handler);
}

// public JavaScriptCall(string script, Uno.Action<string> handler) [instance]
void JavaScriptCall::ctor_(uString* script, uDelegate* handler)
{
    Script = script;
    Handler = handler;
}

// public void Apply(Fuse.Controls.IWebView wv) [instance]
void JavaScriptCall::Apply(uObject* wv)
{
    if (::g::Uno::Delegate::op_Inequality(Handler, nullptr))
        ::g::Fuse::Controls::IWebView::Eval1(uInterface(uPtr(wv), ::TYPES[38/*Fuse.Controls.IWebView*/]), Script, Handler);
    else
        ::g::Fuse::Controls::IWebView::Eval(uInterface(uPtr(wv), ::TYPES[38/*Fuse.Controls.IWebView*/]), Script);
}

// public JavaScriptCall New(string script, Uno.Action<string> handler) [static]
JavaScriptCall* JavaScriptCall::New1(uString* script, uDelegate* handler)
{
    JavaScriptCall* obj1 = (JavaScriptCall*)uNew(JavaScriptCall_typeof());
    obj1->ctor_(script, handler);
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/LayoutControl.uno
// ------------------------------------------------------------------------------

// public partial class LayoutControl
// {
static void LayoutControl_build(uType* type)
{
    ::STRINGS[39] = uString::Const("LayoutControl not properly rooted in Surface");
    ::STRINGS[40] = uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/LayoutControl.Canvas.uno");
    ::STRINGS[41] = uString::Const("ISurfaceDrawableDraw");
    ::STRINGS[42] = uString::Const("Mismatched surface");
    ::STRINGS[43] = uString::Const("Surface contains a non-drawable child");
    ::TYPES[39] = ::g::Fuse::Drawing::ISurfaceDrawable_typeof();
    ::TYPES[4] = ::g::Fuse::Visual_typeof();
    type->SetDependencies(
        ::g::Fuse::Layouts::Layouts_typeof(),
        ::g::Uno::Math_typeof(),
        ::g::Fuse::Drawing::SurfaceManager_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::TYPES[4/*Fuse.Visual*/], nullptr), offsetof(::g::Fuse::Controls::Control_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface17));
    type->SetFields(106,
        ::g::Fuse::Layouts::Layout_typeof(), offsetof(LayoutControl, _layout), 0,
        ::g::Fuse::Controls::LayoutControlSurface_typeof(), offsetof(LayoutControl, _surface), 0);
}

::g::Fuse::Controls::Control_type* LayoutControl_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Control_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::Control_typeof();
    options.FieldCount = 108;
    options.InterfaceCount = 18;
    options.DependencyCount = 3;
    options.ObjectSize = sizeof(LayoutControl);
    options.TypeSize = sizeof(::g::Fuse::Controls::Control_type);
    type = (::g::Fuse::Controls::Control_type*)uClassType::New("Fuse.Controls.LayoutControl", options);
    type->fp_build_ = LayoutControl_build;
    type->fp_ArrangePaddingBox = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::LayoutParams*))LayoutControl__ArrangePaddingBox_fn;
    type->fp_FastTrackDrawWithOpacity = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::DrawContext*, bool*))LayoutControl__FastTrackDrawWithOpacity_fn;
    type->fp_GetContentSize = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::LayoutParams*, ::g::Uno::Float2*))LayoutControl__GetContentSize_fn;
    type->fp_IsMarginBoxDependent = (void(*)(::g::Fuse::Visual*, ::g::Fuse::Visual*, int32_t*))LayoutControl__IsMarginBoxDependent_fn;
    type->fp_OnChildAdded = (void(*)(::g::Fuse::Visual*, ::g::Fuse::Node*))LayoutControl__OnChildAdded_fn;
    type->fp_OnChildMoved = (void(*)(::g::Fuse::Visual*, ::g::Fuse::Node*))LayoutControl__OnChildMoved_fn;
    type->fp_OnChildRemoved = (void(*)(::g::Fuse::Visual*, ::g::Fuse::Node*))LayoutControl__OnChildRemoved_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))LayoutControl__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))LayoutControl__OnUnrooted_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public generated LayoutControl()
void LayoutControl__ctor_5_fn(LayoutControl* __this)
{
    __this->ctor_5();
}

// protected override void ArrangePaddingBox(Fuse.LayoutParams lp)
void LayoutControl__ArrangePaddingBox_fn(LayoutControl* __this, ::g::Fuse::LayoutParams* lp)
{
    ::g::Fuse::LayoutParams lp_ = *lp;
    ::g::Fuse::Elements::Element__ArrangePaddingBox_fn(__this, uCRef(lp_));

    if (__this->HasVisualChildren())
        uPtr(__this->Layout())->ArrangePaddingBox(__this, __this->Padding(), lp_);
}

// protected override bool FastTrackDrawWithOpacity(Fuse.DrawContext dc)
void LayoutControl__FastTrackDrawWithOpacity_fn(LayoutControl* __this, ::g::Fuse::DrawContext* dc, bool* __retval)
{
    if (__this->HasChildren())
        return *__retval = false, void();

    if (__this->Background() != nullptr)
        __this->DrawBackground(dc, __this->Opacity());

    return *__retval = true, void();
}

// protected override float2 GetContentSize(Fuse.LayoutParams lp)
void LayoutControl__GetContentSize_fn(LayoutControl* __this, ::g::Fuse::LayoutParams* lp, ::g::Uno::Float2* __retval)
{
    ::g::Uno::Float2 ret3;
    ::g::Fuse::LayoutParams lp_ = *lp;
    ::g::Uno::Float2 b = (::g::Fuse::Controls::Control__GetContentSize_fn(__this, uCRef(lp_), &ret3), ret3);

    if (__this->HasVisualChildren())
        return *__retval = ::g::Uno::Math::Max3(b, uPtr(__this->Layout())->GetContentSize(__this, lp_)), void();

    return *__retval = b, void();
}

// protected override sealed Fuse.LayoutDependent IsMarginBoxDependent(Fuse.Visual child)
void LayoutControl__IsMarginBoxDependent_fn(LayoutControl* __this, ::g::Fuse::Visual* child, int32_t* __retval)
{
    int32_t outer = uPtr(__this->BoxSizingObject())->IsContentRelativeSize(__this);
    int32_t inner = uPtr(__this->Layout())->IsMarginBoxDependent(child);

    if (outer == 4)
    {
        if (inner == 0)
            return *__retval = 0, void();

        return *__retval = 4, void();
    }
    else if (outer == 0)
    {
        if (inner == 4)
            return *__retval = 1, void();

        if (inner == 0)
            return *__retval = 0, void();

        return *__retval = 3, void();
    }
    else
    {
        if (inner == 4)
            return *__retval = 3, void();

        if (inner == 0)
            return *__retval = 0, void();

        return *__retval = 2, void();
    }
}

// internal void ISurfaceDrawableDraw(Fuse.Drawing.Surface surface)
void LayoutControl__ISurfaceDrawableDraw_fn(LayoutControl* __this, ::g::Fuse::Drawing::Surface* surface)
{
    __this->ISurfaceDrawableDraw(surface);
}

// public Fuse.Layouts.Layout get_Layout()
void LayoutControl__get_Layout_fn(LayoutControl* __this, ::g::Fuse::Layouts::Layout** __retval)
{
    *__retval = __this->Layout();
}

// public void set_Layout(Fuse.Layouts.Layout value)
void LayoutControl__set_Layout_fn(LayoutControl* __this, ::g::Fuse::Layouts::Layout* value)
{
    __this->Layout(value);
}

// internal Fuse.Drawing.Surface get_LayoutSurface()
void LayoutControl__get_LayoutSurface_fn(LayoutControl* __this, ::g::Fuse::Drawing::Surface** __retval)
{
    *__retval = __this->LayoutSurface();
}

// protected override void OnChildAdded(Fuse.Node elm)
void LayoutControl__OnChildAdded_fn(LayoutControl* __this, ::g::Fuse::Node* elm)
{
    if (uIs(elm, ::TYPES[4/*Fuse.Visual*/]))
        __this->InvalidateLayout(2);

    ::g::Fuse::Elements::Element__OnChildAdded_fn(__this, elm);
}

// protected override sealed void OnChildMoved(Fuse.Node elm)
void LayoutControl__OnChildMoved_fn(LayoutControl* __this, ::g::Fuse::Node* elm)
{
    if (uIs(elm, ::TYPES[4/*Fuse.Visual*/]))
        __this->InvalidateLayout(2);

    ::g::Fuse::Visual__OnChildMoved_fn(__this, elm);
}

// protected override void OnChildRemoved(Fuse.Node elm)
void LayoutControl__OnChildRemoved_fn(LayoutControl* __this, ::g::Fuse::Node* elm)
{
    if (uIs(elm, ::TYPES[4/*Fuse.Visual*/]))
        __this->InvalidateLayout(2);

    ::g::Fuse::Elements::Element__OnChildRemoved_fn(__this, elm);
}

// protected override void OnRooted()
void LayoutControl__OnRooted_fn(LayoutControl* __this)
{
    ::g::Fuse::Controls::Control__OnRooted_fn(__this);

    if (__this->_layout != nullptr)
        uPtr(__this->_layout)->Rooted(__this);
}

// protected override void OnUnrooted()
void LayoutControl__OnUnrooted_fn(LayoutControl* __this)
{
    if (__this->_layout != nullptr)
        uPtr(__this->_layout)->Unrooted(__this);

    ::g::Fuse::Controls::Control__OnUnrooted_fn(__this);
}

// internal void SurfaceRooted(bool require)
void LayoutControl__SurfaceRooted_fn(LayoutControl* __this, bool* require)
{
    __this->SurfaceRooted(*require);
}

// internal void SurfaceUnrooted()
void LayoutControl__SurfaceUnrooted_fn(LayoutControl* __this)
{
    __this->SurfaceUnrooted();
}

// public generated LayoutControl() [instance]
void LayoutControl::ctor_5()
{
    ctor_4();
}

// internal void ISurfaceDrawableDraw(Fuse.Drawing.Surface surface) [instance]
void LayoutControl::ISurfaceDrawableDraw(::g::Fuse::Drawing::Surface* surface)
{
    if (_surface == nullptr)
    {
        ::g::Fuse::Diagnostics::InternalError(::STRINGS[39/*"LayoutContr...*/], this, ::STRINGS[40/*"/Users/mort...*/], 105, ::STRINGS[41/*"ISurfaceDra...*/]);
        return;
    }

    if (uPtr(_surface)->Surface != surface)
        ::g::Fuse::Diagnostics::InternalError(::STRINGS[42/*"Mismatched ...*/], this, ::STRINGS[40/*"/Users/mort...*/], 110, ::STRINGS[41/*"ISurfaceDra...*/]);

    uPtr(uPtr(_surface)->Watcher)->Reset();
    uPtr(uPtr(_surface)->Watcher)->Add(Background());
    uPtr(uPtr(_surface)->Watcher)->Sync();

    if (Background() != nullptr)
    {
        if ((uPtr(_surface)->BackgroundPath == nullptr) || ::g::Uno::Float2__op_Inequality(uPtr(_surface)->BackgroundPathSize, ActualSize()))
        {
            ::g::Uno::Float2 rs = ActualSize();
            ::g::Fuse::Drawing::LineSegments* rect = ::g::Fuse::Drawing::LineSegments::New1();
            rect->MoveTo(::g::Uno::Float2__New1(0.0f));
            rect->LineTo(::g::Uno::Float2__New2(rs.X, 0.0f));
            rect->LineTo(::g::Uno::Float2__New2(rs.X, rs.Y));
            rect->LineTo(::g::Uno::Float2__New2(0.0f, rs.Y));
            rect->ClosePath();
            uPtr(_surface)->BackgroundPath = uPtr(surface)->CreatePath(rect->Segments(), 0);
            uPtr(_surface)->BackgroundPathSize = ActualSize();
        }

        uPtr(surface)->FillPath(uPtr(_surface)->BackgroundPath, Background());
    }

    uArray* zOrder = GetCachedZOrder();

    for (int32_t i = 0; i < uPtr(zOrder)->Length(); i++)
    {
        ::g::Fuse::Visual* child = uPtr(zOrder)->Strong< ::g::Fuse::Visual*>(i);
        uObject* drawable = uAs<uObject*>(child, ::TYPES[39/*Fuse.Drawing.ISurfaceDrawable*/]);

        if (drawable == nullptr)
        {
            if (!uPtr(_surface)->WarnDraw)
            {
                ::g::Fuse::Diagnostics::UserWarning(::STRINGS[43/*"Surface con...*/], child, ::STRINGS[40/*"/Users/mort...*/], 144, ::STRINGS[41/*"ISurfaceDra...*/]);
                uPtr(_surface)->WarnDraw = true;
            }

            continue;
        }

        uPtr(surface)->PushTransform(uPtr(child)->LocalTransform());
        surface->DrawLocal(drawable);
        surface->PopTransform();
    }
}

// public Fuse.Layouts.Layout get_Layout() [instance]
::g::Fuse::Layouts::Layout* LayoutControl::Layout()
{
    ::g::Fuse::Layouts::Layout* ind1;
    ind1 = _layout;
    return (ind1 != nullptr) ? ind1 : (::g::Fuse::Layouts::Layout*)::g::Fuse::Layouts::Layouts::Default();
}

// public void set_Layout(Fuse.Layouts.Layout value) [instance]
void LayoutControl::Layout(::g::Fuse::Layouts::Layout* value)
{
    if (value != _layout)
    {
        if (IsRootingCompleted() && (_layout != nullptr))
            uPtr(_layout)->Unrooted(this);

        _layout = value;

        if (IsRootingCompleted() && (_layout != nullptr))
            uPtr(_layout)->Rooted(this);

        InvalidateLayout(2);
    }
}

// internal Fuse.Drawing.Surface get_LayoutSurface() [instance]
::g::Fuse::Drawing::Surface* LayoutControl::LayoutSurface()
{
    return (_surface != nullptr) ? (::g::Fuse::Drawing::Surface*)uPtr(_surface)->Surface : nullptr;
}

// internal void SurfaceRooted(bool require) [instance]
void LayoutControl::SurfaceRooted(bool require)
{
    ::g::Fuse::Drawing::Surface* surface;

    if (require)
        surface = ::g::Fuse::Drawing::SurfaceManager::FindOrCreate(this);
    else
        surface = ::g::Fuse::Drawing::SurfaceManager::Find(this);

    if (surface != nullptr)
    {
        _surface = ::g::Fuse::Controls::LayoutControlSurface::New1();
        uPtr(_surface)->LayoutControl = this;
        uPtr(_surface)->Surface = surface;
        uPtr(_surface)->Watcher = ::g::Fuse::Drawing::DrawObjectWatcher::New1();
        uPtr(uPtr(_surface)->Watcher)->OnRooted((uObject*)_surface);
    }
}

// internal void SurfaceUnrooted() [instance]
void LayoutControl::SurfaceUnrooted()
{
    if (_surface != nullptr)
    {
        if (uPtr(_surface)->BackgroundPath != nullptr)
            uPtr(uPtr(_surface)->Surface)->DisposePath(uPtr(_surface)->BackgroundPath);

        uPtr(uPtr(_surface)->Watcher)->OnUnrooted();
        ::g::Fuse::Drawing::SurfaceManager::Release(this, uPtr(_surface)->Surface);
        _surface = nullptr;
    }
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/LayoutControl.Canvas.uno
// -------------------------------------------------------------------------------------

// internal sealed class LayoutControlSurface
// {
static void LayoutControlSurface_build(uType* type)
{
    ::STRINGS[44] = uString::Const("Prepare without surface");
    ::STRINGS[40] = uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/LayoutControl.Canvas.uno");
    ::STRINGS[45] = uString::Const("Fuse.Drawing.IDrawObjectWatcherFeedback.Prepare");
    ::STRINGS[46] = uString::Const("Fuse.Drawing.IDrawObjectWatcherFeedback.Unprepare");
    ::TYPES[40] = ::g::Fuse::Drawing::Stroke_typeof();
    ::TYPES[41] = ::g::Fuse::Drawing::Brush_typeof();
    type->SetInterfaces(
        ::g::Fuse::Drawing::IDrawObjectWatcherFeedback_typeof(), offsetof(LayoutControlSurface_type, interface0));
    type->SetFields(0,
        ::g::Uno::Bool_typeof(), offsetof(LayoutControlSurface, WarnDraw), 0,
        ::g::Fuse::Drawing::SurfacePath_typeof(), offsetof(LayoutControlSurface, BackgroundPath), 0,
        ::g::Uno::Float2_typeof(), offsetof(LayoutControlSurface, BackgroundPathSize), 0,
        ::g::Fuse::Drawing::Surface_typeof(), offsetof(LayoutControlSurface, Surface), 0,
        ::g::Fuse::Drawing::DrawObjectWatcher_typeof(), offsetof(LayoutControlSurface, Watcher), 0,
        ::g::Fuse::Controls::LayoutControl_typeof(), offsetof(LayoutControlSurface, LayoutControl), 0);
}

LayoutControlSurface_type* LayoutControlSurface_typeof()
{
    static uSStrong<LayoutControlSurface_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.FieldCount = 6;
    options.InterfaceCount = 1;
    options.ObjectSize = sizeof(LayoutControlSurface);
    options.TypeSize = sizeof(LayoutControlSurface_type);
    type = (LayoutControlSurface_type*)uClassType::New("Fuse.Controls.LayoutControlSurface", options);
    type->fp_build_ = LayoutControlSurface_build;
    type->fp_ctor_ = (void*)LayoutControlSurface__New1_fn;
    type->interface0.fp_Changed = (void(*)(uObject*, uObject*))LayoutControlSurface__FuseDrawingIDrawObjectWatcherFeedbackChanged_fn;
    type->interface0.fp_Prepare = (void(*)(uObject*, uObject*))LayoutControlSurface__FuseDrawingIDrawObjectWatcherFeedbackPrepare_fn;
    type->interface0.fp_Unprepare = (void(*)(uObject*, uObject*))LayoutControlSurface__FuseDrawingIDrawObjectWatcherFeedbackUnprepare_fn;
    return type;
}

// public generated LayoutControlSurface()
void LayoutControlSurface__ctor__fn(LayoutControlSurface* __this)
{
    __this->ctor_();
}

// private void Fuse.Drawing.IDrawObjectWatcherFeedback.Changed(object obj)
void LayoutControlSurface__FuseDrawingIDrawObjectWatcherFeedbackChanged_fn(LayoutControlSurface* __this, uObject* obj)
{
    if (uIs(obj, ::TYPES[40/*Fuse.Drawing.Stroke*/]))
        uPtr(__this->LayoutControl)->InvalidateLayout(2);

    uPtr(__this->LayoutControl)->InvalidateVisual();
}

// private void Fuse.Drawing.IDrawObjectWatcherFeedback.Prepare(object obj)
void LayoutControlSurface__FuseDrawingIDrawObjectWatcherFeedbackPrepare_fn(LayoutControlSurface* __this, uObject* obj)
{
    if (__this->Surface == nullptr)
    {
        ::g::Fuse::Diagnostics::InternalError(::STRINGS[44/*"Prepare wit...*/], __this, ::STRINGS[40/*"/Users/mort...*/], 34, ::STRINGS[45/*"Fuse.Drawin...*/]);
        return;
    }

    ::g::Fuse::Drawing::Brush* b = uAs< ::g::Fuse::Drawing::Brush*>(obj, ::TYPES[41/*Fuse.Drawing.Brush*/]);

    if (b != nullptr)
        uPtr(__this->Surface)->Prepare(b);
}

// private void Fuse.Drawing.IDrawObjectWatcherFeedback.Unprepare(object obj)
void LayoutControlSurface__FuseDrawingIDrawObjectWatcherFeedbackUnprepare_fn(LayoutControlSurface* __this, uObject* obj)
{
    if (__this->Surface == nullptr)
    {
        ::g::Fuse::Diagnostics::InternalError(::STRINGS[44/*"Prepare wit...*/], __this, ::STRINGS[40/*"/Users/mort...*/], 47, ::STRINGS[46/*"Fuse.Drawin...*/]);
        return;
    }

    ::g::Fuse::Drawing::Brush* b = uAs< ::g::Fuse::Drawing::Brush*>(obj, ::TYPES[41/*Fuse.Drawing.Brush*/]);

    if (b != nullptr)
        uPtr(__this->Surface)->Unprepare(b);
}

// public generated LayoutControlSurface New()
void LayoutControlSurface__New1_fn(LayoutControlSurface** __retval)
{
    *__retval = LayoutControlSurface::New1();
}

// public generated LayoutControlSurface() [instance]
void LayoutControlSurface::ctor_()
{
}

// public generated LayoutControlSurface New() [static]
LayoutControlSurface* LayoutControlSurface::New1()
{
    LayoutControlSurface* obj1 = (LayoutControlSurface*)uNew(LayoutControlSurface_typeof());
    obj1->ctor_();
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.WebView/WebView.uno
// -------------------------------------------------------------------------

// internal sealed class LoadHtmlCall
// {
static void LoadHtmlCall_build(uType* type)
{
    ::TYPES[38] = ::g::Fuse::Controls::IWebView_typeof();
    type->SetInterfaces(
        ::g::Fuse::Controls::BufferedWebViewCall_typeof(), offsetof(LoadHtmlCall_type, interface0));
    type->SetFields(0,
        ::g::Uno::String_typeof(), offsetof(LoadHtmlCall, html), 0,
        ::g::Uno::String_typeof(), offsetof(LoadHtmlCall, baseUrl), 0);
}

LoadHtmlCall_type* LoadHtmlCall_typeof()
{
    static uSStrong<LoadHtmlCall_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.FieldCount = 2;
    options.InterfaceCount = 1;
    options.ObjectSize = sizeof(LoadHtmlCall);
    options.TypeSize = sizeof(LoadHtmlCall_type);
    type = (LoadHtmlCall_type*)uClassType::New("Fuse.Controls.LoadHtmlCall", options);
    type->fp_build_ = LoadHtmlCall_build;
    type->interface0.fp_Apply = (void(*)(uObject*, uObject*))LoadHtmlCall__Apply_fn;
    return type;
}

// public LoadHtmlCall(string html, string baseUrl)
void LoadHtmlCall__ctor__fn(LoadHtmlCall* __this, uString* html1, uString* baseUrl1)
{
    __this->ctor_(html1, baseUrl1);
}

// public void Apply(Fuse.Controls.IWebView wv)
void LoadHtmlCall__Apply_fn(LoadHtmlCall* __this, uObject* wv)
{
    __this->Apply(wv);
}

// public LoadHtmlCall New(string html, string baseUrl)
void LoadHtmlCall__New1_fn(uString* html1, uString* baseUrl1, LoadHtmlCall** __retval)
{
    *__retval = LoadHtmlCall::New1(html1, baseUrl1);
}

// public LoadHtmlCall(string html, string baseUrl) [instance]
void LoadHtmlCall::ctor_(uString* html1, uString* baseUrl1)
{
    html = html1;
    baseUrl = baseUrl1;
}

// public void Apply(Fuse.Controls.IWebView wv) [instance]
void LoadHtmlCall::Apply(uObject* wv)
{
    ::g::Fuse::Controls::IWebView::LoadHtml1(uInterface(uPtr(wv), ::TYPES[38/*Fuse.Controls.IWebView*/]), html, baseUrl);
}

// public LoadHtmlCall New(string html, string baseUrl) [static]
LoadHtmlCall* LoadHtmlCall::New1(uString* html1, uString* baseUrl1)
{
    LoadHtmlCall* obj1 = (LoadHtmlCall*)uNew(LoadHtmlCall_typeof());
    obj1->ctor_(html1, baseUrl1);
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/NativeViewHost.uno
// -------------------------------------------------------------------------------

// public sealed class NativeViewHost
// {
static void NativeViewHost_build(uType* type)
{
    type->SetDependencies(
        ::g::Fuse::UpdateManager_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(NativeViewHost_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(NativeViewHost_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(NativeViewHost_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(NativeViewHost_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(NativeViewHost_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(NativeViewHost_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(NativeViewHost_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(NativeViewHost_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(NativeViewHost_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(NativeViewHost_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(NativeViewHost_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(NativeViewHost_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(NativeViewHost_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(NativeViewHost_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(NativeViewHost_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(NativeViewHost_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(NativeViewHost_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(NativeViewHost_type, interface17),
        ::g::Fuse::Elements::ITreeRenderer_typeof(), offsetof(NativeViewHost_type, interface18));
    type->SetFields(108,
        ::g::Uno::Bool_typeof(), offsetof(NativeViewHost, _draw), 0,
        ::g::Uno::Bool_typeof(), offsetof(NativeViewHost, _renderToTexture), 0,
        ::g::Uno::IDisposable_typeof(), offsetof(NativeViewHost, _toggeling), 0,
        ::g::Fuse::Elements::ITreeRenderer_typeof(), offsetof(NativeViewHost, _nativeRenderer), 0,
        ::g::Uno::Bool_typeof(), offsetof(NativeViewHost, _isVisible), 0,
        ::g::Fuse::Controls::IProxyHost_typeof(), offsetof(NativeViewHost, _proxyHost), 0,
        ::g::Fuse::Controls::Native::NativeViewRenderer_typeof(), offsetof(NativeViewHost, _glRenderer), 0,
        ::g::Fuse::Controls::Native::ViewHandle_typeof(), offsetof(NativeViewHost, _root), 0,
        ::g::Uno::Bool_typeof(), offsetof(NativeViewHost, _offscreenEnabled), 0,
        ::g::Uno::Bool_typeof(), offsetof(NativeViewHost, _updateTransform), 0);
}

NativeViewHost_type* NativeViewHost_typeof()
{
    static uSStrong<NativeViewHost_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::LayoutControl_typeof();
    options.FieldCount = 118;
    options.InterfaceCount = 19;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(NativeViewHost);
    options.TypeSize = sizeof(NativeViewHost_type);
    type = (NativeViewHost_type*)uClassType::New("Fuse.Controls.NativeViewHost", options);
    type->fp_build_ = NativeViewHost_build;
    type->fp_ctor_ = (void*)NativeViewHost__New3_fn;
    type->fp_CalcRenderBounds = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::VisualBounds**))NativeViewHost__CalcRenderBounds_fn;
    type->fp_DrawWithChildren = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::DrawContext*))NativeViewHost__DrawWithChildren_fn;
    type->fp_OnInvalidateVisual = (void(*)(::g::Fuse::Visual*))NativeViewHost__OnInvalidateVisual_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))NativeViewHost__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))NativeViewHost__OnUnrooted_fn;
    type->fp_get_TreeRenderer = (void(*)(::g::Fuse::Elements::Element*, uObject**))NativeViewHost__get_TreeRenderer_fn;
    type->fp_get_VisualContext = (void(*)(::g::Fuse::Visual*, int32_t*))NativeViewHost__get_VisualContext_fn;
    type->interface18.fp_RootingStarted = (void(*)(uObject*, ::g::Fuse::Elements::Element*))NativeViewHost__FuseElementsITreeRendererRootingStarted_fn;
    type->interface18.fp_Rooted = (void(*)(uObject*, ::g::Fuse::Elements::Element*))NativeViewHost__FuseElementsITreeRendererRooted_fn;
    type->interface18.fp_Unrooted = (void(*)(uObject*, ::g::Fuse::Elements::Element*))NativeViewHost__FuseElementsITreeRendererUnrooted_fn;
    type->interface18.fp_BackgroundChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, ::g::Fuse::Drawing::Brush*))NativeViewHost__FuseElementsITreeRendererBackgroundChanged_fn;
    type->interface18.fp_Measure = (void(*)(uObject*, ::g::Fuse::Elements::Element*, ::g::Fuse::LayoutParams*, ::g::Uno::Float2*, bool*))NativeViewHost__FuseElementsITreeRendererMeasure_fn;
    type->interface18.fp_IsVisibleChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, bool*))NativeViewHost__FuseElementsITreeRendererIsVisibleChanged_fn;
    type->interface18.fp_IsEnabledChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, bool*))NativeViewHost__FuseElementsITreeRendererIsEnabledChanged_fn;
    type->interface18.fp_OpacityChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, float*))NativeViewHost__FuseElementsITreeRendererOpacityChanged_fn;
    type->interface18.fp_ClipToBoundsChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, bool*))NativeViewHost__FuseElementsITreeRendererClipToBoundsChanged_fn;
    type->interface18.fp_HitTestModeChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, bool*))NativeViewHost__FuseElementsITreeRendererHitTestModeChanged_fn;
    type->interface18.fp_ZOrderChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, uArray*))NativeViewHost__FuseElementsITreeRendererZOrderChanged_fn;
    type->interface18.fp_RenderBoundsChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*))NativeViewHost__FuseElementsITreeRendererRenderBoundsChanged_fn;
    type->interface18.fp_TransformChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*))NativeViewHost__FuseElementsITreeRendererTransformChanged_fn;
    type->interface18.fp_Placed = (void(*)(uObject*, ::g::Fuse::Elements::Element*))NativeViewHost__FuseElementsITreeRendererPlaced_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public NativeViewHost()
void NativeViewHost__ctor_6_fn(NativeViewHost* __this)
{
    __this->ctor_6();
}

// public NativeViewHost(Fuse.Controls.NativeViewHost.InitialState initialState)
void NativeViewHost__ctor_7_fn(NativeViewHost* __this, int32_t* initialState)
{
    __this->ctor_7(*initialState);
}

// protected override sealed Fuse.VisualBounds CalcRenderBounds()
void NativeViewHost__CalcRenderBounds_fn(NativeViewHost* __this, ::g::Fuse::VisualBounds** __retval)
{
    ::g::Fuse::VisualBounds* ret4;
    ::g::Fuse::VisualBounds* b = (::g::Fuse::Controls::Control__CalcRenderBounds_fn(__this, &ret4), ret4);

    if (__this->_draw)
        b = uPtr(b)->AddRect(::g::Uno::Float2__New1(0.0f), __this->ActualSize());

    return *__retval = b, void();
}

// private float4x4 CalcTransform()
void NativeViewHost__CalcTransform_fn(NativeViewHost* __this, ::g::Uno::Float4x4* __retval)
{
    *__retval = __this->CalcTransform();
}

// private extern void ClearRoot(Fuse.Controls.Native.ViewHandle viewHandle)
void NativeViewHost__ClearRoot_fn(NativeViewHost* __this, ::g::Fuse::Controls::Native::ViewHandle* viewHandle)
{
    __this->ClearRoot(viewHandle);
}

// private void DisableOffscreen()
void NativeViewHost__DisableOffscreen_fn(NativeViewHost* __this)
{
    __this->DisableOffscreen();
}

// protected override sealed extern void DrawWithChildren(Fuse.DrawContext dc)
void NativeViewHost__DrawWithChildren_fn(NativeViewHost* __this, ::g::Fuse::DrawContext* dc)
{
    if (!__this->IsInGraphicsContext())
        ::g::Fuse::Elements::Element__DrawWithChildren_fn(__this, dc);
    else if (__this->_draw && (__this->_glRenderer != nullptr))
        uPtr(__this->_glRenderer)->Draw(__this->_root, uPtr(dc)->GetLocalToClipTransform(__this), ::g::Uno::Float2__New1(0.0f), __this->ActualSize(), ::g::Fuse::ICommonViewport::PixelsPerPoint(uInterface(uPtr(__this->Viewport()), ::TYPES[36/*Fuse.ICommonViewport*/])));
}

// private void EnableOffscreen()
void NativeViewHost__EnableOffscreen_fn(NativeViewHost* __this)
{
    __this->EnableOffscreen();
}

// private void Fuse.Elements.ITreeRenderer.BackgroundChanged(Fuse.Elements.Element e, Fuse.Drawing.Brush background)
void NativeViewHost__FuseElementsITreeRendererBackgroundChanged_fn(NativeViewHost* __this, ::g::Fuse::Elements::Element* e, ::g::Fuse::Drawing::Brush* background)
{
    ::g::Fuse::Elements::ITreeRenderer::BackgroundChanged(uInterface(uPtr(__this->_nativeRenderer), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e, background);
}

// private void Fuse.Elements.ITreeRenderer.ClipToBoundsChanged(Fuse.Elements.Element e, bool clipToBounds)
void NativeViewHost__FuseElementsITreeRendererClipToBoundsChanged_fn(NativeViewHost* __this, ::g::Fuse::Elements::Element* e, bool* clipToBounds)
{
    bool clipToBounds_ = *clipToBounds;
    ::g::Fuse::Elements::ITreeRenderer::ClipToBoundsChanged(uInterface(uPtr(__this->_nativeRenderer), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e, clipToBounds_);
}

// private void Fuse.Elements.ITreeRenderer.HitTestModeChanged(Fuse.Elements.Element e, bool enabled)
void NativeViewHost__FuseElementsITreeRendererHitTestModeChanged_fn(NativeViewHost* __this, ::g::Fuse::Elements::Element* e, bool* enabled)
{
    bool enabled_ = *enabled;
    ::g::Fuse::Elements::ITreeRenderer::HitTestModeChanged(uInterface(uPtr(__this->_nativeRenderer), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e, enabled_);
}

// private void Fuse.Elements.ITreeRenderer.IsEnabledChanged(Fuse.Elements.Element e, bool isEnabled)
void NativeViewHost__FuseElementsITreeRendererIsEnabledChanged_fn(NativeViewHost* __this, ::g::Fuse::Elements::Element* e, bool* isEnabled)
{
    bool isEnabled_ = *isEnabled;
    ::g::Fuse::Elements::ITreeRenderer::IsEnabledChanged(uInterface(uPtr(__this->_nativeRenderer), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e, isEnabled_);
}

// private void Fuse.Elements.ITreeRenderer.IsVisibleChanged(Fuse.Elements.Element e, bool isVisible)
void NativeViewHost__FuseElementsITreeRendererIsVisibleChanged_fn(NativeViewHost* __this, ::g::Fuse::Elements::Element* e, bool* isVisible)
{
    bool isVisible_ = *isVisible;

    if (e == __this)
    {
        __this->_isVisible = isVisible_;

        if (__this->_isVisible)
            __this->DisableOffscreen();
        else
            __this->EnableOffscreen();
    }
    else
        ::g::Fuse::Elements::ITreeRenderer::IsVisibleChanged(uInterface(uPtr(__this->_nativeRenderer), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e, isVisible_);
}

// private bool Fuse.Elements.ITreeRenderer.Measure(Fuse.Elements.Element e, Fuse.LayoutParams lp, float2& size)
void NativeViewHost__FuseElementsITreeRendererMeasure_fn(NativeViewHost* __this, ::g::Fuse::Elements::Element* e, ::g::Fuse::LayoutParams* lp, ::g::Uno::Float2* size, bool* __retval)
{
    ::g::Fuse::LayoutParams lp_ = *lp;
    return *__retval = ::g::Fuse::Elements::ITreeRenderer::Measure(uInterface(uPtr(__this->_nativeRenderer), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e, lp_, size), void();
}

// private void Fuse.Elements.ITreeRenderer.OpacityChanged(Fuse.Elements.Element e, float opacity)
void NativeViewHost__FuseElementsITreeRendererOpacityChanged_fn(NativeViewHost* __this, ::g::Fuse::Elements::Element* e, float* opacity)
{
    float opacity_ = *opacity;
    ::g::Fuse::Elements::ITreeRenderer::OpacityChanged(uInterface(uPtr(__this->_nativeRenderer), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e, opacity_);
}

// private extern void Fuse.Elements.ITreeRenderer.Placed(Fuse.Elements.Element e)
void NativeViewHost__FuseElementsITreeRendererPlaced_fn(NativeViewHost* __this, ::g::Fuse::Elements::Element* e)
{
    if (e == __this)
        __this->UpdateHostViewTransform();
    else
        ::g::Fuse::Elements::ITreeRenderer::Placed(uInterface(uPtr(__this->_nativeRenderer), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e);
}

// private void Fuse.Elements.ITreeRenderer.RenderBoundsChanged(Fuse.Elements.Element e)
void NativeViewHost__FuseElementsITreeRendererRenderBoundsChanged_fn(NativeViewHost* __this, ::g::Fuse::Elements::Element* e)
{
    ::g::Fuse::Elements::ITreeRenderer::RenderBoundsChanged(uInterface(uPtr(__this->_nativeRenderer), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e);
}

// private void Fuse.Elements.ITreeRenderer.Rooted(Fuse.Elements.Element e)
void NativeViewHost__FuseElementsITreeRendererRooted_fn(NativeViewHost* __this, ::g::Fuse::Elements::Element* e)
{
    ::g::Fuse::Elements::ITreeRenderer::Rooted(uInterface(uPtr(__this->_nativeRenderer), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e);
}

// private void Fuse.Elements.ITreeRenderer.RootingStarted(Fuse.Elements.Element e)
void NativeViewHost__FuseElementsITreeRendererRootingStarted_fn(NativeViewHost* __this, ::g::Fuse::Elements::Element* e)
{
    ::g::Fuse::Elements::ITreeRenderer::RootingStarted(uInterface(uPtr(__this->_nativeRenderer), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e);
}

// private void Fuse.Elements.ITreeRenderer.TransformChanged(Fuse.Elements.Element e)
void NativeViewHost__FuseElementsITreeRendererTransformChanged_fn(NativeViewHost* __this, ::g::Fuse::Elements::Element* e)
{
    if (e == __this)
        __this->UpdateHostViewTransform();
    else
        ::g::Fuse::Elements::ITreeRenderer::TransformChanged(uInterface(uPtr(__this->_nativeRenderer), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e);
}

// private void Fuse.Elements.ITreeRenderer.Unrooted(Fuse.Elements.Element e)
void NativeViewHost__FuseElementsITreeRendererUnrooted_fn(NativeViewHost* __this, ::g::Fuse::Elements::Element* e)
{
    ::g::Fuse::Elements::ITreeRenderer::Unrooted(uInterface(uPtr(__this->_nativeRenderer), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e);
}

// private void Fuse.Elements.ITreeRenderer.ZOrderChanged(Fuse.Elements.Element e, Fuse.Visual[] zorder)
void NativeViewHost__FuseElementsITreeRendererZOrderChanged_fn(NativeViewHost* __this, ::g::Fuse::Elements::Element* e, uArray* zorder)
{
    ::g::Fuse::Elements::ITreeRenderer::ZOrderChanged(uInterface(uPtr(__this->_nativeRenderer), ::TYPES[7/*Fuse.Elements.ITreeRenderer*/]), e, zorder);
}

// private bool get_IsInGraphicsContext()
void NativeViewHost__get_IsInGraphicsContext_fn(NativeViewHost* __this, bool* __retval)
{
    *__retval = __this->IsInGraphicsContext();
}

// public NativeViewHost New()
void NativeViewHost__New3_fn(NativeViewHost** __retval)
{
    *__retval = NativeViewHost::New3();
}

// protected override sealed extern void OnInvalidateVisual()
void NativeViewHost__OnInvalidateVisual_fn(NativeViewHost* __this)
{
    ::g::Fuse::Controls::Control__OnInvalidateVisual_fn(__this);

    if (__this->_glRenderer != nullptr)
        uPtr(__this->_glRenderer)->Invalidate();
}

// private extern void OnInvalidateWorldTransform(object sender, Uno.EventArgs args)
void NativeViewHost__OnInvalidateWorldTransform_fn(NativeViewHost* __this, uObject* sender, ::g::Uno::EventArgs* args)
{
    __this->OnInvalidateWorldTransform(sender, args);
}

// protected override sealed extern void OnRooted()
void NativeViewHost__OnRooted_fn(NativeViewHost* __this)
{
    __this->add_WorldTransformInvalidated(uDelegate::New(::TYPES[29/*Uno.EventHandler*/], (void*)NativeViewHost__OnInvalidateWorldTransform_fn, __this));

    if (__this->IsInGraphicsContext())
    {
        __this->_glRenderer = ::g::Fuse::Controls::Native::NativeViewRenderer::New1();
        __this->_root = ::g::Fuse::Controls::Native::ViewFactory::InstantiateViewGroup();
        __this->_proxyHost = ::g::Fuse::Controls::IProxyHostExtensions::FindProxyHost(__this);

        if (__this->_proxyHost == nullptr)
            ::g::Fuse::Diagnostics::InternalError(::g::Uno::String::op_Addition(__this, uString::Const(" could not find an IProxyHost")), nullptr, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/NativeViewHost.uno"), 325, ::STRINGS[49/*"OnRooted"*/]);

        __this->_nativeRenderer = (uObject*)::g::Fuse::Controls::TreeRenderer::New1(uDelegate::New(::TYPES[65/*Uno.Action<Fuse.Controls.Native.ViewHandle>*/], (void*)NativeViewHost__SetRoot_fn, __this), uDelegate::New(::TYPES[65/*Uno.Action<Fuse.Controls.Native.ViewHandle>*/], (void*)NativeViewHost__ClearRoot_fn, __this));

        if (__this->_proxyHost != nullptr)
        {
            if (!__this->_offscreenEnabled)
                ::g::Fuse::Controls::IProxyHost::Insert(uInterface(uPtr(__this->_proxyHost), ::TYPES[37/*Fuse.Controls.IProxyHost*/]), __this->_root);
        }
        else
            ::g::Fuse::Diagnostics::InternalError(::g::Uno::String::op_Addition(__this, uString::Const(" does not have an IProxyHost and will malfunction")), nullptr, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/NativeViewHost.uno"), 335, ::STRINGS[49/*"OnRooted"*/]);
    }

    ::g::Fuse::Controls::LayoutControl__OnRooted_fn(__this);
}

// protected override sealed extern void OnUnrooted()
void NativeViewHost__OnUnrooted_fn(NativeViewHost* __this)
{
    __this->remove_WorldTransformInvalidated(uDelegate::New(::TYPES[29/*Uno.EventHandler*/], (void*)NativeViewHost__OnInvalidateWorldTransform_fn, __this));

    if ((__this->IsInGraphicsContext() && (__this->_proxyHost != nullptr)) && !__this->_offscreenEnabled)
        ::g::Fuse::Controls::IProxyHost::Remove(uInterface(uPtr(__this->_proxyHost), ::TYPES[37/*Fuse.Controls.IProxyHost*/]), __this->_root);

    if (__this->IsInGraphicsContext())
        uPtr(__this->_glRenderer)->Dispose();

    ::g::Fuse::Controls::LayoutControl__OnUnrooted_fn(__this);
    __this->_root = nullptr;
    __this->_nativeRenderer = nullptr;
    __this->_proxyHost = nullptr;
    __this->_glRenderer = nullptr;
}

// private extern void PostUpdateTransform()
void NativeViewHost__PostUpdateTransform_fn(NativeViewHost* __this)
{
    __this->PostUpdateTransform();
}

// public bool get_RenderToTexture()
void NativeViewHost__get_RenderToTexture_fn(NativeViewHost* __this, bool* __retval)
{
    *__retval = __this->RenderToTexture();
}

// public void set_RenderToTexture(bool value)
void NativeViewHost__set_RenderToTexture_fn(NativeViewHost* __this, bool* value)
{
    __this->RenderToTexture(*value);
}

// private extern void SetRoot(Fuse.Controls.Native.ViewHandle viewHandle)
void NativeViewHost__SetRoot_fn(NativeViewHost* __this, ::g::Fuse::Controls::Native::ViewHandle* viewHandle)
{
    __this->SetRoot(viewHandle);
}

// public override sealed Fuse.Elements.ITreeRenderer get_TreeRenderer()
void NativeViewHost__get_TreeRenderer_fn(NativeViewHost* __this, uObject** __retval)
{
    uObject* ret6;
    return *__retval = __this->IsInGraphicsContext() ? (uObject*)__this : (::g::Fuse::Elements::Element__get_TreeRenderer_fn(__this, &ret6), ret6), void();
}

// private extern void UpdateHostViewTransform()
void NativeViewHost__UpdateHostViewTransform_fn(NativeViewHost* __this)
{
    __this->UpdateHostViewTransform();
}

// public override sealed Fuse.VisualContext get_VisualContext()
void NativeViewHost__get_VisualContext_fn(NativeViewHost* __this, int32_t* __retval)
{
    return *__retval = 2, void();
}

// public NativeViewHost() [instance]
void NativeViewHost::ctor_6()
{
    _isVisible = true;
    ctor_7(1);
}

// public NativeViewHost(Fuse.Controls.NativeViewHost.InitialState initialState) [instance]
void NativeViewHost::ctor_7(int32_t initialState)
{
    _isVisible = true;
    ctor_5();
    bool renderToTexture = initialState == 0;
    _draw = renderToTexture;
    _renderToTexture = renderToTexture;
    _offscreenEnabled = renderToTexture;
}

// private float4x4 CalcTransform() [instance]
::g::Uno::Float4x4 NativeViewHost::CalcTransform()
{
    return IsInGraphicsContext() ? ::g::Uno::Matrix::Mul8(::g::Fuse::Controls::IProxyHost::WorldTransformInverse(uInterface(uPtr(_proxyHost), ::TYPES[37/*Fuse.Controls.IProxyHost*/])), WorldTransform()) : LocalTransform();
}

// private extern void ClearRoot(Fuse.Controls.Native.ViewHandle viewHandle) [instance]
void NativeViewHost::ClearRoot(::g::Fuse::Controls::Native::ViewHandle* viewHandle)
{
    uPtr(_root)->RemoveChild(viewHandle);
}

// private void DisableOffscreen() [instance]
void NativeViewHost::DisableOffscreen()
{
    if (_offscreenEnabled && _isVisible)
    {
        ::g::Fuse::Controls::IProxyHost::Insert(uInterface(uPtr(_proxyHost), ::TYPES[37/*Fuse.Controls.IProxyHost*/]), _root);
        _offscreenEnabled = false;
    }
}

// private void EnableOffscreen() [instance]
void NativeViewHost::EnableOffscreen()
{
    if (!_offscreenEnabled && !_isVisible)
    {
        ::g::Fuse::Controls::IProxyHost::Remove(uInterface(uPtr(_proxyHost), ::TYPES[37/*Fuse.Controls.IProxyHost*/]), _root);
        _offscreenEnabled = true;
    }
}

// private bool get_IsInGraphicsContext() [instance]
bool NativeViewHost::IsInGraphicsContext()
{
    int32_t ret5;
    return (::g::Fuse::Visual__get_VisualContext_fn(this, &ret5), ret5) == 1;
}

// private extern void OnInvalidateWorldTransform(object sender, Uno.EventArgs args) [instance]
void NativeViewHost::OnInvalidateWorldTransform(uObject* sender, ::g::Uno::EventArgs* args)
{
    if (RenderToTexture() || !IsInGraphicsContext())
        return;

    PostUpdateTransform();
}

// private extern void PostUpdateTransform() [instance]
void NativeViewHost::PostUpdateTransform()
{
    if (!_updateTransform)
    {
        ::g::Fuse::UpdateManager::AddDeferredAction2(uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)NativeViewHost__UpdateHostViewTransform_fn, this), 1, 5);
        _updateTransform = true;
    }
}

// public bool get_RenderToTexture() [instance]
bool NativeViewHost::RenderToTexture()
{
    return _renderToTexture;
}

// public void set_RenderToTexture(bool value) [instance]
void NativeViewHost::RenderToTexture(bool value)
{
    if (_renderToTexture == value)
        return;

    _renderToTexture = value;

    if (_toggeling != nullptr)
        ::g::Uno::IDisposable::Dispose(uInterface(uPtr(_toggeling), ::g::Uno::IDisposable_typeof()));

    if (_renderToTexture)
        _toggeling = (uObject*)NativeViewHost__Enable::New1(this);
    else
        _toggeling = (uObject*)NativeViewHost__Disable::New1(this);
}

// private extern void SetRoot(Fuse.Controls.Native.ViewHandle viewHandle) [instance]
void NativeViewHost::SetRoot(::g::Fuse::Controls::Native::ViewHandle* viewHandle)
{
    uPtr(_root)->InsertChild(viewHandle);
}

// private extern void UpdateHostViewTransform() [instance]
void NativeViewHost::UpdateHostViewTransform()
{
    _updateTransform = false;

    if (_root == nullptr)
        return;

    ::g::Uno::Float4x4 transform = CalcTransform();
    ::g::Uno::Float2 size = ActualSize();
    float density = ::g::Fuse::ICommonViewport::PixelsPerPoint(uInterface(uPtr(Viewport()), ::TYPES[36/*Fuse.ICommonViewport*/]));
    ::g::Fuse::Visual* p = Parent();

    if (uIs(p, ::TYPES[14/*Fuse.Controls.Control*/]))
        uPtr(uCast< ::g::Fuse::Controls::Control*>(p, ::TYPES[14/*Fuse.Controls.Control*/]))->CompensateForScrollView(&transform);

    uPtr(_root)->UpdateViewRect(transform, size, density);
}

// public NativeViewHost New() [static]
NativeViewHost* NativeViewHost::New3()
{
    NativeViewHost* obj2 = (NativeViewHost*)uNew(NativeViewHost_typeof());
    obj2->ctor_6();
    return obj2;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigationControl.uno
// --------------------------------------------------------------------------------------

// public interfacemodifiers class NavigationControl
// {
// static NavigationControl()
static void NavigationControl__cctor_4_fn(uType* __type)
{
    ::g::Fuse::Properties_typeof()->Init();
    ::g::Fuse::Scripting::ScriptClass_typeof()->Init();
    NavigationControl::_propTransition_ = ::g::Fuse::Properties::CreateHandle();
    ::g::Fuse::Scripting::ScriptClass::Register(__type, uArray::Init< ::g::Fuse::Scripting::ScriptMember*>(::TYPES[19/*Fuse.Scripting.ScriptMember[]*/], 3, (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New1(::g::Fuse::Scripting::ScriptMethod1_typeof()->MakeType(__type, nullptr), uString::Const("gotoPath"), uDelegate::New(::g::Uno::Action2_typeof()->MakeType(__type, uObject_typeof()->Array(), nullptr), (void*)NavigationControl__gotoPath_fn)), (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New1(::g::Fuse::Scripting::ScriptMethod1_typeof()->MakeType(__type, nullptr), uString::Const("seekToPath"), uDelegate::New(::g::Uno::Action2_typeof()->MakeType(__type, uObject_typeof()->Array(), nullptr), (void*)NavigationControl__seekToPath_fn)), (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New1(::g::Fuse::Scripting::ScriptMethod1_typeof()->MakeType(__type, nullptr), uString::Const("modifyPath"), uDelegate::New(::g::Uno::Action2_typeof()->MakeType(__type, uObject_typeof()->Array(), nullptr), (void*)NavigationControl__modifyPath_fn))));
}

static void NavigationControl_build(uType* type)
{
    type->SetDependencies(
        ::g::Fuse::Navigation::Navigation_typeof(),
        ::g::Fuse::Navigation::PageData_typeof(),
        ::g::Fuse::Navigation::Router_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(NavigationControl_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(NavigationControl_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(NavigationControl_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(NavigationControl_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(NavigationControl_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(NavigationControl_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(NavigationControl_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(NavigationControl_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(NavigationControl_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(NavigationControl_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(NavigationControl_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(NavigationControl_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(NavigationControl_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(NavigationControl_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(NavigationControl_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(NavigationControl_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(NavigationControl_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(NavigationControl_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(NavigationControl_type, interface18),
        ::g::Fuse::Navigation::INavigation_typeof(), offsetof(NavigationControl_type, interface19),
        ::g::Fuse::Reactive::IObserver_typeof(), offsetof(NavigationControl_type, interface20),
        ::g::Fuse::Node__ISubtreeDataProvider_typeof(), offsetof(NavigationControl_type, interface21),
        ::g::Fuse::Navigation::IBaseNavigation_typeof(), offsetof(NavigationControl_type, interface22));
    type->SetFields(115,
        ::g::Fuse::Controls::NavigationControlTransition_typeof(), offsetof(NavigationControl, _transition), 0,
        ::g::Fuse::Navigation::VisualNavigation_typeof(), offsetof(NavigationControl, _navigation), 0,
        ::g::Uno::Bool_typeof(), offsetof(NavigationControl, _isRouterOutlet), 0,
        ::g::Fuse::IArray_typeof(), offsetof(NavigationControl, _pageHistory), 0,
        ::g::Uno::Int_typeof(), offsetof(NavigationControl, _curPageIndex), 0,
        ::g::Fuse::Controls::NavigationControlBlockInput_typeof(), offsetof(NavigationControl, _blockInput), 0,
        ::g::Fuse::Triggers::Trigger_typeof(), offsetof(NavigationControl, _blockInputTrigger), 0,
        ::g::Fuse::Visual_typeof(), offsetof(NavigationControl, _AncestorPage), 0,
        ::g::Fuse::Navigation::RouterPage_typeof(), offsetof(NavigationControl, _AncestorRouterPage), 0,
        ::g::Fuse::PropertyHandle_typeof(), (uintptr_t)&NavigationControl::_propTransition_, uFieldFlagsStatic);
}

NavigationControl_type* NavigationControl_typeof()
{
    static uSStrong<NavigationControl_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::Panel_typeof();
    options.FieldCount = 125;
    options.InterfaceCount = 23;
    options.DependencyCount = 3;
    options.ObjectSize = sizeof(NavigationControl);
    options.TypeSize = sizeof(NavigationControl_type);
    type = (NavigationControl_type*)uClassType::New("Fuse.Controls.NavigationControl", options);
    type->fp_build_ = NavigationControl_build;
    type->fp_cctor_ = NavigationControl__cctor_4_fn;
    type->fp_OnChildAdded = (void(*)(::g::Fuse::Visual*, ::g::Fuse::Node*))NavigationControl__OnChildAdded_fn;
    type->fp_OnChildRemoved = (void(*)(::g::Fuse::Visual*, ::g::Fuse::Node*))NavigationControl__OnChildRemoved_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))NavigationControl__OnRooted_fn;
    type->fp_OnRootedPreChildren = (void(*)(::g::Fuse::Visual*))NavigationControl__OnRootedPreChildren_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))NavigationControl__OnUnrooted_fn;
    type->fp_UpdateInteraction = NavigationControl__UpdateInteraction_fn;
    type->fp_UpdateProgress = NavigationControl__UpdateProgress_fn;
    type->interface19.fp_GetPageState = (void(*)(uObject*, ::g::Fuse::Visual*, ::g::Fuse::Navigation::NavigationPageState*))NavigationControl__FuseNavigationINavigationGetPageState_fn;
    type->interface20.fp_OnSet = (void(*)(uObject*, uObject*))NavigationControl__FuseReactiveIObserverOnSet_fn;
    type->interface20.fp_OnFailed = (void(*)(uObject*, uString*))NavigationControl__FuseReactiveIObserverOnFailed_fn;
    type->interface20.fp_OnAdd = (void(*)(uObject*, uObject*))NavigationControl__FuseReactiveIObserverOnAdd_fn;
    type->interface20.fp_OnRemoveAt = (void(*)(uObject*, int32_t*))NavigationControl__FuseReactiveIObserverOnRemoveAt_fn;
    type->interface20.fp_OnInsertAt = (void(*)(uObject*, int32_t*, uObject*))NavigationControl__FuseReactiveIObserverOnInsertAt_fn;
    type->interface20.fp_OnNewAt = (void(*)(uObject*, int32_t*, uObject*))NavigationControl__FuseReactiveIObserverOnNewAt_fn;
    type->interface20.fp_OnNewAll = (void(*)(uObject*, uObject*))NavigationControl__FuseReactiveIObserverOnNewAll_fn;
    type->interface20.fp_OnClear = (void(*)(uObject*))NavigationControl__FuseReactiveIObserverOnClear_fn;
    type->interface21.fp_TryGetDataProvider = (void(*)(uObject*, ::g::Fuse::Node*, int32_t*, uObject**, int32_t*))NavigationControl__FuseNodeISubtreeDataProviderTryGetDataProvider_fn;
    type->interface19.fp_get_ActivePage = (void(*)(uObject*, ::g::Fuse::Visual**))NavigationControl__FuseNavigationINavigationget_ActivePage_fn;
    type->interface19.fp_get_State = (void(*)(uObject*, int32_t*))NavigationControl__FuseNavigationINavigationget_State_fn;
    type->interface19.fp_Goto = (void(*)(uObject*, ::g::Fuse::Visual*, int32_t*))NavigationControl__Goto_fn;
    type->interface19.fp_Toggle = (void(*)(uObject*, ::g::Fuse::Visual*))NavigationControl__Toggle_fn;
    type->interface19.fp_add_PageProgressChanged = (void(*)(uObject*, uDelegate*))NavigationControl__add_PageProgressChanged_fn;
    type->interface19.fp_remove_PageProgressChanged = (void(*)(uObject*, uDelegate*))NavigationControl__remove_PageProgressChanged_fn;
    type->interface19.fp_add_Navigated = (void(*)(uObject*, uDelegate*))NavigationControl__add_Navigated_fn;
    type->interface19.fp_remove_Navigated = (void(*)(uObject*, uDelegate*))NavigationControl__remove_Navigated_fn;
    type->interface19.fp_add_StateChanged = (void(*)(uObject*, uDelegate*))NavigationControl__add_StateChanged_fn;
    type->interface19.fp_remove_StateChanged = (void(*)(uObject*, uDelegate*))NavigationControl__remove_StateChanged_fn;
    type->interface22.fp_GoForward = (void(*)(uObject*))NavigationControl__GoForward_fn;
    type->interface22.fp_GoBack = (void(*)(uObject*))NavigationControl__GoBack_fn;
    type->interface22.fp_get_CanGoBack = (void(*)(uObject*, bool*))NavigationControl__get_CanGoBack_fn;
    type->interface22.fp_get_CanGoForward = (void(*)(uObject*, bool*))NavigationControl__get_CanGoForward_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public Fuse.Visual get_Active()
void NavigationControl__get_Active_fn(NavigationControl* __this, ::g::Fuse::Visual** __retval)
{
    *__retval = __this->Active();
}

// public void set_Active(Fuse.Visual value)
void NavigationControl__set_Active_fn(NavigationControl* __this, ::g::Fuse::Visual* value)
{
    __this->Active(value);
}

// private static void alterPath(Fuse.Controls.NavigationControl nav, object[] args, string opName, Fuse.Navigation.NavigationGotoMode gotoMode)
void NavigationControl__alterPath_fn(NavigationControl* nav, uArray* args, uString* opName, int32_t* gotoMode)
{
    NavigationControl::alterPath(nav, args, opName, *gotoMode);
}

// protected generated Fuse.Visual get_AncestorPage()
void NavigationControl__get_AncestorPage_fn(NavigationControl* __this, ::g::Fuse::Visual** __retval)
{
    *__retval = __this->AncestorPage();
}

// private generated void set_AncestorPage(Fuse.Visual value)
void NavigationControl__set_AncestorPage_fn(NavigationControl* __this, ::g::Fuse::Visual* value)
{
    __this->AncestorPage(value);
}

// internal generated Fuse.Navigation.RouterPage get_AncestorRouterPage()
void NavigationControl__get_AncestorRouterPage_fn(NavigationControl* __this, ::g::Fuse::Navigation::RouterPage** __retval)
{
    *__retval = __this->AncestorRouterPage();
}

// private generated void set_AncestorRouterPage(Fuse.Navigation.RouterPage value)
void NavigationControl__set_AncestorRouterPage_fn(NavigationControl* __this, ::g::Fuse::Navigation::RouterPage* value)
{
    __this->AncestorRouterPage(value);
}

// private void BlockInputRooted()
void NavigationControl__BlockInputRooted_fn(NavigationControl* __this)
{
    __this->BlockInputRooted();
}

// private void BlockInputUnrooted()
void NavigationControl__BlockInputUnrooted_fn(NavigationControl* __this)
{
    __this->BlockInputUnrooted();
}

// public bool get_CanGoBack()
void NavigationControl__get_CanGoBack_fn(NavigationControl* __this, bool* __retval)
{
    *__retval = __this->CanGoBack();
}

// public bool get_CanGoForward()
void NavigationControl__get_CanGoForward_fn(NavigationControl* __this, bool* __retval)
{
    *__retval = __this->CanGoForward();
}

// private void CleanupTriggers(Fuse.Elements.Element page, Fuse.Controls.NavigationControl.ControlPageData data)
void NavigationControl__CleanupTriggers_fn(NavigationControl* __this, ::g::Fuse::Elements::Element* page, NavigationControl__ControlPageData* data)
{
    __this->CleanupTriggers(page, data);
}

// private void DisableBlockInput()
void NavigationControl__DisableBlockInput_fn(NavigationControl* __this)
{
    __this->DisableBlockInput();
}

// private void EnableBlockInput()
void NavigationControl__EnableBlockInput_fn(NavigationControl* __this)
{
    __this->EnableBlockInput();
}

// private void FullUpdatePages([Fuse.Controls.NavigationControl.UpdateFlags flags])
void NavigationControl__FullUpdatePages_fn(NavigationControl* __this, int32_t* flags)
{
    __this->FullUpdatePages(*flags);
}

// public Fuse.Visual Fuse.Navigation.INavigation.get_ActivePage()
void NavigationControl__FuseNavigationINavigationget_ActivePage_fn(NavigationControl* __this, ::g::Fuse::Visual** __retval)
{
    return *__retval = uPtr(__this->Navigation())->ActivePage(), void();
}

// public Fuse.Navigation.NavigationPageState Fuse.Navigation.INavigation.GetPageState(Fuse.Visual page)
void NavigationControl__FuseNavigationINavigationGetPageState_fn(NavigationControl* __this, ::g::Fuse::Visual* page, ::g::Fuse::Navigation::NavigationPageState* __retval)
{
    return *__retval = uPtr(__this->Navigation())->GetPageState(page), void();
}

// public Fuse.Navigation.NavigationState Fuse.Navigation.INavigation.get_State()
void NavigationControl__FuseNavigationINavigationget_State_fn(NavigationControl* __this, int32_t* __retval)
{
    return *__retval = uPtr(__this->Navigation())->State(), void();
}

// private Fuse.Node.ContextDataResult Fuse.Node.ISubtreeDataProvider.TryGetDataProvider(Fuse.Node n, Fuse.Node.DataType type, object& provider)
void NavigationControl__FuseNodeISubtreeDataProviderTryGetDataProvider_fn(NavigationControl* __this, ::g::Fuse::Node* n, int32_t* type, uObject** provider, int32_t* __retval)
{
    int32_t type_ = *type;
    *provider = nullptr;
    ::g::Fuse::Visual* v = uAs< ::g::Fuse::Visual*>(n, ::TYPES[4/*Fuse.Visual*/]);

    if (v == nullptr)
        return *__retval = 0, void();

    ::g::Fuse::Navigation::PageData* pd = ::g::Fuse::Navigation::PageData::Get(v);

    if (pd == nullptr)
        return *__retval = 0, void();

    *provider = uPtr(pd)->Context();
    return *__retval = (type_ == 1) ? 2 : 0, void();
}

// private void Fuse.Reactive.IObserver.OnAdd(object value)
void NavigationControl__FuseReactiveIObserverOnAdd_fn(NavigationControl* __this, uObject* value)
{
    __this->FullUpdatePages(2);
}

// private void Fuse.Reactive.IObserver.OnClear()
void NavigationControl__FuseReactiveIObserverOnClear_fn(NavigationControl* __this)
{
    __this->FullUpdatePages(0);
}

// private void Fuse.Reactive.IObserver.OnFailed(string message)
void NavigationControl__FuseReactiveIObserverOnFailed_fn(NavigationControl* __this, uString* message)
{
    __this->FullUpdatePages(0);
}

// private void Fuse.Reactive.IObserver.OnInsertAt(int index, object value)
void NavigationControl__FuseReactiveIObserverOnInsertAt_fn(NavigationControl* __this, int32_t* index, uObject* value)
{
    int32_t index_ = *index;

    if (index_ >= __this->_curPageIndex)
        __this->FullUpdatePages(0);
    else
        __this->_curPageIndex++;
}

// private void Fuse.Reactive.IObserver.OnNewAll(Fuse.IArray values)
void NavigationControl__FuseReactiveIObserverOnNewAll_fn(NavigationControl* __this, uObject* values)
{
    __this->FullUpdatePages(0);
}

// private void Fuse.Reactive.IObserver.OnNewAt(int index, object value)
void NavigationControl__FuseReactiveIObserverOnNewAt_fn(NavigationControl* __this, int32_t* index, uObject* value)
{
    int32_t index_ = *index;

    if (index_ == __this->_curPageIndex)
        __this->FullUpdatePages(4);
}

// private void Fuse.Reactive.IObserver.OnRemoveAt(int index)
void NavigationControl__FuseReactiveIObserverOnRemoveAt_fn(NavigationControl* __this, int32_t* index)
{
    int32_t index_ = *index;

    if (index_ == __this->_curPageIndex)
        __this->FullUpdatePages(0);
    else if (index_ < __this->_curPageIndex)
        __this->_curPageIndex--;
}

// private void Fuse.Reactive.IObserver.OnSet(object newValue)
void NavigationControl__FuseReactiveIObserverOnSet_fn(NavigationControl* __this, uObject* newValue)
{
    __this->FullUpdatePages(1);
}

// internal static Fuse.Controls.NavigationControl.ControlPageData GetControlPageData(Fuse.Visual elm, [bool create])
void NavigationControl__GetControlPageData_fn(::g::Fuse::Visual* elm, bool* create, NavigationControl__ControlPageData** __retval)
{
    *__retval = NavigationControl::GetControlPageData(elm, *create);
}

// public static Fuse.Controls.NavigationControlTransition GetTransition(Fuse.Visual elm)
void NavigationControl__GetTransition_fn(::g::Fuse::Visual* elm, int32_t* __retval)
{
    *__retval = NavigationControl::GetTransition(elm);
}

// public void GoBack()
void NavigationControl__GoBack_fn(NavigationControl* __this)
{
    __this->GoBack();
}

// public void GoForward()
void NavigationControl__GoForward_fn(NavigationControl* __this)
{
    __this->GoForward();
}

// public void Goto(Fuse.Visual node, Fuse.Navigation.NavigationGotoMode mode)
void NavigationControl__Goto_fn(NavigationControl* __this, ::g::Fuse::Visual* node, int32_t* mode)
{
    __this->Goto(node, *mode);
}

// private static void gotoPath(Fuse.Controls.NavigationControl nav, object[] args)
void NavigationControl__gotoPath_fn(NavigationControl* nav, uArray* args)
{
    NavigationControl::gotoPath(nav, args);
}

// public bool get_IsRouterOutlet()
void NavigationControl__get_IsRouterOutlet_fn(NavigationControl* __this, bool* __retval)
{
    *__retval = __this->IsRouterOutlet();
}

// public void set_IsRouterOutlet(bool value)
void NavigationControl__set_IsRouterOutlet_fn(NavigationControl* __this, bool* value)
{
    __this->IsRouterOutlet(*value);
}

// private static void modifyPath(Fuse.Controls.NavigationControl nav, object[] args)
void NavigationControl__modifyPath_fn(NavigationControl* nav, uArray* args)
{
    NavigationControl::modifyPath(nav, args);
}

// public void add_Navigated(Fuse.Navigation.NavigatedHandler value)
void NavigationControl__add_Navigated_fn(NavigationControl* __this, uDelegate* value)
{
    __this->add_Navigated(value);
}

// public void remove_Navigated(Fuse.Navigation.NavigatedHandler value)
void NavigationControl__remove_Navigated_fn(NavigationControl* __this, uDelegate* value)
{
    __this->remove_Navigated(value);
}

// internal Fuse.Navigation.VisualNavigation get_Navigation()
void NavigationControl__get_Navigation_fn(NavigationControl* __this, ::g::Fuse::Navigation::VisualNavigation** __retval)
{
    *__retval = __this->Navigation();
}

// private void OnActivePageChanged(object sender, Fuse.Visual active)
void NavigationControl__OnActivePageChanged_fn(NavigationControl* __this, uObject* sender, ::g::Fuse::Visual* active)
{
    __this->OnActivePageChanged(sender, active);
}

// protected override sealed void OnChildAdded(Fuse.Node n)
void NavigationControl__OnChildAdded_fn(NavigationControl* __this, ::g::Fuse::Node* n)
{
    if (__this->IsRootingStarted())
    {
        ::g::Fuse::Elements::Element* v = uAs< ::g::Fuse::Elements::Element*>(n, ::TYPES[5/*Fuse.Elements.Element*/]);

        if (v != nullptr)
            __this->UpdateChild(v);
    }

    ::g::Fuse::Controls::LayoutControl__OnChildAdded_fn(__this, n);
}

// protected override void OnChildRemoved(Fuse.Node n)
void NavigationControl__OnChildRemoved_fn(NavigationControl* __this, ::g::Fuse::Node* n)
{
    ::g::Fuse::Elements::Element* pc = uAs< ::g::Fuse::Elements::Element*>(n, ::TYPES[5/*Fuse.Elements.Element*/]);

    if (pc != nullptr)
    {
        NavigationControl__ControlPageData* pd = NavigationControl::GetControlPageData(pc, false);

        if (pd != nullptr)
            __this->CleanupTriggers(pc, pd);
    }

    ::g::Fuse::Controls::LayoutControl__OnChildRemoved_fn(__this, n);
}

// private void OnChildRouterPagesUpdated()
void NavigationControl__OnChildRouterPagesUpdated_fn(NavigationControl* __this)
{
    __this->OnChildRouterPagesUpdated();
}

// private void OnPageHistoryChanged()
void NavigationControl__OnPageHistoryChanged_fn(NavigationControl* __this)
{
    __this->OnPageHistoryChanged();
}

// private void OnPageHistoryUnrooted()
void NavigationControl__OnPageHistoryUnrooted_fn(NavigationControl* __this)
{
    __this->OnPageHistoryUnrooted();
}

// private void OnPageProgressChanged(object page, Fuse.Navigation.NavigationArgs args)
void NavigationControl__OnPageProgressChanged_fn(NavigationControl* __this, uObject* page, ::g::Fuse::Navigation::NavigationArgs* args)
{
    __this->OnPageProgressChanged(page, args);
}

// protected override void OnRooted()
void NavigationControl__OnRooted_fn(NavigationControl* __this)
{
    ::g::Fuse::Controls::Panel__OnRooted_fn(__this);
    __this->UpdateInteraction();
    uPtr(__this->Navigation())->add_PageProgressChanged(uDelegate::New(::g::Fuse::Navigation::NavigationHandler_typeof(), (void*)NavigationControl__OnPageProgressChanged_fn, __this));

    for (::g::Fuse::Elements::Element* c = (::g::Fuse::Elements::Element*)__this->FirstChild(::TYPES[57/*Fuse.Visual.FirstChild<Fuse.Elements.Element>*/]); c != nullptr; c = (::g::Fuse::Elements::Element*)uPtr(c)->NextSibling(::TYPES[58/*Fuse.Node.NextSibling<Fuse.Elements.Element>*/]))
        __this->UpdateChild(c);

    if (__this->AncestorRouterPage() != nullptr)
        uPtr(__this->AncestorRouterPage())->add_ChildRouterPagesUpdated(uDelegate::New(::g::Fuse::Navigation::ChildRouterPagesUpdated_typeof(), (void*)NavigationControl__OnChildRouterPagesUpdated_fn, __this));

    __this->OnPageHistoryChanged();
    __this->BlockInputRooted();
}

// protected override sealed void OnRootedPreChildren()
void NavigationControl__OnRootedPreChildren_fn(NavigationControl* __this)
{
    ::g::Fuse::Elements::Element__OnRootedPreChildren_fn(__this);

    if (__this->IsRouterOutlet())
    {
        __this->AncestorPage(::g::Fuse::Navigation::Router::FindRouterOutletPage(__this));

        if (__this->AncestorPage() != nullptr)
        {
            ::g::Fuse::Navigation::PageData* pd = ::g::Fuse::Navigation::PageData::GetOrCreate(__this->AncestorPage(), true);
            uPtr(pd)->add_RouterPageChanged(uDelegate::New(::g::Fuse::Navigation::RouterPageChangedHandler_typeof(), (void*)NavigationControl__OnRouterPageChanged_fn, __this));
            __this->AncestorRouterPage(pd->RouterPage());
        }
        else
        {
            ::g::Fuse::Navigation::Router* router = ::g::Fuse::Navigation::Router::TryFindRouter(__this);

            if (router != nullptr)
                __this->AncestorRouterPage(uPtr(router)->RootPage());
            else
                __this->AncestorRouterPage(::g::Fuse::Navigation::RouterPage::CreateDefault());
        }
    }
    else
        __this->AncestorRouterPage(::g::Fuse::Navigation::RouterPage::CreateDefault());
}

// private void OnRouterPageChanged(object sender, Fuse.Navigation.RouterPage routerPage)
void NavigationControl__OnRouterPageChanged_fn(NavigationControl* __this, uObject* sender, ::g::Fuse::Navigation::RouterPage* routerPage)
{
    __this->OnRouterPageChanged(sender, routerPage);
}

// protected override void OnUnrooted()
void NavigationControl__OnUnrooted_fn(NavigationControl* __this)
{
    __this->BlockInputUnrooted();
    __this->OnPageHistoryUnrooted();

    if (__this->AncestorPage() != nullptr)
    {
        uPtr(::g::Fuse::Navigation::PageData::GetOrCreate(__this->AncestorPage(), true))->remove_RouterPageChanged(uDelegate::New(::g::Fuse::Navigation::RouterPageChangedHandler_typeof(), (void*)NavigationControl__OnRouterPageChanged_fn, __this));
        __this->AncestorPage(nullptr);
    }

    uPtr(__this->Navigation())->remove_PageProgressChanged(uDelegate::New(::g::Fuse::Navigation::NavigationHandler_typeof(), (void*)NavigationControl__OnPageProgressChanged_fn, __this));

    for (::g::Fuse::Elements::Element* c = (::g::Fuse::Elements::Element*)__this->FirstChild(::TYPES[57/*Fuse.Visual.FirstChild<Fuse.Elements.Element>*/]); c != nullptr; c = (::g::Fuse::Elements::Element*)uPtr(c)->NextSibling(::TYPES[58/*Fuse.Node.NextSibling<Fuse.Elements.Element>*/]))
    {
        NavigationControl__ControlPageData* pd = NavigationControl::GetControlPageData(c, false);

        if (pd == nullptr)
            continue;

        __this->CleanupTriggers(c, pd);
    }

    ::g::Fuse::Controls::Panel__OnUnrooted_fn(__this);
}

// public void add_PageProgressChanged(Fuse.Navigation.NavigationHandler value)
void NavigationControl__add_PageProgressChanged_fn(NavigationControl* __this, uDelegate* value)
{
    __this->add_PageProgressChanged(value);
}

// public void remove_PageProgressChanged(Fuse.Navigation.NavigationHandler value)
void NavigationControl__remove_PageProgressChanged_fn(NavigationControl* __this, uDelegate* value)
{
    __this->remove_PageProgressChanged(value);
}

// protected Fuse.Controls.NavigationControlTransition PageTransition(Fuse.Visual elm)
void NavigationControl__PageTransition_fn(NavigationControl* __this, ::g::Fuse::Visual* elm, int32_t* __retval)
{
    *__retval = __this->PageTransition(elm);
}

// internal void RootActivePage()
void NavigationControl__RootActivePage_fn(NavigationControl* __this)
{
    __this->RootActivePage();
}

// internal Fuse.Navigation.OutletType get_RouterOutletType()
void NavigationControl__get_RouterOutletType_fn(NavigationControl* __this, int32_t* __retval)
{
    *__retval = __this->RouterOutletType();
}

// private static void seekToPath(Fuse.Controls.NavigationControl nav, object[] args)
void NavigationControl__seekToPath_fn(NavigationControl* nav, uArray* args)
{
    NavigationControl::seekToPath(nav, args);
}

// public void add_StateChanged(Uno.UX.ValueChangedHandler<Fuse.Navigation.NavigationState> value)
void NavigationControl__add_StateChanged_fn(NavigationControl* __this, uDelegate* value)
{
    __this->add_StateChanged(value);
}

// public void remove_StateChanged(Uno.UX.ValueChangedHandler<Fuse.Navigation.NavigationState> value)
void NavigationControl__remove_StateChanged_fn(NavigationControl* __this, uDelegate* value)
{
    __this->remove_StateChanged(value);
}

// public void Toggle(Fuse.Visual node)
void NavigationControl__Toggle_fn(NavigationControl* __this, ::g::Fuse::Visual* node)
{
    __this->Toggle(node);
}

// public Fuse.Controls.NavigationControlTransition get_Transition()
void NavigationControl__get_Transition_fn(NavigationControl* __this, int32_t* __retval)
{
    *__retval = __this->Transition();
}

// public void set_Transition(Fuse.Controls.NavigationControlTransition value)
void NavigationControl__set_Transition_fn(NavigationControl* __this, int32_t* value)
{
    __this->Transition(*value);
}

// internal void UnrootActivePage()
void NavigationControl__UnrootActivePage_fn(NavigationControl* __this)
{
    __this->UnrootActivePage();
}

// private void UpdateBlockInput()
void NavigationControl__UpdateBlockInput_fn(NavigationControl* __this)
{
    __this->UpdateBlockInput();
}

// private void UpdateChild(Fuse.Elements.Element c)
void NavigationControl__UpdateChild_fn(NavigationControl* __this, ::g::Fuse::Elements::Element* c)
{
    __this->UpdateChild(c);
}

// protected virtual void UpdateInteraction()
void NavigationControl__UpdateInteraction_fn(NavigationControl* __this)
{
}

// protected virtual void UpdateProgress(Fuse.Elements.Element page, Fuse.Navigation.NavigationPageState state, Fuse.Controls.NavigationControl.ControlPageData pd)
void NavigationControl__UpdateProgress_fn(NavigationControl* __this, ::g::Fuse::Elements::Element* page, ::g::Fuse::Navigation::NavigationPageState* state, NavigationControl__ControlPageData* pd)
{
}

uSStrong< ::g::Fuse::PropertyHandle*> NavigationControl::_propTransition_;

// public Fuse.Visual get_Active() [instance]
::g::Fuse::Visual* NavigationControl::Active()
{
    return uPtr(_navigation)->Active();
}

// public void set_Active(Fuse.Visual value) [instance]
void NavigationControl::Active(::g::Fuse::Visual* value)
{
    uPtr(_navigation)->Active(value);
}

// protected generated Fuse.Visual get_AncestorPage() [instance]
::g::Fuse::Visual* NavigationControl::AncestorPage()
{
    return _AncestorPage;
}

// private generated void set_AncestorPage(Fuse.Visual value) [instance]
void NavigationControl::AncestorPage(::g::Fuse::Visual* value)
{
    _AncestorPage = value;
}

// internal generated Fuse.Navigation.RouterPage get_AncestorRouterPage() [instance]
::g::Fuse::Navigation::RouterPage* NavigationControl::AncestorRouterPage()
{
    return _AncestorRouterPage;
}

// private generated void set_AncestorRouterPage(Fuse.Navigation.RouterPage value) [instance]
void NavigationControl::AncestorRouterPage(::g::Fuse::Navigation::RouterPage* value)
{
    _AncestorRouterPage = value;
}

// private void BlockInputRooted() [instance]
void NavigationControl::BlockInputRooted()
{
    UpdateBlockInput();
}

// private void BlockInputUnrooted() [instance]
void NavigationControl::BlockInputUnrooted()
{
    DisableBlockInput();
}

// public bool get_CanGoBack() [instance]
bool NavigationControl::CanGoBack()
{
    return uPtr(Navigation())->CanGoBack();
}

// public bool get_CanGoForward() [instance]
bool NavigationControl::CanGoForward()
{
    return uPtr(Navigation())->CanGoForward();
}

// private void CleanupTriggers(Fuse.Elements.Element page, Fuse.Controls.NavigationControl.ControlPageData data) [instance]
void NavigationControl::CleanupTriggers(::g::Fuse::Elements::Element* page, NavigationControl__ControlPageData* data)
{
    bool ret2;
    bool ret3;
    bool ret4;
    bool ret5;

    if (uPtr(data)->Enter != nullptr)
    {
        ::g::Uno::Collections::ICollection::Remove_ex(uInterface(uPtr(uPtr(page)->Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), uPtr(data)->Enter, &ret2);
        data->Enter = nullptr;
    }

    if (uPtr(data)->Exit != nullptr)
    {
        ::g::Uno::Collections::ICollection::Remove_ex(uInterface(uPtr(uPtr(page)->Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), uPtr(data)->Exit, &ret3);
        data->Exit = nullptr;
    }

    if (uPtr(data)->Inactive != nullptr)
    {
        ::g::Uno::Collections::ICollection::Remove_ex(uInterface(uPtr(uPtr(page)->Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), uPtr(data)->Inactive, &ret4);
        data->Inactive = nullptr;
    }

    if (uPtr(data)->Removing != nullptr)
    {
        ::g::Uno::Collections::ICollection::Remove_ex(uInterface(uPtr(uPtr(page)->Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), uPtr(data)->Removing, &ret5);
        data->Removing = nullptr;
    }
}

// private void DisableBlockInput() [instance]
void NavigationControl::DisableBlockInput()
{
    bool ret6;

    if (_blockInputTrigger != nullptr)
    {
        ::g::Uno::Collections::ICollection::Remove_ex(uInterface(uPtr(Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), _blockInputTrigger, &ret6);
        _blockInputTrigger = nullptr;
    }
}

// private void EnableBlockInput() [instance]
void NavigationControl::EnableBlockInput()
{
    if (_blockInputTrigger == nullptr)
    {
        _blockInputTrigger = ::g::Fuse::Controls::NavigationInternal::BlockInputWhileNavigating::New3(this);
        ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), _blockInputTrigger);
    }
}

// private void FullUpdatePages([Fuse.Controls.NavigationControl.UpdateFlags flags]) [instance]
void NavigationControl::FullUpdatePages(int32_t flags)
{
    int32_t pageNdx = ::g::Fuse::IArray::Length(uInterface(uPtr(_pageHistory), ::g::Fuse::IArray_typeof())) - 1;
    ::g::Fuse::Navigation::RouterRequest* rr = ::g::Fuse::Navigation::RouterRequest::New1(0);
    rr->Operation((pageNdx < _curPageIndex) ? 3 : (pageNdx == _curPageIndex) ? 2 : (pageNdx > 0) ? 1 : 0);

    if ((flags & 1) == 1)
        uPtr(rr)->Operation(0);
    else if ((flags & 2) == 2)
        uPtr(rr)->Operation((pageNdx > 0) ? 1 : 0);
    else if ((flags & 4) == 4)
        uPtr(rr)->Operation(2);

    rr->Transition = (((flags & 8) == 8) ? 1 : 0);
    ::g::Fuse::Navigation::RouterPage* rPage;

    if (pageNdx >= uPtr(uPtr(AncestorRouterPage())->ChildRouterPages())->Count())
    {
        rPage = ::g::Fuse::Navigation::RouterPage::CreateDefault();
        ::g::Fuse::Diagnostics::InternalError(uString::Const("Inconsistent navigation history"), this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigationControl.Pages.uno"), 101, uString::Const("FullUpdatePages"));
    }
    else if (pageNdx >= 0)
        rPage = (::g::Fuse::Navigation::RouterPage*)uPtr(uPtr(AncestorRouterPage())->ChildRouterPages())->Item(pageNdx);
    else
        rPage = ::g::Fuse::Navigation::RouterPage::CreateDefault();

    uObject* navRequest = ::g::Fuse::Navigation::RouterPage::GetNavigationRequest(uPtr(rPage)->Context);

    if (navRequest != nullptr)
    {
        if (!uPtr(rr)->AddArguments(navRequest, 152))
            ::g::Fuse::Diagnostics::UserError(uString::Const("Invalid $navigationRequest, visual result may not match expectation"), this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigationControl.Pages.uno"), 121, uString::Const("FullUpdatePages"), nullptr);
    }

    ::g::Fuse::Visual* ignore;
    ::g::Fuse::Navigation::IRouterOutlet::Goto(uInterface((uObject*)this, ::g::Fuse::Navigation::IRouterOutlet_typeof()), rPage, rr->Transition, rr->Operation(), rr->Style, &ignore);
    _curPageIndex = pageNdx;
}

// public void GoBack() [instance]
void NavigationControl::GoBack()
{
    uPtr(Navigation())->GoBack();
}

// public void GoForward() [instance]
void NavigationControl::GoForward()
{
    uPtr(Navigation())->GoForward();
}

// public void Goto(Fuse.Visual node, Fuse.Navigation.NavigationGotoMode mode) [instance]
void NavigationControl::Goto(::g::Fuse::Visual* node, int32_t mode)
{
    uPtr(Navigation())->Goto(node, mode);
}

// public bool get_IsRouterOutlet() [instance]
bool NavigationControl::IsRouterOutlet()
{
    return _isRouterOutlet;
}

// public void set_IsRouterOutlet(bool value) [instance]
void NavigationControl::IsRouterOutlet(bool value)
{
    _isRouterOutlet = value;
}

// public void add_Navigated(Fuse.Navigation.NavigatedHandler value) [instance]
void NavigationControl::add_Navigated(uDelegate* value)
{
    uPtr(Navigation())->add_Navigated(value);
}

// public void remove_Navigated(Fuse.Navigation.NavigatedHandler value) [instance]
void NavigationControl::remove_Navigated(uDelegate* value)
{
    uPtr(Navigation())->remove_Navigated(value);
}

// internal Fuse.Navigation.VisualNavigation get_Navigation() [instance]
::g::Fuse::Navigation::VisualNavigation* NavigationControl::Navigation()
{
    return _navigation;
}

// private void OnActivePageChanged(object sender, Fuse.Visual active) [instance]
void NavigationControl::OnActivePageChanged(uObject* sender, ::g::Fuse::Visual* active)
{
    if (AncestorRouterPage() != nullptr)
    {
        ::g::Fuse::Visual* ignore;
        ::g::Fuse::Navigation::RouterPage* current = ::g::Fuse::Navigation::IRouterOutlet::GetCurrent(uInterface(uPtr(uAs<uObject*>(this, ::g::Fuse::Navigation::IRouterOutlet_typeof())), ::g::Fuse::Navigation::IRouterOutlet_typeof()), &ignore);
        ::g::Fuse::Reactive::ObserverMap* pages = uPtr(AncestorRouterPage())->ChildRouterPages();
        bool changed = false;

        if (uPtr(pages)->Count() == 0)
        {
            uPtr(pages)->Add(current);
            changed = true;
        }
        else if (((::g::Fuse::Navigation::RouterPage*)uPtr(pages)->Item(uPtr(pages)->Count() - 1)) != current)
        {
            uPtr(pages)->Item(uPtr(pages)->Count() - 1, current);
            changed = true;
        }

        if (changed)
            ::g::Fuse::Navigation::RouterPage::BubbleHistoryChanged(this);
    }
}

// private void OnChildRouterPagesUpdated() [instance]
void NavigationControl::OnChildRouterPagesUpdated()
{
    ::g::Fuse::Navigation::RouterPage::BubbleHistoryChanged(this);
}

// private void OnPageHistoryChanged() [instance]
void NavigationControl::OnPageHistoryChanged()
{
    if (AncestorRouterPage() == nullptr)
        return;

    uPtr(uPtr(AncestorRouterPage())->ChildRouterPages())->Detach();

    if (_pageHistory == nullptr)
        return;

    uObject* obs = uAs<uObject*>(_pageHistory, ::g::Fuse::Reactive::IObservableArray_typeof());

    if (obs != nullptr)
        uPtr(uPtr(AncestorRouterPage())->ChildRouterPages())->Attach(obs, (uObject*)this);
    else
        ::g::Fuse::Diagnostics::UserError(uString::Const("PageHistory expects an observable array. It will not work correctly otherwise"), this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigationControl.Pages.uno"), 54, uString::Const("OnPageHistoryChanged"), nullptr);

    _curPageIndex = -1;
}

// private void OnPageHistoryUnrooted() [instance]
void NavigationControl::OnPageHistoryUnrooted()
{
    if (AncestorRouterPage() != nullptr)
        uPtr(uPtr(AncestorRouterPage())->ChildRouterPages())->Detach();
}

// private void OnPageProgressChanged(object page, Fuse.Navigation.NavigationArgs args) [instance]
void NavigationControl::OnPageProgressChanged(uObject* page, ::g::Fuse::Navigation::NavigationArgs* args)
{
    for (int32_t i = 0; i < uPtr(Navigation())->PageCount(); ++i)
    {
        ::g::Fuse::Elements::Element* n = uAs< ::g::Fuse::Elements::Element*>(uPtr(Navigation())->GetPage(i), ::TYPES[5/*Fuse.Elements.Element*/]);

        if (n == nullptr)
            return;

        UpdateProgress(n, uPtr(Navigation())->GetPageState(n), NavigationControl::GetControlPageData(n, true));
    }
}

// private void OnRouterPageChanged(object sender, Fuse.Navigation.RouterPage routerPage) [instance]
void NavigationControl::OnRouterPageChanged(uObject* sender, ::g::Fuse::Navigation::RouterPage* routerPage)
{
    AncestorRouterPage(routerPage);

    if (AncestorRouterPage() == nullptr)
        return;

    ::g::Fuse::Reactive::ObserverMap* pages = uPtr(AncestorRouterPage())->ChildRouterPages();
    ::g::Fuse::Visual* ignore;
    ::g::Fuse::Navigation::RouterPage* current = ::g::Fuse::Navigation::IRouterOutlet::GetCurrent(uInterface(uPtr(uAs<uObject*>(this, ::g::Fuse::Navigation::IRouterOutlet_typeof())), ::g::Fuse::Navigation::IRouterOutlet_typeof()), &ignore);

    if ((uPtr(pages)->Count() == 0) && (current != nullptr))
        uPtr(pages)->Add(current);
}

// public void add_PageProgressChanged(Fuse.Navigation.NavigationHandler value) [instance]
void NavigationControl::add_PageProgressChanged(uDelegate* value)
{
    uPtr(Navigation())->add_PageProgressChanged(value);
}

// public void remove_PageProgressChanged(Fuse.Navigation.NavigationHandler value) [instance]
void NavigationControl::remove_PageProgressChanged(uDelegate* value)
{
    uPtr(Navigation())->remove_PageProgressChanged(value);
}

// protected Fuse.Controls.NavigationControlTransition PageTransition(Fuse.Visual elm) [instance]
int32_t NavigationControl::PageTransition(::g::Fuse::Visual* elm)
{
    int32_t t = NavigationControl::GetTransition(elm);

    if (t != 0)
        return t;

    if (((::g::Fuse::Triggers::Transition*)uPtr(elm)->FirstChild(::TYPES[4/*Fuse.Visual*/]->MakeMethod(2/*FirstChild<Fuse.Triggers.Transition>*/, ::g::Fuse::Triggers::Transition_typeof(), nullptr))) != nullptr)
        return 1;

    return Transition();
}

// internal void RootActivePage() [instance]
void NavigationControl::RootActivePage()
{
    ::g::Fuse::Reactive::ObserverMap* pages = (AncestorRouterPage() != nullptr) ? (::g::Fuse::Reactive::ObserverMap*)uPtr(AncestorRouterPage())->ChildRouterPages() : nullptr;

    if ((pages != nullptr) && (uPtr(pages)->Count() > 0))
    {
        ::g::Fuse::Visual* ignore;
        ::g::Fuse::Navigation::IRouterOutlet::Goto(uInterface((uObject*)this, ::g::Fuse::Navigation::IRouterOutlet_typeof()), (::g::Fuse::Navigation::RouterPage*)uPtr(pages)->Item(uPtr(pages)->Count() - 1), 1, 0, ::STRINGS[5/*""*/], &ignore);
    }
    else
        OnActivePageChanged(this, uPtr(Navigation())->Active());

    uPtr(Navigation())->add_ActivePageChanged(uDelegate::New(::g::Fuse::Navigation::ActivePageChangedHandler_typeof(), (void*)NavigationControl__OnActivePageChanged_fn, this));
}

// internal Fuse.Navigation.OutletType get_RouterOutletType() [instance]
int32_t NavigationControl::RouterOutletType()
{
    if (!IsRouterOutlet())
        return 0;

    return 2;
}

// public void add_StateChanged(Uno.UX.ValueChangedHandler<Fuse.Navigation.NavigationState> value) [instance]
void NavigationControl::add_StateChanged(uDelegate* value)
{
    uPtr(Navigation())->add_StateChanged(value);
}

// public void remove_StateChanged(Uno.UX.ValueChangedHandler<Fuse.Navigation.NavigationState> value) [instance]
void NavigationControl::remove_StateChanged(uDelegate* value)
{
    uPtr(Navigation())->remove_StateChanged(value);
}

// public void Toggle(Fuse.Visual node) [instance]
void NavigationControl::Toggle(::g::Fuse::Visual* node)
{
    uPtr(Navigation())->Toggle(node);
}

// public Fuse.Controls.NavigationControlTransition get_Transition() [instance]
int32_t NavigationControl::Transition()
{
    return _transition;
}

// public void set_Transition(Fuse.Controls.NavigationControlTransition value) [instance]
void NavigationControl::Transition(int32_t value)
{
    if (_transition == value)
        return;

    _transition = value;
}

// internal void UnrootActivePage() [instance]
void NavigationControl::UnrootActivePage()
{
    uPtr(Navigation())->remove_ActivePageChanged(uDelegate::New(::g::Fuse::Navigation::ActivePageChangedHandler_typeof(), (void*)NavigationControl__OnActivePageChanged_fn, this));
}

// private void UpdateBlockInput() [instance]
void NavigationControl::UpdateBlockInput()
{
    if (_blockInput == 0)
        DisableBlockInput();
    else
        EnableBlockInput();
}

// private void UpdateChild(Fuse.Elements.Element c) [instance]
void NavigationControl::UpdateChild(::g::Fuse::Elements::Element* c)
{
    if (!::g::Fuse::Navigation::Navigation::IsPage(c))
        return;

    NavigationControl__ControlPageData* cpd = NavigationControl::GetControlPageData(c, true);
    UpdateProgress(c, uPtr(Navigation())->GetPageState(c), cpd);

    if ((((uPtr(cpd)->Enter == nullptr) || (uPtr(cpd)->Exit == nullptr)) || (uPtr(cpd)->Inactive == nullptr)) || (uPtr(cpd)->Removing == nullptr))
    {
        CleanupTriggers(c, cpd);
        CreateTriggers(c, cpd);

        if (uPtr(cpd)->Enter != nullptr)
            ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(uPtr(c)->Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), uPtr(cpd)->Enter);

        if (uPtr(cpd)->Exit != nullptr)
            ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(uPtr(c)->Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), uPtr(cpd)->Exit);

        if (uPtr(cpd)->Inactive != nullptr)
            ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(uPtr(c)->Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), uPtr(cpd)->Inactive);

        if (uPtr(cpd)->Removing != nullptr)
            ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(uPtr(c)->Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), uPtr(cpd)->Removing);
    }

    ::g::Fuse::Navigation::PageData* pd = ::g::Fuse::Navigation::PageData::GetOrCreate(c, true);

    if (uPtr(pd)->RouterPage() == nullptr)
        uPtr(pd)->AttachRouterPage(::g::Fuse::Navigation::RouterPage::New1(::g::Uno::UX::Selector__op_Implicit1(uPtr(c)->Name()), uPtr(c)->Parameter(), nullptr));
}

// private static void alterPath(Fuse.Controls.NavigationControl nav, object[] args, string opName, Fuse.Navigation.NavigationGotoMode gotoMode) [static]
void NavigationControl::alterPath(NavigationControl* nav, uArray* args, uString* opName, int32_t gotoMode)
{
    NavigationControl_typeof()->Init();
    uString* ret1;

    if ((uPtr(args)->Length() < 1) || (uPtr(args)->Length() > 2))
    {
        ::g::Fuse::Diagnostics::UserError(::g::Uno::String::op_Addition2(::g::Uno::String::op_Addition2(uString::Const("NavigationControl."), opName), ::STRINGS[86/*" requires 1...*/]), nav, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigationControl.ScriptClass.uno"), 52, uString::Const("alterPath"), nullptr);
        return;
    }

    uObject* outlet = uAs<uObject*>(nav, ::g::Fuse::Navigation::IRouterOutlet_typeof());

    if (outlet == nullptr)
    {
        ::g::Fuse::Diagnostics::InternalError(uString::Const("Must be an IRouterOutlet"), nav, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigationControl.ScriptClass.uno"), 59, uString::Const("alterPath"));
        return;
    }

    uString* path = (::g::Fuse::Marshal__ToType_fn(::g::Fuse::Marshal_typeof()->MakeMethod(0/*ToType<string>*/, ::TYPES[81/*string*/], nullptr), uPtr(args)->Strong<uObject*>(0), &ret1), ret1);
    uString* param = nullptr;

    if (args->Length() > 1)
        param = ::g::Fuse::Json::Stringify(uPtr(args)->Strong<uObject*>(1), true);

    ::g::Fuse::Navigation::RouterPage* rPage = ::g::Fuse::Navigation::RouterPage::New1(path, param, nullptr);
    ::g::Fuse::Visual* ignore;
    ::g::Fuse::Navigation::IRouterOutlet::Goto(uInterface(uPtr(outlet), ::g::Fuse::Navigation::IRouterOutlet_typeof()), rPage, gotoMode, 0, ::STRINGS[5/*""*/], &ignore);
}

// internal static Fuse.Controls.NavigationControl.ControlPageData GetControlPageData(Fuse.Visual elm, [bool create]) [static]
NavigationControl__ControlPageData* NavigationControl::GetControlPageData(::g::Fuse::Visual* elm, bool create)
{
    NavigationControl_typeof()->Init();
    ::g::Fuse::Navigation::PageData* pd = ::g::Fuse::Navigation::PageData::GetOrCreate(elm, create);

    if (pd == nullptr)
        return nullptr;

    if ((uPtr(pd)->ControlPageData != nullptr) || !create)
        return uCast<NavigationControl__ControlPageData*>(uPtr(pd)->ControlPageData, NavigationControl__ControlPageData_typeof());

    NavigationControl__ControlPageData* cpd = NavigationControl__ControlPageData::New1();
    uPtr(pd)->ControlPageData = cpd;
    return cpd;
}

// public static Fuse.Controls.NavigationControlTransition GetTransition(Fuse.Visual elm) [static]
int32_t NavigationControl::GetTransition(::g::Fuse::Visual* elm)
{
    NavigationControl_typeof()->Init();
    uObject* res;

    if (uPtr(uPtr(elm)->Properties())->TryGet(NavigationControl::_propTransition_, &res))
        return uUnbox<int32_t>(::g::Fuse::Controls::NavigationControlTransition_typeof(), res);

    return 0;
}

// private static void gotoPath(Fuse.Controls.NavigationControl nav, object[] args) [static]
void NavigationControl::gotoPath(NavigationControl* nav, uArray* args)
{
    NavigationControl_typeof()->Init();
    NavigationControl::alterPath(nav, args, uString::Const("gotoPath"), 0);
}

// private static void modifyPath(Fuse.Controls.NavigationControl nav, object[] args) [static]
void NavigationControl::modifyPath(NavigationControl* nav, uArray* args)
{
    NavigationControl_typeof()->Init();

    if (uPtr(args)->Length() != 1)
    {
        ::g::Fuse::Diagnostics::UserError(uString::Const("`modifyPath` takes on argument"), nav, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigationControl.ScriptClass.uno"), 106, uString::Const("modifyPath"), nullptr);
        return;
    }

    uObject* obj = uAs<uObject*>(uPtr(args)->Strong<uObject*>(0), ::g::Fuse::IObject_typeof());

    if (obj == nullptr)
    {
        ::g::Fuse::Diagnostics::UserError(uString::Const("`modifyPath` should be passed an object"), nav, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigationControl.ScriptClass.uno"), 113, uString::Const("modifyPath"), nullptr);
        return;
    }

    ::g::Fuse::Navigation::RouterRequest* rr = ::g::Fuse::Navigation::RouterRequest::New1(1);

    if (!rr->AddArguments(obj, 89))
    {
        ::g::Fuse::Diagnostics::UserError(uString::Const("`modifyPath` unrecognized arguments"), nav, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigationControl.ScriptClass.uno"), 122, uString::Const("modifyPath"), nullptr);
        return;
    }

    if ((rr->Route != nullptr) && (uPtr(rr->Route)->SubRoute != nullptr))
    {
        ::g::Fuse::Diagnostics::UserError(uString::Const("`modifyPath` expects one route component"), nav, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigationControl.ScriptClass.uno"), 128, uString::Const("modifyPath"), nullptr);
        return;
    }

    ::g::Fuse::Navigation::RouterPage* page = (rr->Route != nullptr) ? (::g::Fuse::Navigation::RouterPage*)uPtr(rr->Route)->RouterPage : nullptr;
    ::g::Fuse::Reactive::ObserverMap* childPages = (uPtr(nav)->AncestorRouterPage() != nullptr) ? (::g::Fuse::Reactive::ObserverMap*)uPtr(uPtr(nav)->AncestorRouterPage())->ChildRouterPages() : nullptr;

    if ((rr->How == 3) && (page == nullptr))
    {
        if (uPtr(childPages)->Count() > 1)
            page = (::g::Fuse::Navigation::RouterPage*)uPtr(childPages)->Item(uPtr(childPages)->Count() - 2);
    }

    if (page == nullptr)
    {
        ::g::Fuse::Diagnostics::UserError(uString::Const("`modifyPath` unable to find route component"), nav, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigationControl.ScriptClass.uno"), 140, uString::Const("modifyPath"), nullptr);
        return;
    }

    int32_t op = 0;

    switch (rr->How)
    {
        case 0:
        {
            if (childPages != nullptr)
                uPtr(childPages)->Add(page);

            op = 1;
            break;
        }
        case 1:
        {
            if (childPages != nullptr)
            {
                uPtr(childPages)->Clear();
                childPages->Add(page);
            }

            op = 0;
            break;
        }
        case 2:
        {
            if (childPages != nullptr)
            {
                int32_t count = uPtr(childPages)->Count();

                if (count == 0)
                    uPtr(childPages)->Add(page);
                else
                    uPtr(childPages)->Item(count - 1, page);
            }

            op = 2;
            break;
        }
        case 3:
        {
            if (childPages != nullptr)
            {
                if (uPtr(childPages)->Count() > 0)
                    uPtr(childPages)->RemoveAt(uPtr(childPages)->Count() - 1);

                if (uPtr(childPages)->Count() > 0)
                    uPtr(childPages)->Item(uPtr(childPages)->Count() - 1, page);
                else
                    uPtr(childPages)->Add(page);
            }

            op = 3;
            break;
        }
        default:
        {
            ::g::Fuse::Diagnostics::UserError(::g::Uno::String::op_Addition1(uString::Const("Unsupported `How`: "), uBox<int32_t>(::g::Fuse::Navigation::ModifyRouteHow_typeof(), uPtr(rr)->How)), nav, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigationControl.ScriptClass.uno"), 188, uString::Const("modifyPath"), nullptr);
            return;
        }
    }

    uObject* outlet = (uObject*)nav;
    ::g::Fuse::Visual* ignore;
    ::g::Fuse::Navigation::IRouterOutlet::Goto(uInterface(outlet, ::g::Fuse::Navigation::IRouterOutlet_typeof()), page, rr->Transition, op, rr->Style, &ignore);
}

// private static void seekToPath(Fuse.Controls.NavigationControl nav, object[] args) [static]
void NavigationControl::seekToPath(NavigationControl* nav, uArray* args)
{
    NavigationControl_typeof()->Init();
    NavigationControl::alterPath(nav, args, uString::Const("seekToPath"), 1);
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigationControl.BlockInput.uno
// -------------------------------------------------------------------------------------------------

// public enum NavigationControlBlockInput
uEnumType* NavigationControlBlockInput_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.NavigationControlBlockInput", ::g::Uno::Int_typeof(), 2);
    type->SetLiterals(
        "Never", 0LL,
        "WhileNavigating", 1LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigationControl.uno
// --------------------------------------------------------------------------------------

// public enum NavigationControlInactiveState
uEnumType* NavigationControlInactiveState_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.NavigationControlInactiveState", ::g::Uno::Int_typeof(), 3);
    type->SetLiterals(
        "Collapsed", 0LL,
        "Disabled", 1LL,
        "Unchanged", 2LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigationControl.uno
// --------------------------------------------------------------------------------------

// public enum NavigationControlInteraction
uEnumType* NavigationControlInteraction_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.NavigationControlInteraction", ::g::Uno::Int_typeof(), 2);
    type->SetLiterals(
        "None", 0LL,
        "Swipe", 1LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigationControl.uno
// --------------------------------------------------------------------------------------

// public enum NavigationControlTransition
uEnumType* NavigationControlTransition_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.NavigationControlTransition", ::g::Uno::Int_typeof(), 3);
    type->SetLiterals(
        "Default", 0LL,
        "None", 1LL,
        "Standard", 2LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/Navigator.Types.uno
// ------------------------------------------------------------------------------------

// internal delegate void NavigationSwitchedHandler(object sender, Fuse.Controls.NavigatorSwitchedArgs args)
uDelegateType* NavigationSwitchedHandler_typeof()
{
    static uSStrong<uDelegateType*> type;
    if (type != nullptr) return type;

    type = uDelegateType::New("Fuse.Controls.NavigationSwitchedHandler", 2, 0);
    type->SetSignature(uVoid_typeof(),
        uObject_typeof(),
        ::g::Fuse::Controls::NavigatorSwitchedArgs_typeof());
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/Navigator.Interaction.uno
// ------------------------------------------------------------------------------------------

// public partial sealed class Navigator
// {
// static generated Navigator()
static void Navigator__cctor_5_fn(uType* __type)
{
    ::g::Fuse::Properties_typeof()->Init();
    Navigator::_propSwipeBack_ = ::g::Fuse::Properties::CreateHandle();
    Navigator::_propReuse_ = ::g::Fuse::Properties::CreateHandle();
    Navigator::_propRemove_ = ::g::Fuse::Properties::CreateHandle();
}

static void Navigator_build(uType* type)
{
    type->SetDependencies(
        ::g::Fuse::Triggers::BusyTask_typeof(),
        ::g::Uno::Math_typeof(),
        ::g::Fuse::Navigation::Navigation_typeof(),
        ::g::Fuse::Controls::NavigationControl_typeof(),
        ::g::Fuse::Navigation::PageData_typeof(),
        ::g::Fuse::Navigation::Router_typeof(),
        ::g::Fuse::UpdateManager_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(Navigator_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(Navigator_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(Navigator_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(Navigator_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(Navigator_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(Navigator_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(Navigator_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(Navigator_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(Navigator_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(Navigator_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(Navigator_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(Navigator_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(Navigator_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(Navigator_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(Navigator_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(Navigator_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(Navigator_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(Navigator_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(Navigator_type, interface18),
        ::g::Fuse::Navigation::INavigation_typeof(), offsetof(Navigator_type, interface19),
        ::g::Fuse::Reactive::IObserver_typeof(), offsetof(Navigator_type, interface20),
        ::g::Fuse::Node__ISubtreeDataProvider_typeof(), offsetof(Navigator_type, interface21),
        ::g::Fuse::Navigation::IBaseNavigation_typeof(), offsetof(Navigator_type, interface22),
        ::g::Fuse::Navigation::IRouterOutlet_typeof(), offsetof(Navigator_type, interface23));
    type->SetFields(124,
        ::g::Fuse::Controls::NavigatorSwipeDirection_typeof(), offsetof(Navigator, _swipeBack), 0,
        ::g::Fuse::Controls::NavigatorSwipe_typeof(), offsetof(Navigator, _navigatorSwipeBack), 0,
        ::g::Fuse::Navigation::Router_typeof(), offsetof(Navigator, _router), 0,
        ::g::Fuse::Controls::NavigatorGotoState_typeof(), offsetof(Navigator, _gotoState), 0,
        ::g::Fuse::Internal::MiniList_typeof()->MakeType(uObject_typeof(), nullptr), offsetof(Navigator, _activeTransitions), 0,
        ::g::Uno::Collections::Dictionary_typeof()->MakeType(::g::Uno::String_typeof(), ::g::Uno::Collections::List_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), nullptr), offsetof(Navigator, _pathCache), 0,
        ::g::Uno::Bool_typeof(), offsetof(Navigator, _prepareBack), 0,
        Navigator__NavPage_typeof(), offsetof(Navigator, _current), 0,
        Navigator__NavPage_typeof(), offsetof(Navigator, _prepared), 0,
        ::g::Fuse::Node_typeof(), offsetof(Navigator, _listenBusy), 0,
        ::g::Uno::Double_typeof(), offsetof(Navigator, _listenStart), 0,
        ::g::Uno::Bool_typeof(), offsetof(Navigator, _listenTimeout), 0,
        ::g::Fuse::Triggers::BusyTaskActivity_typeof(), offsetof(Navigator, _deferPageSwitch), 0,
        ::g::Uno::Float_typeof(), offsetof(Navigator, _deferPageSwitchTimeout), 0,
        Navigator__DeferSwitch_typeof(), offsetof(Navigator, _deferred), 0,
        ::g::Fuse::Controls::ReuseType_typeof(), offsetof(Navigator, _reuse), 0,
        ::g::Fuse::Controls::RemoveType_typeof(), offsetof(Navigator, _remove), 0,
        ::g::Uno::String_typeof(), offsetof(Navigator, _DefaultPath), 0,
        ::g::Fuse::Controls::NavigationSwitchedHandler_typeof(), offsetof(Navigator, Switched1), 0,
        ::g::Fuse::PropertyHandle_typeof(), (uintptr_t)&Navigator::_propSwipeBack_, uFieldFlagsStatic,
        ::g::Fuse::PropertyHandle_typeof(), (uintptr_t)&Navigator::_propReuse_, uFieldFlagsStatic,
        ::g::Fuse::PropertyHandle_typeof(), (uintptr_t)&Navigator::_propRemove_, uFieldFlagsStatic);
}

Navigator_type* Navigator_typeof()
{
    static uSStrong<Navigator_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::NavigationControl_typeof();
    options.FieldCount = 146;
    options.InterfaceCount = 24;
    options.DependencyCount = 7;
    options.ObjectSize = sizeof(Navigator);
    options.TypeSize = sizeof(Navigator_type);
    type = (Navigator_type*)uClassType::New("Fuse.Controls.Navigator", options);
    type->fp_build_ = Navigator_build;
    type->fp_cctor_ = Navigator__cctor_5_fn;
    type->fp_CreateTriggers = (void(*)(::g::Fuse::Controls::NavigationControl*, ::g::Fuse::Elements::Element*, ::g::Fuse::Controls::NavigationControl__ControlPageData*))Navigator__CreateTriggers_fn;
    type->fp_OnChildRemoved = (void(*)(::g::Fuse::Visual*, ::g::Fuse::Node*))Navigator__OnChildRemoved_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))Navigator__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))Navigator__OnUnrooted_fn;
    type->interface23.fp_PartialPrepareGoto = (void(*)(uObject*, double*))Navigator__FuseNavigationIRouterOutletPartialPrepareGoto_fn;
    type->interface23.fp_CancelPrepare = (void(*)(uObject*))Navigator__FuseNavigationIRouterOutletCancelPrepare_fn;
    type->interface23.fp_CompareCurrent = (void(*)(uObject*, ::g::Fuse::Navigation::RouterPage*, ::g::Fuse::Visual**, int32_t*))Navigator__FuseNavigationIRouterOutletCompareCurrent_fn;
    type->interface23.fp_Goto = (void(*)(uObject*, ::g::Fuse::Navigation::RouterPage*, int32_t*, int32_t*, uString*, ::g::Fuse::Visual**, int32_t*))Navigator__FuseNavigationIRouterOutletGoto_fn;
    type->interface23.fp_GetCurrent = (void(*)(uObject*, ::g::Fuse::Visual**, ::g::Fuse::Navigation::RouterPage**))Navigator__FuseNavigationIRouterOutletGetCurrent_fn;
    type->interface23.fp_get_Type = (void(*)(uObject*, int32_t*))Navigator__FuseNavigationIRouterOutletget_Type_fn;
    type->interface19.fp_GetPageState = (void(*)(uObject*, ::g::Fuse::Visual*, ::g::Fuse::Navigation::NavigationPageState*))::g::Fuse::Controls::NavigationControl__FuseNavigationINavigationGetPageState_fn;
    type->interface20.fp_OnSet = (void(*)(uObject*, uObject*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnSet_fn;
    type->interface20.fp_OnFailed = (void(*)(uObject*, uString*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnFailed_fn;
    type->interface20.fp_OnAdd = (void(*)(uObject*, uObject*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnAdd_fn;
    type->interface20.fp_OnRemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnRemoveAt_fn;
    type->interface20.fp_OnInsertAt = (void(*)(uObject*, int32_t*, uObject*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnInsertAt_fn;
    type->interface20.fp_OnNewAt = (void(*)(uObject*, int32_t*, uObject*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnNewAt_fn;
    type->interface20.fp_OnNewAll = (void(*)(uObject*, uObject*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnNewAll_fn;
    type->interface20.fp_OnClear = (void(*)(uObject*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnClear_fn;
    type->interface21.fp_TryGetDataProvider = (void(*)(uObject*, ::g::Fuse::Node*, int32_t*, uObject**, int32_t*))::g::Fuse::Controls::NavigationControl__FuseNodeISubtreeDataProviderTryGetDataProvider_fn;
    type->interface19.fp_get_ActivePage = (void(*)(uObject*, ::g::Fuse::Visual**))::g::Fuse::Controls::NavigationControl__FuseNavigationINavigationget_ActivePage_fn;
    type->interface19.fp_get_State = (void(*)(uObject*, int32_t*))::g::Fuse::Controls::NavigationControl__FuseNavigationINavigationget_State_fn;
    type->interface19.fp_Goto = (void(*)(uObject*, ::g::Fuse::Visual*, int32_t*))::g::Fuse::Controls::NavigationControl__Goto_fn;
    type->interface19.fp_Toggle = (void(*)(uObject*, ::g::Fuse::Visual*))::g::Fuse::Controls::NavigationControl__Toggle_fn;
    type->interface19.fp_add_PageProgressChanged = (void(*)(uObject*, uDelegate*))::g::Fuse::Controls::NavigationControl__add_PageProgressChanged_fn;
    type->interface19.fp_remove_PageProgressChanged = (void(*)(uObject*, uDelegate*))::g::Fuse::Controls::NavigationControl__remove_PageProgressChanged_fn;
    type->interface19.fp_add_Navigated = (void(*)(uObject*, uDelegate*))::g::Fuse::Controls::NavigationControl__add_Navigated_fn;
    type->interface19.fp_remove_Navigated = (void(*)(uObject*, uDelegate*))::g::Fuse::Controls::NavigationControl__remove_Navigated_fn;
    type->interface19.fp_add_StateChanged = (void(*)(uObject*, uDelegate*))::g::Fuse::Controls::NavigationControl__add_StateChanged_fn;
    type->interface19.fp_remove_StateChanged = (void(*)(uObject*, uDelegate*))::g::Fuse::Controls::NavigationControl__remove_StateChanged_fn;
    type->interface22.fp_GoForward = (void(*)(uObject*))::g::Fuse::Controls::NavigationControl__GoForward_fn;
    type->interface22.fp_GoBack = (void(*)(uObject*))::g::Fuse::Controls::NavigationControl__GoBack_fn;
    type->interface22.fp_get_CanGoBack = (void(*)(uObject*, bool*))::g::Fuse::Controls::NavigationControl__get_CanGoBack_fn;
    type->interface22.fp_get_CanGoForward = (void(*)(uObject*, bool*))::g::Fuse::Controls::NavigationControl__get_CanGoForward_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// private void AddToCache(Fuse.Controls.Navigator.NavPage page, Fuse.Visual target)
void Navigator__AddToCache_fn(Navigator* __this, Navigator__NavPage* page, ::g::Fuse::Visual* target)
{
    __this->AddToCache(page, target);
}

// private void BusyChanged()
void Navigator__BusyChanged_fn(Navigator* __this)
{
    __this->BusyChanged();
}

// private void CheckInteraction()
void Navigator__CheckInteraction_fn(Navigator* __this)
{
    __this->CheckInteraction();
}

// private void CleanupChildren([Fuse.Visual exclude])
void Navigator__CleanupChildren_fn(Navigator* __this, ::g::Fuse::Visual* exclude)
{
    __this->CleanupChildren(exclude);
}

// private void CleanupListenBusy()
void Navigator__CleanupListenBusy_fn(Navigator* __this)
{
    __this->CleanupListenBusy();
}

// private void CleanupPrepared([Fuse.Visual newTarget])
void Navigator__CleanupPrepared_fn(Navigator* __this, ::g::Fuse::Visual* newTarget)
{
    __this->CleanupPrepared(newTarget);
}

// protected override sealed void CreateTriggers(Fuse.Elements.Element c, Fuse.Controls.NavigationControl.ControlPageData pd)
void Navigator__CreateTriggers_fn(Navigator* __this, ::g::Fuse::Elements::Element* c, ::g::Fuse::Controls::NavigationControl__ControlPageData* pd)
{
    switch (__this->PageTransition(c))
    {
        case 1:
            break;
        case 2:
        {
            uPtr(pd)->Enter = ::g::Fuse::Controls::NavigationInternal::NavEnterHorizontal::New3();
            pd->Exit = ::g::Fuse::Controls::NavigationInternal::NavExitHorizontal::New3();
            ::g::Fuse::Controls::NavigationInternal::NavRemoveHorizontal* q = ::g::Fuse::Controls::NavigationInternal::NavRemoveHorizontal::New3();
            ::g::Fuse::Controls::Element_Opacity_Property* t = ::g::Fuse::Controls::Element_Opacity_Property::New1(c);
            ::g::Fuse::Animations::Change* fade = (::g::Fuse::Animations::Change*)::g::Fuse::Animations::Change::New2(::g::Fuse::Animations::Change_typeof()->MakeType(::g::Uno::Float_typeof(), nullptr), t);
            fade->Duration(0.30000001192092896);
            ::g::Fuse::Animations::Change__set_Value_fn(fade, uCRef(0.0f));
            ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(q->Animators()), ::TYPES[24/*Uno.Collections.ICollection<Fuse.Animations.Animator>*/]), fade);
            pd->Removing = q;
            break;
        }
    }
}

// public generated string get_DefaultPath()
void Navigator__get_DefaultPath_fn(Navigator* __this, uString** __retval)
{
    *__retval = __this->DefaultPath();
}

// public generated void set_DefaultPath(string value)
void Navigator__set_DefaultPath_fn(Navigator* __this, uString* value)
{
    __this->DefaultPath(value);
}

// public Fuse.Triggers.BusyTaskActivity get_DeferPageSwitch()
void Navigator__get_DeferPageSwitch_fn(Navigator* __this, int32_t* __retval)
{
    *__retval = __this->DeferPageSwitch();
}

// public void set_DeferPageSwitch(Fuse.Triggers.BusyTaskActivity value)
void Navigator__set_DeferPageSwitch_fn(Navigator* __this, int32_t* value)
{
    __this->DeferPageSwitch(*value);
}

// public float get_DeferPageSwitchTimeout()
void Navigator__get_DeferPageSwitchTimeout_fn(Navigator* __this, float* __retval)
{
    *__retval = __this->DeferPageSwitchTimeout();
}

// public void set_DeferPageSwitchTimeout(float value)
void Navigator__set_DeferPageSwitchTimeout_fn(Navigator* __this, float* value)
{
    __this->DeferPageSwitchTimeout(*value);
}

// private void EnablePageSwipeBack()
void Navigator__EnablePageSwipeBack_fn(Navigator* __this)
{
    __this->EnablePageSwipeBack();
}

// private Fuse.Visual FindPage(Uno.UX.Selector path)
void Navigator__FindPage_fn(Navigator* __this, ::g::Uno::UX::Selector* path, ::g::Fuse::Visual** __retval)
{
    *__retval = __this->FindPage(*path);
}

// private void Fuse.Navigation.IRouterOutlet.CancelPrepare()
void Navigator__FuseNavigationIRouterOutletCancelPrepare_fn(Navigator* __this)
{
    if (__this->_prepared == nullptr)
    {
        ::g::Fuse::Diagnostics::InternalError(uString::Const("PartialPrepareGoto without Prepare"), __this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/Navigator.uno"), 168, uString::Const("Fuse.Navigation.IRouterOutlet.CancelPrepare"));
        return;
    }

    __this->CleanupPrepared(nullptr);
    uPtr(__this->Navigation1())->UpdateProgress(0);
    __this->UpdateNavigationState();
}

// private Fuse.Navigation.RoutingResult Fuse.Navigation.IRouterOutlet.CompareCurrent(Fuse.Navigation.RouterPage routerPage, Fuse.Visual& pageVisual)
void Navigator__FuseNavigationIRouterOutletCompareCurrent_fn(Navigator* __this, ::g::Fuse::Navigation::RouterPage* routerPage, ::g::Fuse::Visual** pageVisual, int32_t* __retval)
{
    *pageVisual = nullptr;
    ::g::Fuse::Visual* currentVisual;
    ::g::Fuse::Navigation::RouterPage* current = ::g::Fuse::Navigation::IRouterOutlet::GetCurrent(uInterface(uPtr(uAs<uObject*>(__this, ::g::Fuse::Navigation::IRouterOutlet_typeof())), ::g::Fuse::Navigation::IRouterOutlet_typeof()), &currentVisual);

    if (::g::Uno::String::op_Inequality(__this->DefaultPath(), nullptr))
        uPtr(routerPage)->DefaultPath(__this->DefaultPath());

    if (::g::Uno::String::op_Inequality(uPtr(routerPage)->Path(), uPtr(current)->Path()) || ((currentVisual == nullptr) && ::g::Uno::String::op_Inequality(uPtr(routerPage)->Path(), nullptr)))
        return *__retval = 2, void();

    *pageVisual = currentVisual;

    if (::g::Uno::String::op_Equality(uPtr(routerPage)->Parameter, uPtr(current)->Parameter) && (uPtr(routerPage)->Context == uPtr(current)->Context))
        return *__retval = 0, void();

    return *__retval = 1, void();
}

// private Fuse.Navigation.RouterPage Fuse.Navigation.IRouterOutlet.GetCurrent(Fuse.Visual& pageVisual)
void Navigator__FuseNavigationIRouterOutletGetCurrent_fn(Navigator* __this, ::g::Fuse::Visual** pageVisual, ::g::Fuse::Navigation::RouterPage** __retval)
{
    if (__this->_deferred != nullptr)
    {
        *pageVisual = uPtr(uPtr(__this->_deferred)->Page)->Visual;
        return *__retval = uPtr(uPtr(__this->_deferred)->Page)->RouterPage, void();
    }

    *pageVisual = uPtr(__this->_current)->Visual;
    return *__retval = uPtr(__this->_current)->RouterPage, void();
}

// private Fuse.Navigation.RoutingResult Fuse.Navigation.IRouterOutlet.Goto(Fuse.Navigation.RouterPage routerPage, Fuse.Navigation.NavigationGotoMode gotoMode, Fuse.Navigation.RoutingOperation operation, string operationStyle, Fuse.Visual& pageVisual)
void Navigator__FuseNavigationIRouterOutletGoto_fn(Navigator* __this, ::g::Fuse::Navigation::RouterPage* routerPage, int32_t* gotoMode, int32_t* operation, uString* operationStyle, ::g::Fuse::Visual** pageVisual, int32_t* __retval)
{
    int32_t gotoMode_ = *gotoMode;
    int32_t operation_ = *operation;
    int32_t result = __this->GotoImpl(routerPage, gotoMode_, operation_, operationStyle, pageVisual);
    return *__retval = result, void();
}

// private void Fuse.Navigation.IRouterOutlet.PartialPrepareGoto(double progress)
void Navigator__FuseNavigationIRouterOutletPartialPrepareGoto_fn(Navigator* __this, double* progress)
{
    double progress_ = *progress;

    if (__this->_prepared == nullptr)
    {
        ::g::Fuse::Diagnostics::InternalError(uString::Const("PartialPrepareGoto without Prepare"), __this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/Navigator.uno"), 147, uString::Const("Fuse.Navigation.IRouterOutlet.PartialPrepareGoto"));
        return;
    }

    ::g::Fuse::Visual* preparedVisual = uPtr(__this->_prepared)->Visual;

    if (preparedVisual != nullptr)
        uPtr(__this->Navigation1())->SetPageProgress(preparedVisual, __this->_prepareBack ? (float)progress_ - 1.0f : 1.0f - (float)progress_, false);

    ::g::Fuse::Visual* currentVisual = uPtr(__this->_current)->Visual;

    if (currentVisual != nullptr)
        uPtr(__this->Navigation1())->SetPageProgress(currentVisual, __this->_prepareBack ? (float)progress_ : -((float)progress_), false);

    uPtr(__this->Navigation1())->UpdateProgress(2);
}

// private Fuse.Navigation.OutletType Fuse.Navigation.IRouterOutlet.get_Type()
void Navigator__FuseNavigationIRouterOutletget_Type_fn(Navigator* __this, int32_t* __retval)
{
    return *__retval = __this->RouterOutletType(), void();
}

// private Uno.Collections.List<Fuse.Visual> GetCache(string path)
void Navigator__GetCache_fn(Navigator* __this, uString* path, ::g::Uno::Collections::List** __retval)
{
    *__retval = __this->GetCache(path);
}

// public static Fuse.Controls.RemoveType GetRemove(Fuse.Visual elm)
void Navigator__GetRemove_fn(::g::Fuse::Visual* elm, int32_t* __retval)
{
    *__retval = Navigator::GetRemove(elm);
}

// public static Fuse.Controls.ReuseType GetReuse(Fuse.Visual elm)
void Navigator__GetReuse_fn(::g::Fuse::Visual* elm, int32_t* __retval)
{
    *__retval = Navigator::GetReuse(elm);
}

// public static Fuse.Controls.NavigatorSwipeDirection GetSwipeBack(Fuse.Visual elm)
void Navigator__GetSwipeBack_fn(::g::Fuse::Visual* elm, int32_t* __retval)
{
    *__retval = Navigator::GetSwipeBack(elm);
}

// private Fuse.Visual GetVisual(string path)
void Navigator__GetVisual_fn(Navigator* __this, uString* path, ::g::Fuse::Visual** __retval)
{
    *__retval = __this->GetVisual(path);
}

// private Fuse.Navigation.RoutingResult GotoImpl(Fuse.Navigation.RouterPage routerPage, Fuse.Navigation.NavigationGotoMode gotoMode, Fuse.Navigation.RoutingOperation operation, string operationStyle, Fuse.Visual& pageVisual)
void Navigator__GotoImpl_fn(Navigator* __this, ::g::Fuse::Navigation::RouterPage* routerPage, int32_t* gotoMode, int32_t* operation, uString* operationStyle, ::g::Fuse::Visual** pageVisual, int32_t* __retval)
{
    *__retval = __this->GotoImpl(routerPage, *gotoMode, *operation, operationStyle, pageVisual);
}

// public Fuse.Controls.NavigatorGotoState get_GotoState()
void Navigator__get_GotoState_fn(Navigator* __this, int32_t* __retval)
{
    *__retval = __this->GotoState();
}

// public void set_GotoState(Fuse.Controls.NavigatorGotoState value)
void Navigator__set_GotoState_fn(Navigator* __this, int32_t* value)
{
    __this->GotoState(*value);
}

// private Fuse.Visual InstantiateTemplate(Uno.UX.Template f, string path)
void Navigator__InstantiateTemplate_fn(Navigator* __this, ::g::Uno::UX::Template* f, uString* path, ::g::Fuse::Visual** __retval)
{
    *__retval = __this->InstantiateTemplate(f, path);
}

// private bool IsRemoveLevel(Fuse.Visual elm, Fuse.Controls.RemoveType type)
void Navigator__IsRemoveLevel_fn(Navigator* __this, ::g::Fuse::Visual* elm, int32_t* type, bool* __retval)
{
    *__retval = __this->IsRemoveLevel(elm, *type);
}

// private bool IsReuseLevel(Fuse.Visual elm, Fuse.Controls.ReuseType type)
void Navigator__IsReuseLevel_fn(Navigator* __this, ::g::Fuse::Visual* elm, int32_t* type, bool* __retval)
{
    *__retval = __this->IsReuseLevel(elm, *type);
}

// private new Fuse.Navigation.ExplicitNavigation get_Navigation()
void Navigator__get_Navigation1_fn(Navigator* __this, ::g::Fuse::Navigation::ExplicitNavigation** __retval)
{
    *__retval = __this->Navigation1();
}

// private Fuse.Controls.NavigatorSwipe get_NavigatorSwipeBack()
void Navigator__get_NavigatorSwipeBack_fn(Navigator* __this, ::g::Fuse::Controls::NavigatorSwipe** __retval)
{
    *__retval = __this->NavigatorSwipeBack();
}

// protected override sealed void OnChildRemoved(Fuse.Node elm)
void Navigator__OnChildRemoved_fn(Navigator* __this, ::g::Fuse::Node* elm)
{
    if (elm == uPtr(__this->_current)->Visual)
        ::g::Fuse::Diagnostics::InternalError(uString::Const("Removing child!"), nullptr, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/Navigator.uno"), 795, uString::Const("OnChildRemoved"));

    if ((__this->_deferred != nullptr) && (uPtr(uPtr(__this->_deferred)->Page)->Visual == elm))
        ::g::Fuse::Diagnostics::InternalError(uString::Const("removing deferred child"), nullptr, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/Navigator.uno"), 797, uString::Const("OnChildRemoved"));

    if ((__this->_prepared != nullptr) && (uPtr(__this->_prepared)->Visual == elm))
        ::g::Fuse::Diagnostics::InternalError(uString::Const("removing prepared child"), nullptr, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/Navigator.uno"), 799, uString::Const("OnChildRemoved"));

    ::g::Fuse::Controls::NavigationControl__OnChildRemoved_fn(__this, elm);
}

// private void OnHistoryChanged(object sender)
void Navigator__OnHistoryChanged_fn(Navigator* __this, uObject* sender)
{
    __this->OnHistoryChanged(sender);
}

// protected override sealed void OnRooted()
void Navigator__OnRooted_fn(Navigator* __this)
{
    Navigator__NavPage* collection1;
    ::g::Fuse::Controls::NavigationControl__OnRooted_fn(__this);
    __this->RootInteraction();
    __this->_current = Navigator__NavPage::New1();
    __this->CleanupChildren(nullptr);
    uPtr(__this->Navigation1())->UpdateProgress(1);
    ::g::Fuse::Visual* ignore;
    ::g::Fuse::Reactive::ObserverMap* pages = (__this->AncestorRouterPage() != nullptr) ? (::g::Fuse::Reactive::ObserverMap*)uPtr(__this->AncestorRouterPage())->ChildRouterPages() : nullptr;

    if ((pages != nullptr) && (uPtr(pages)->Count() > 0))
        ::g::Fuse::Navigation::IRouterOutlet::Goto(uInterface((uObject*)__this, ::g::Fuse::Navigation::IRouterOutlet_typeof()), (::g::Fuse::Navigation::RouterPage*)uPtr(pages)->Item(uPtr(pages)->Count() - 1), 1, 0, ::STRINGS[5/*""*/], &ignore);
    else
    {
        if (::g::Uno::String::op_Inequality(__this->DefaultPath(), nullptr))
        {
            __this->_current = (collection1 = Navigator__NavPage::New1(), uPtr(collection1)->RouterPage = ::g::Fuse::Navigation::RouterPage::New1(__this->DefaultPath(), nullptr, nullptr), collection1);
            ::g::Fuse::Navigation::IRouterOutlet::Goto(uInterface((uObject*)__this, ::g::Fuse::Navigation::IRouterOutlet_typeof()), uPtr(__this->_current)->RouterPage, 1, 0, ::STRINGS[5/*""*/], &uPtr(__this->_current)->Visual);
        }

        if (pages != nullptr)
            uPtr(pages)->Add(uPtr(__this->_current)->RouterPage);
    }
}

// private void OnSwitched(Fuse.Controls.NavigatorSwitchedArgs args)
void Navigator__OnSwitched_fn(Navigator* __this, ::g::Fuse::Controls::NavigatorSwitchedArgs* args)
{
    __this->OnSwitched(args);
}

// protected override sealed void OnUnrooted()
void Navigator__OnUnrooted_fn(Navigator* __this)
{
    __this->UnrootInteraction();
    ::g::Fuse::Controls::NavigationControl__OnUnrooted_fn(__this);
}

// private void OnUpdate()
void Navigator__OnUpdate_fn(Navigator* __this)
{
    __this->OnUpdate();
}

// private Fuse.Controls.NavigatorSwipeDirection PageSwipeBackDirection(Fuse.Visual elm)
void Navigator__PageSwipeBackDirection_fn(Navigator* __this, ::g::Fuse::Visual* elm, int32_t* __retval)
{
    *__retval = __this->PageSwipeBackDirection(elm);
}

// private Fuse.Controls.Navigator.PrepareResult Prepare(Fuse.Controls.Navigator.NavPage curPage, Fuse.Navigation.RouterPage routerPage, Fuse.Navigation.RoutingOperation operation)
void Navigator__Prepare1_fn(Navigator* __this, Navigator__NavPage* curPage, ::g::Fuse::Navigation::RouterPage* routerPage, int32_t* operation, Navigator__PrepareResult* __retval)
{
    *__retval = __this->Prepare1(curPage, routerPage, *operation);
}

// internal void ReleasePage(Fuse.Visual v)
void Navigator__ReleasePage_fn(Navigator* __this, ::g::Fuse::Visual* v)
{
    __this->ReleasePage(v);
}

// public new Fuse.Controls.RemoveType get_Remove()
void Navigator__get_Remove_fn(Navigator* __this, int32_t* __retval)
{
    *__retval = __this->Remove2();
}

// public new void set_Remove(Fuse.Controls.RemoveType value)
void Navigator__set_Remove_fn(Navigator* __this, int32_t* value)
{
    __this->Remove2(*value);
}

// private void ResolveDeferred()
void Navigator__ResolveDeferred_fn(Navigator* __this)
{
    __this->ResolveDeferred();
}

// public Fuse.Controls.ReuseType get_Reuse()
void Navigator__get_Reuse_fn(Navigator* __this, int32_t* __retval)
{
    *__retval = __this->Reuse();
}

// public void set_Reuse(Fuse.Controls.ReuseType value)
void Navigator__set_Reuse_fn(Navigator* __this, int32_t* value)
{
    __this->Reuse(*value);
}

// private void RootInteraction()
void Navigator__RootInteraction_fn(Navigator* __this)
{
    __this->RootInteraction();
}

// internal void SetTransitionState(object owner, bool on)
void Navigator__SetTransitionState_fn(Navigator* __this, uObject* owner, bool* on)
{
    __this->SetTransitionState(owner, *on);
}

// public Fuse.Controls.NavigatorSwipeDirection get_SwipeBack()
void Navigator__get_SwipeBack_fn(Navigator* __this, int32_t* __retval)
{
    *__retval = __this->SwipeBack();
}

// public void set_SwipeBack(Fuse.Controls.NavigatorSwipeDirection value)
void Navigator__set_SwipeBack_fn(Navigator* __this, int32_t* value)
{
    __this->SwipeBack(*value);
}

// private void SwitchDeferred()
void Navigator__SwitchDeferred_fn(Navigator* __this)
{
    __this->SwitchDeferred();
}

// internal generated void add_Switched(Fuse.Controls.NavigationSwitchedHandler value)
void Navigator__add_Switched_fn(Navigator* __this, uDelegate* value)
{
    __this->add_Switched(value);
}

// internal generated void remove_Switched(Fuse.Controls.NavigationSwitchedHandler value)
void Navigator__remove_Switched_fn(Navigator* __this, uDelegate* value)
{
    __this->remove_Switched(value);
}

// private void SwitchToPage(Fuse.Controls.Navigator.NavPage newPage, Fuse.Navigation.NavigationGotoMode gotoMode, Fuse.Navigation.RoutingOperation operation, string operationStyle, bool usedPrepared)
void Navigator__SwitchToPage_fn(Navigator* __this, Navigator__NavPage* newPage, int32_t* gotoMode, int32_t* operation, uString* operationStyle, bool* usedPrepared)
{
    __this->SwitchToPage(newPage, *gotoMode, *operation, operationStyle, *usedPrepared);
}

// private void UnrootInteraction()
void Navigator__UnrootInteraction_fn(Navigator* __this)
{
    __this->UnrootInteraction();
}

// private void UpdateNavigationState()
void Navigator__UpdateNavigationState_fn(Navigator* __this)
{
    __this->UpdateNavigationState();
}

uSStrong< ::g::Fuse::PropertyHandle*> Navigator::_propSwipeBack_;
uSStrong< ::g::Fuse::PropertyHandle*> Navigator::_propReuse_;
uSStrong< ::g::Fuse::PropertyHandle*> Navigator::_propRemove_;

// private void AddToCache(Fuse.Controls.Navigator.NavPage page, Fuse.Visual target) [instance]
void Navigator::AddToCache(Navigator__NavPage* page, ::g::Fuse::Visual* target)
{
    ::g::Fuse::Visual* visual = uPtr(page)->Visual;

    if (visual == target)
        return;

    if ((((visual != nullptr) && ::g::Uno::String::op_Inequality(uPtr(page->RouterPage)->Path(), nullptr)) && IsReuseLevel(visual, 2)) && uPtr(::g::Fuse::Controls::NavigationControl::GetControlPageData(visual, true))->FromTemplate)
        ::g::Uno::Collections::List__Add_fn(uPtr(GetCache(uPtr(uPtr(page)->RouterPage)->Path())), visual);
}

// private void BusyChanged() [instance]
void Navigator::BusyChanged()
{
    ::g::Fuse::UpdateManager::AddDeferredAction3(uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)Navigator__SwitchDeferred_fn, this), 4);
}

// private void CheckInteraction() [instance]
void Navigator::CheckInteraction()
{
    EnablePageSwipeBack();
}

// private void CleanupChildren([Fuse.Visual exclude]) [instance]
void Navigator::CleanupChildren(::g::Fuse::Visual* exclude)
{
    for (::g::Fuse::Visual* c = (::g::Fuse::Visual*)LastChild(::TYPES[4/*Fuse.Visual*/]->MakeMethod(7/*LastChild<Fuse.Visual>*/, ::TYPES[4/*Fuse.Visual*/], nullptr)); c != nullptr; c = (::g::Fuse::Visual*)uPtr(c)->PreviousSibling(::g::Fuse::Node_typeof()->MakeMethod(4/*PreviousSibling<Fuse.Visual>*/, ::TYPES[4/*Fuse.Visual*/], nullptr)))
        if (::g::Fuse::Navigation::Navigation::IsPage(c) && (c != exclude))
        {
            if (IsRemoveLevel(c, 2) || (Navigator::GetReuse(c) == 1))
                BeginRemoveChild(c, nullptr);
            else if (::g::Uno::Math::Abs1(uPtr(Navigation1())->GetPageState(c).Progress) < 1.0f)
                uPtr(Navigation1())->SetPageProgress1(c, -1.0f, -1.0f, false);
        }
}

// private void CleanupListenBusy() [instance]
void Navigator::CleanupListenBusy()
{
    _listenTimeout = false;

    if (_listenBusy != nullptr)
    {
        ::g::Fuse::Triggers::BusyTask::RemoveListener(_listenBusy, uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)Navigator__BusyChanged_fn, this));
        ::g::Fuse::UpdateManager::RemoveAction1(uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)Navigator__OnUpdate_fn, this), 0);
        _listenBusy = nullptr;
    }
}

// private void CleanupPrepared([Fuse.Visual newTarget]) [instance]
void Navigator::CleanupPrepared(::g::Fuse::Visual* newTarget)
{
    if (_prepared == nullptr)
        return;

    ::g::Fuse::Visual* visual = uPtr(_prepared)->Visual;

    if (((visual != uPtr(_current)->Visual) && (visual != nullptr)) && (visual != newTarget))
        uPtr(Navigation1())->SetPageProgress(visual, (float)(_prepareBack ? 1 : -1), true);

    AddToCache(_prepared, newTarget);
    _prepared = nullptr;
}

// public generated string get_DefaultPath() [instance]
uString* Navigator::DefaultPath()
{
    return _DefaultPath;
}

// public generated void set_DefaultPath(string value) [instance]
void Navigator::DefaultPath(uString* value)
{
    _DefaultPath = value;
}

// public Fuse.Triggers.BusyTaskActivity get_DeferPageSwitch() [instance]
int32_t Navigator::DeferPageSwitch()
{
    return _deferPageSwitch;
}

// public void set_DeferPageSwitch(Fuse.Triggers.BusyTaskActivity value) [instance]
void Navigator::DeferPageSwitch(int32_t value)
{
    _deferPageSwitch = value;
}

// public float get_DeferPageSwitchTimeout() [instance]
float Navigator::DeferPageSwitchTimeout()
{
    return _deferPageSwitchTimeout;
}

// public void set_DeferPageSwitchTimeout(float value) [instance]
void Navigator::DeferPageSwitchTimeout(float value)
{
    _deferPageSwitchTimeout = value;
}

// private void EnablePageSwipeBack() [instance]
void Navigator::EnablePageSwipeBack()
{
    if ((_navigatorSwipeBack != nullptr) && (_router != nullptr))
    {
        if (!uPtr(_router)->CanGoBack())
            uPtr(NavigatorSwipeBack())->IsEnabled(false);
        else
        {
            uPtr(NavigatorSwipeBack())->IsEnabled(true);
            uPtr(NavigatorSwipeBack())->Direction(PageSwipeBackDirection(uPtr(_current)->Visual));
        }
    }
}

// private Fuse.Visual FindPage(Uno.UX.Selector path) [instance]
::g::Fuse::Visual* Navigator::FindPage(::g::Uno::UX::Selector path)
{
    for (::g::Fuse::Visual* c = (::g::Fuse::Visual*)FirstChild(::TYPES[2/*Fuse.Visual.FirstChild<Fuse.Visual>*/]); c != nullptr; c = (::g::Fuse::Visual*)uPtr(c)->NextSibling(::TYPES[3/*Fuse.Node.NextSibling<Fuse.Visual>*/]))
    {
        if (::g::Uno::UX::Selector__op_Inequality(uPtr(c)->Name(), path))
            continue;

        if (uPtr(::g::Fuse::Controls::NavigationControl::GetControlPageData(c, true))->FromTemplate)
            continue;

        return c;
    }

    return nullptr;
}

// private Uno.Collections.List<Fuse.Visual> GetCache(string path) [instance]
::g::Uno::Collections::List* Navigator::GetCache(uString* path)
{
    bool ret13;
    ::g::Uno::Collections::List* ret14;

    if ((::g::Uno::Collections::Dictionary__ContainsKey_fn(uPtr(_pathCache), path, &ret13), ret13))
        return (::g::Uno::Collections::Dictionary__get_Item_fn(uPtr(_pathCache), path, &ret14), ret14);

    ::g::Uno::Collections::List* v = (::g::Uno::Collections::List*)::g::Uno::Collections::List::New1(::g::Uno::Collections::List_typeof()->MakeType(::TYPES[4/*Fuse.Visual*/], nullptr));
    ::g::Uno::Collections::Dictionary__set_Item_fn(uPtr(_pathCache), path, v);
    return v;
}

// private Fuse.Visual GetVisual(string path) [instance]
::g::Fuse::Visual* Navigator::GetVisual(uString* path)
{
    ::g::Uno::UX::Template* f = FindTemplate(path);

    if (f != nullptr)
        return InstantiateTemplate(f, path);

    ::g::Fuse::Visual* q = FindPage(::g::Uno::UX::Selector__New1(path));

    if (q != nullptr)
        return q;

    ::g::Fuse::Diagnostics::InternalError(::g::Uno::String::op_Addition2(::g::Uno::String::op_Addition2(::STRINGS[1/*"Can not nav...*/], path), ::STRINGS[2/*"', not found!"*/]), this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/Navigator.uno"), 430, uString::Const("GetVisual"));
    return nullptr;
}

// private Fuse.Navigation.RoutingResult GotoImpl(Fuse.Navigation.RouterPage routerPage, Fuse.Navigation.NavigationGotoMode gotoMode, Fuse.Navigation.RoutingOperation operation, string operationStyle, Fuse.Visual& pageVisual) [instance]
int32_t Navigator::GotoImpl(::g::Fuse::Navigation::RouterPage* routerPage, int32_t gotoMode, int32_t operation, uString* operationStyle, ::g::Fuse::Visual** pageVisual)
{
    ::g::Fuse::Controls::NavigatorSwitchedArgs* collection9;
    *pageVisual = nullptr;

    if (gotoMode == 2)
    {
        CleanupPrepared(nullptr);
        Navigator__PrepareResult r = Prepare1(_current, routerPage, operation);

        if (r.Routing == 3)
            return 3;

        _prepared = r.Page;
        _prepareBack = (operation == 3);
        collection9 = ::g::Fuse::Controls::NavigatorSwitchedArgs::New3(this);
        uPtr(collection9)->OldPath = uPtr(uPtr(_current)->RouterPage)->Path();
        uPtr(collection9)->NewPath = uPtr(uPtr(_prepared)->RouterPage)->Path();
        uPtr(collection9)->OldParameter = uPtr(uPtr(_current)->RouterPage)->Parameter;
        uPtr(collection9)->NewParameter = uPtr(uPtr(_prepared)->RouterPage)->Parameter;
        uPtr(collection9)->OldVisual = uPtr(_current)->Visual;
        uPtr(collection9)->NewVisual = uPtr(_prepared)->Visual;
        uPtr(collection9)->Operation = operation;
        uPtr(collection9)->OperationStyle = operationStyle;
        uPtr(collection9)->Mode = gotoMode;
        ::g::Fuse::Controls::NavigatorSwitchedArgs* args = collection9;
        OnSwitched(args);
        *pageVisual = uPtr(_prepared)->Visual;
        UpdateNavigationState();
        return r.Routing;
    }

    ResolveDeferred();
    Navigator__PrepareResult result = Prepare1(_current, routerPage, operation);

    if (result.Routing == 3)
        return result.Routing;

    if (result.Page == nullptr)
    {
        ::g::Fuse::Diagnostics::InternalError(uString::Const("Unexpected null page"), this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/Navigator.uno"), 402, uString::Const("GotoImpl"));
        return 3;
    }

    *pageVisual = uPtr(result.Page)->Visual;

    if (result.Routing != 2)
    {
        _current = result.Page;
        return result.Routing;
    }

    CleanupPrepared(uPtr(result.Page)->Visual);
    SwitchToPage(result.Page, gotoMode, operation, operationStyle, result.UsedPrepared);
    return 2;
}

// public Fuse.Controls.NavigatorGotoState get_GotoState() [instance]
int32_t Navigator::GotoState()
{
    return _gotoState;
}

// public void set_GotoState(Fuse.Controls.NavigatorGotoState value) [instance]
void Navigator::GotoState(int32_t value)
{
    _gotoState = value;
}

// private Fuse.Visual InstantiateTemplate(Uno.UX.Template f, string path) [instance]
::g::Fuse::Visual* Navigator::InstantiateTemplate(::g::Uno::UX::Template* f, uString* path)
{
    ::g::Fuse::Visual* useVisual = uAs< ::g::Fuse::Visual*>(uPtr(f)->New1(), ::TYPES[4/*Fuse.Visual*/]);

    if (useVisual == nullptr)
    {
        ::g::Fuse::Diagnostics::UserError(::g::Uno::String::op_Addition2(::g::Uno::String::op_Addition2(uString::Const("Result of '"), path), uString::Const("' template is not a Visual!")), this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/Navigator.uno"), 439, uString::Const("InstantiateTemplate"), nullptr);
        return nullptr;
    }

    uPtr(useVisual)->Name(::g::Uno::UX::Selector__op_Implicit(path));
    uPtr(::g::Fuse::Controls::NavigationControl::GetControlPageData(useVisual, true))->FromTemplate = true;
    return useVisual;
}

// private bool IsRemoveLevel(Fuse.Visual elm, Fuse.Controls.RemoveType type) [instance]
bool Navigator::IsRemoveLevel(::g::Fuse::Visual* elm, int32_t type)
{
    if (!uPtr(::g::Fuse::Controls::NavigationControl::GetControlPageData(elm, true))->FromTemplate)
        return false;

    int32_t q = Navigator::GetRemove(elm);

    if (q == 0)
        q = Remove2();

    return q >= type;
}

// private bool IsReuseLevel(Fuse.Visual elm, Fuse.Controls.ReuseType type) [instance]
bool Navigator::IsReuseLevel(::g::Fuse::Visual* elm, int32_t type)
{
    if (!uPtr(::g::Fuse::Controls::NavigationControl::GetControlPageData(elm, true))->FromTemplate)
        return true;

    int32_t q = Navigator::GetReuse(elm);

    if (q == 0)
        q = Reuse();

    return q >= type;
}

// private new Fuse.Navigation.ExplicitNavigation get_Navigation() [instance]
::g::Fuse::Navigation::ExplicitNavigation* Navigator::Navigation1()
{
    return uAs< ::g::Fuse::Navigation::ExplicitNavigation*>(Navigation(), ::g::Fuse::Navigation::ExplicitNavigation_typeof());
}

// private Fuse.Controls.NavigatorSwipe get_NavigatorSwipeBack() [instance]
::g::Fuse::Controls::NavigatorSwipe* Navigator::NavigatorSwipeBack()
{
    if (_navigatorSwipeBack == nullptr)
    {
        _navigatorSwipeBack = ::g::Fuse::Controls::NavigatorSwipe::New2();
        ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), _navigatorSwipeBack);
    }

    return _navigatorSwipeBack;
}

// private void OnHistoryChanged(object sender) [instance]
void Navigator::OnHistoryChanged(uObject* sender)
{
    EnablePageSwipeBack();
}

// private void OnSwitched(Fuse.Controls.NavigatorSwitchedArgs args) [instance]
void Navigator::OnSwitched(::g::Fuse::Controls::NavigatorSwitchedArgs* args)
{
    if (::g::Uno::Delegate::op_Inequality(Switched1, nullptr))
        uPtr(Switched1)->Invoke(2, this, args);
}

// private void OnUpdate() [instance]
void Navigator::OnUpdate()
{
    double elapsed = ::g::Fuse::Time::FrameTime() - _listenStart;

    if (elapsed > (double)DeferPageSwitchTimeout())
    {
        _listenTimeout = true;
        ::g::Fuse::UpdateManager::AddDeferredAction3(uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)Navigator__SwitchDeferred_fn, this), 4);
    }
}

// private Fuse.Controls.NavigatorSwipeDirection PageSwipeBackDirection(Fuse.Visual elm) [instance]
int32_t Navigator::PageSwipeBackDirection(::g::Fuse::Visual* elm)
{
    int32_t n = Navigator::GetSwipeBack(elm);
    return (n == 1) ? SwipeBack() : n;
}

// private Fuse.Controls.Navigator.PrepareResult Prepare(Fuse.Controls.Navigator.NavPage curPage, Fuse.Navigation.RouterPage routerPage, Fuse.Navigation.RoutingOperation operation) [instance]
Navigator__PrepareResult Navigator::Prepare1(Navigator__NavPage* curPage, ::g::Fuse::Navigation::RouterPage* routerPage, int32_t operation)
{
    Navigator__PrepareResult collection2;
    Navigator__NavPage* collection3;
    Navigator__PrepareResult collection4;
    Navigator__PrepareResult collection5;
    Navigator__PrepareResult collection6;
    Navigator__NavPage* collection7;
    Navigator__PrepareResult collection8;
    ::g::Fuse::Visual* ret15;
    bool ret16;

    if (::g::Uno::String::op_Inequality(DefaultPath(), nullptr))
        uPtr(routerPage)->DefaultPath(DefaultPath());

    ::g::Fuse::Visual* curPageVisual = uPtr(curPage)->Visual;

    if (::g::Uno::String::op_Equality(uPtr(routerPage)->Path(), uPtr(curPage->RouterPage)->Path()) && (curPageVisual != nullptr))
    {
        if (::g::Uno::String::op_Equality(uPtr(routerPage)->Parameter, uPtr(uPtr(curPage)->RouterPage)->Parameter) && (uPtr(routerPage)->Context == uPtr(uPtr(curPage)->RouterPage)->Context))
        {
            collection2 = uDefault<Navigator__PrepareResult>();
            collection2.Page = curPage;
            collection2.Routing = 0;
            return collection2;
        }

        bool compat = ::g::Fuse::Controls::CommonNavigation::CompatibleParameter(uPtr(routerPage)->Parameter, uPtr(uPtr(curPage)->RouterPage)->Parameter) && (uPtr(routerPage)->Context == uPtr(uPtr(curPage)->RouterPage)->Context);
        bool reuse = (operation == 0) && IsReuseLevel(curPageVisual, 5);
        bool replace = (operation == 2) && IsReuseLevel(curPageVisual, 4);
        bool nonTemplate = !uPtr(::g::Fuse::Controls::NavigationControl::GetControlPageData(curPageVisual, true))->FromTemplate;

        if (((compat || reuse) || replace) || nonTemplate)
        {
            collection3 = Navigator__NavPage::New1();
            uPtr(collection3)->Visual = curPageVisual;
            uPtr(collection3)->RouterPage = routerPage;
            Navigator__NavPage* np = collection3;
            collection4 = uDefault<Navigator__PrepareResult>();
            collection4.Page = np;
            collection4.Routing = 1;
            Navigator__PrepareResult result = collection4;
            uPtr(::g::Fuse::Navigation::PageData::GetOrCreate(curPageVisual, true))->AttachRouterPage(uPtr(result.Page)->RouterPage);
            return result;
        }
    }

    ::g::Fuse::Visual* preparedVisual = (_prepared != nullptr) ? (::g::Fuse::Visual*)uPtr(_prepared)->Visual : nullptr;

    if ((curPage != _prepared) && (preparedVisual != nullptr))
    {
        if (::g::Uno::String::op_Equality(uPtr(uPtr(_prepared)->RouterPage)->Path(), uPtr(routerPage)->Path()) && ::g::Uno::String::op_Equality(uPtr(uPtr(_prepared)->RouterPage)->Parameter, uPtr(routerPage)->Parameter))
        {
            uPtr(::g::Fuse::Navigation::PageData::GetOrCreate(preparedVisual, true))->AttachRouterPage(uPtr(_prepared)->RouterPage);
            collection5 = uDefault<Navigator__PrepareResult>();
            collection5.Page = _prepared;
            collection5.Routing = 2;
            collection5.UsedPrepared = true;
            return collection5;
        }
    }

    ::g::Fuse::Visual* useVisual = nullptr;

    if (::g::Uno::String::op_Equality(uPtr(routerPage)->Path(), nullptr))
        useVisual = nullptr;
    else
    {
        ::g::Uno::Collections::List* cache = GetCache(uPtr(routerPage)->Path());
        int32_t priority = 0;
        int32_t useAt = -1;

        for (int32_t i = 0; i < uPtr(cache)->Count(); i++)
        {
            ::g::Fuse::Visual* c = (::g::Uno::Collections::List__get_Item_fn(uPtr(cache), uCRef<int32_t>(i), &ret15), ret15);

            if (uPtr(c)->HasPendingRemove())
                continue;

            int32_t np1 = 0;

            if (uPtr(c)->IsRootingStarted())
            {
                if (::g::Uno::String::op_Equality(uPtr(c)->Parameter(), uPtr(routerPage)->Parameter))
                    np1 = 10;
                else if (IsReuseLevel(c, 3))
                    np1 = 5;
            }
            else if (IsReuseLevel(c, 2))
                np1 = 1;

            if (np1 > priority)
            {
                priority = np1;
                useAt = i;
                useVisual = c;
            }
        }

        if (useAt >= 0)
            uPtr(cache)->RemoveAt(useAt);

        if (useVisual == nullptr)
        {
            useVisual = GetVisual(uPtr(routerPage)->Path());

            if (useVisual == nullptr)
            {
                collection6 = uDefault<Navigator__PrepareResult>();
                collection6.Routing = 3;
                return collection6;
            }
        }
    }

    if (useVisual != nullptr)
    {
        uPtr(::g::Fuse::Navigation::PageData::GetOrCreate(useVisual, true))->AttachRouterPage(routerPage);

        if (!(::g::Uno::Collections::ICollection::Contains_ex(uInterface(uPtr(Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), useVisual, &ret16), ret16))
            ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), useVisual);
    }

    collection7 = Navigator__NavPage::New1();
    uPtr(collection7)->Visual = useVisual;
    uPtr(collection7)->RouterPage = routerPage;
    Navigator__NavPage* nvp = collection7;
    collection8 = uDefault<Navigator__PrepareResult>();
    collection8.Page = nvp;
    collection8.Routing = 2;
    return collection8;
}

// internal void ReleasePage(Fuse.Visual v) [instance]
void Navigator::ReleasePage(::g::Fuse::Visual* v)
{
    if (IsRemoveLevel(v, 3) || (Navigator::GetReuse(v) == 1))
        BeginRemoveChild(v, nullptr);
}

// public new Fuse.Controls.RemoveType get_Remove() [instance]
int32_t Navigator::Remove2()
{
    return _remove;
}

// public new void set_Remove(Fuse.Controls.RemoveType value) [instance]
void Navigator::Remove2(int32_t value)
{
    _remove = value;
}

// private void ResolveDeferred() [instance]
void Navigator::ResolveDeferred()
{
    if (_deferred == nullptr)
        return;

    Navigator__DeferSwitch* deferred = _deferred;
    _deferred = nullptr;
    ::g::Fuse::Visual* deferredVisual = uPtr(uPtr(deferred)->Page)->Visual;
    ::g::Fuse::Visual* currentVisual = uPtr(_current)->Visual;

    if (((deferredVisual != currentVisual) && (currentVisual != nullptr)) && (deferred->Operation != 0))
        uPtr(Navigation1())->SetPageProgress1(currentVisual, (float)((uPtr(deferred)->Operation == 1) ? -1 : 1), 0.0f, false);

    AddToCache(_current, deferredVisual);
    _current = deferred->Page;

    if (deferred->Operation == 0)
        CleanupChildren(deferredVisual);

    if ((deferredVisual != nullptr) && (GotoState() == 1))
        BringToFront(deferredVisual);

    uPtr(Navigation1())->Goto(deferredVisual, deferred->GotoMode);
    CheckInteraction();
    UpdateNavigationState();
}

// public Fuse.Controls.ReuseType get_Reuse() [instance]
int32_t Navigator::Reuse()
{
    return _reuse;
}

// public void set_Reuse(Fuse.Controls.ReuseType value) [instance]
void Navigator::Reuse(int32_t value)
{
    _reuse = value;
}

// private void RootInteraction() [instance]
void Navigator::RootInteraction()
{
    bool ret17;

    if (SwipeBack() == 0)
    {
        if (_navigatorSwipeBack != nullptr)
        {
            ::g::Uno::Collections::ICollection::Remove_ex(uInterface(uPtr(Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), _navigatorSwipeBack, &ret17);
            _navigatorSwipeBack = nullptr;
        }

        return;
    }

    uPtr(NavigatorSwipeBack())->Direction(SwipeBack());
    uPtr(NavigatorSwipeBack())->How(0);
    HitTestMode(HitTestMode() | 2);
    _router = ::g::Fuse::Navigation::Router::TryFindRouter(this);

    if (_router == nullptr)
    {
        ::g::Fuse::Diagnostics::UserError(uString::Const("Navigator requires a Router for interaction"), this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/Navigator.Interaction.uno"), 67, uString::Const("RootInteraction"), nullptr);
        return;
    }

    uPtr(_router)->add_HistoryChanged(uDelegate::New(::TYPES[83/*Fuse.Navigation.HistoryChangedHandler*/], (void*)Navigator__OnHistoryChanged_fn, this));
    OnHistoryChanged(nullptr);
}

// internal void SetTransitionState(object owner, bool on) [instance]
void Navigator::SetTransitionState(uObject* owner, bool on)
{
    if (!on)
        _activeTransitions.Remove(::g::Fuse::Internal::MiniList_typeof()->MakeType(uObject_typeof(), nullptr), owner);
    else if (!_activeTransitions.Contains(::g::Fuse::Internal::MiniList_typeof()->MakeType(uObject_typeof(), nullptr), owner))
        _activeTransitions.Add(::g::Fuse::Internal::MiniList_typeof()->MakeType(uObject_typeof(), nullptr), owner);

    UpdateNavigationState();
}

// public Fuse.Controls.NavigatorSwipeDirection get_SwipeBack() [instance]
int32_t Navigator::SwipeBack()
{
    return _swipeBack;
}

// public void set_SwipeBack(Fuse.Controls.NavigatorSwipeDirection value) [instance]
void Navigator::SwipeBack(int32_t value)
{
    _swipeBack = value;
}

// private void SwitchDeferred() [instance]
void Navigator::SwitchDeferred()
{
    Navigator__DeferSwitch* deferred = _deferred;

    if (deferred == nullptr)
        return;

    ::g::Fuse::Visual* deferredVisual = uPtr(uPtr(deferred)->Page)->Visual;

    if ((deferredVisual != nullptr) && !_listenTimeout)
    {
        int32_t busy = ::g::Fuse::Triggers::BusyTask::GetBusyActivity(deferredVisual, 0);

        if ((busy & DeferPageSwitch()) != 0)
        {
            if (_listenBusy == nullptr)
            {
                _listenBusy = deferredVisual;
                _listenStart = ::g::Fuse::Time::FrameTime();
                _listenTimeout = false;
                ::g::Fuse::Triggers::BusyTask::AddListener(_listenBusy, uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)Navigator__BusyChanged_fn, this));
                ::g::Fuse::UpdateManager::AddAction1(uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)Navigator__OnUpdate_fn, this), 0);
            }

            return;
        }
    }

    ResolveDeferred();
}

// internal generated void add_Switched(Fuse.Controls.NavigationSwitchedHandler value) [instance]
void Navigator::add_Switched(uDelegate* value)
{
    Switched1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(Switched1, value), ::g::Fuse::Controls::NavigationSwitchedHandler_typeof());
}

// internal generated void remove_Switched(Fuse.Controls.NavigationSwitchedHandler value) [instance]
void Navigator::remove_Switched(uDelegate* value)
{
    Switched1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(Switched1, value), ::g::Fuse::Controls::NavigationSwitchedHandler_typeof());
}

// private void SwitchToPage(Fuse.Controls.Navigator.NavPage newPage, Fuse.Navigation.NavigationGotoMode gotoMode, Fuse.Navigation.RoutingOperation operation, string operationStyle, bool usedPrepared) [instance]
void Navigator::SwitchToPage(Navigator__NavPage* newPage, int32_t gotoMode, int32_t operation, uString* operationStyle, bool usedPrepared)
{
    ::g::Fuse::Controls::NavigatorSwitchedArgs* collection10;
    Navigator__DeferSwitch* collection11;
    collection10 = ::g::Fuse::Controls::NavigatorSwitchedArgs::New3(this);
    uPtr(collection10)->OldPath = uPtr(uPtr(_current)->RouterPage)->Path();
    uPtr(collection10)->NewPath = uPtr(uPtr(newPage)->RouterPage)->Path();
    uPtr(collection10)->OldParameter = uPtr(uPtr(_current)->RouterPage)->Parameter;
    uPtr(collection10)->NewParameter = uPtr(uPtr(newPage)->RouterPage)->Parameter;
    uPtr(collection10)->OldVisual = uPtr(_current)->Visual;
    uPtr(collection10)->NewVisual = uPtr(newPage)->Visual;
    uPtr(collection10)->Operation = operation;
    uPtr(collection10)->OperationStyle = operationStyle;
    uPtr(collection10)->Mode = gotoMode;
    ::g::Fuse::Controls::NavigatorSwitchedArgs* args = collection10;
    OnSwitched(args);
    ::g::Fuse::Visual* newVisual = newPage->Visual;

    if ((newVisual != nullptr) && !usedPrepared)
    {
        int32_t ds = (operation == 3) ? -1 : (operation == 0) ? 1 : 1;
        uPtr(Navigation1())->SetPageProgress1(newVisual, (float)ds, (float)ds, false);
        uPtr(Navigation1())->UpdateProgress(1);
    }

    _deferred = (collection11 = Navigator__DeferSwitch::New1(), uPtr(collection11)->Page = newPage, uPtr(collection11)->GotoMode = gotoMode, uPtr(collection11)->Operation = operation, collection11);
    CleanupListenBusy();
    UpdateNavigationState();
    ::g::Fuse::UpdateManager::AddDeferredAction3(uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)Navigator__SwitchDeferred_fn, this), 4);
}

// private void UnrootInteraction() [instance]
void Navigator::UnrootInteraction()
{
}

// private void UpdateNavigationState() [instance]
void Navigator::UpdateNavigationState()
{
    bool hasTrans = _activeTransitions.Count(::g::Fuse::Internal::MiniList_typeof()->MakeType(uObject_typeof(), nullptr)) > 0;
    bool hasDefer = _deferred != nullptr;
    bool hasPrepared = _prepared != nullptr;
    bool isOn = hasTrans || hasDefer;
    uPtr(Navigation1())->SetState(hasPrepared ? 1 : isOn ? 2 : 0);
}

// public static Fuse.Controls.RemoveType GetRemove(Fuse.Visual elm) [static]
int32_t Navigator::GetRemove(::g::Fuse::Visual* elm)
{
    Navigator_typeof()->Init();
    uObject* res;

    if (uPtr(uPtr(elm)->Properties())->TryGet(Navigator::_propRemove_, &res))
        return uUnbox<int32_t>(::g::Fuse::Controls::RemoveType_typeof(), res);

    return 0;
}

// public static Fuse.Controls.ReuseType GetReuse(Fuse.Visual elm) [static]
int32_t Navigator::GetReuse(::g::Fuse::Visual* elm)
{
    Navigator_typeof()->Init();
    uObject* res;

    if (uPtr(uPtr(elm)->Properties())->TryGet(Navigator::_propReuse_, &res))
        return uUnbox<int32_t>(::g::Fuse::Controls::ReuseType_typeof(), res);

    return 0;
}

// public static Fuse.Controls.NavigatorSwipeDirection GetSwipeBack(Fuse.Visual elm) [static]
int32_t Navigator::GetSwipeBack(::g::Fuse::Visual* elm)
{
    Navigator_typeof()->Init();

    if (elm != nullptr)
    {
        uObject* res;

        if (uPtr(uPtr(elm)->Properties())->TryGet(Navigator::_propSwipeBack_, &res))
            return uUnbox<int32_t>(::g::Fuse::Controls::NavigatorSwipeDirection_typeof(), res);
    }

    return 1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/Navigator.Types.uno
// ------------------------------------------------------------------------------------

// public enum NavigatorGotoState
uEnumType* NavigatorGotoState_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.NavigatorGotoState", ::g::Uno::Int_typeof(), 2);
    type->SetLiterals(
        "Unchanged", 0LL,
        "BringToFront", 1LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigatorSwipe.uno
// -----------------------------------------------------------------------------------

// public sealed class NavigatorSwipe
// {
static void NavigatorSwipe_build(uType* type)
{
    ::STRINGS[47] = uString::Const("SwipeNavigator requires a Router for interaction");
    ::STRINGS[48] = uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigatorSwipe.uno");
    ::STRINGS[49] = uString::Const("OnRooted");
    ::STRINGS[50] = uString::Const("SwipeNavigator requires an Element parent");
    ::TYPES[42] = ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Triggers::Actions::TriggerAction_typeof(), nullptr);
    ::TYPES[6] = ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr);
    ::TYPES[5] = ::g::Fuse::Elements::Element_typeof();
    ::TYPES[43] = ::g::Fuse::Animations::Change_typeof()->MakeType(::g::Uno::Double_typeof(), nullptr);
    ::TYPES[24] = ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Animations::Animator_typeof(), nullptr);
    type->SetDependencies(
        ::g::Fuse::Navigation::Router_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Node_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Node_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Node_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Node_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Node_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Node_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Node_type, interface6));
    type->SetFields(24,
        ::g::Fuse::Controls::NavigatorSwipeDirection_typeof(), offsetof(NavigatorSwipe, _direction), 0,
        ::g::Fuse::Controls::NavigatorSwipeHow_typeof(), offsetof(NavigatorSwipe, _how), 0,
        ::g::Fuse::Gestures::SwipeGesture_typeof(), offsetof(NavigatorSwipe, _swipeGesture), 0,
        ::g::Fuse::Gestures::SwipingAnimation_typeof(), offsetof(NavigatorSwipe, _swipeAnim), 0,
        ::g::Fuse::Gestures::Swiped_typeof(), offsetof(NavigatorSwipe, _swipedCompleted), 0,
        ::g::Fuse::Gestures::Swiped_typeof(), offsetof(NavigatorSwipe, _swipedCancelled), 0,
        ::g::Fuse::Navigation::RouterModify_typeof(), offsetof(NavigatorSwipe, _modify), 0,
        ::g::Fuse::Navigation::Router_typeof(), offsetof(NavigatorSwipe, _router), 0,
        ::g::Fuse::Animations::Animator_typeof(), offsetof(NavigatorSwipe, _prepareAnim), 0);
}

::g::Fuse::Node_type* NavigatorSwipe_typeof()
{
    static uSStrong< ::g::Fuse::Node_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::NodeGroupBase_typeof();
    options.FieldCount = 33;
    options.InterfaceCount = 7;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(NavigatorSwipe);
    options.TypeSize = sizeof(::g::Fuse::Node_type);
    type = (::g::Fuse::Node_type*)uClassType::New("Fuse.Controls.NavigatorSwipe", options);
    type->fp_build_ = NavigatorSwipe_build;
    type->fp_ctor_ = (void*)NavigatorSwipe__New2_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))NavigatorSwipe__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))NavigatorSwipe__OnUnrooted_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public NavigatorSwipe()
void NavigatorSwipe__ctor_4_fn(NavigatorSwipe* __this)
{
    __this->ctor_4();
}

// public Fuse.Controls.NavigatorSwipeDirection get_Direction()
void NavigatorSwipe__get_Direction_fn(NavigatorSwipe* __this, int32_t* __retval)
{
    *__retval = __this->Direction();
}

// public void set_Direction(Fuse.Controls.NavigatorSwipeDirection value)
void NavigatorSwipe__set_Direction_fn(NavigatorSwipe* __this, int32_t* value)
{
    __this->Direction(*value);
}

// public Fuse.Controls.NavigatorSwipeHow get_How()
void NavigatorSwipe__get_How_fn(NavigatorSwipe* __this, int32_t* __retval)
{
    *__retval = __this->How();
}

// public void set_How(Fuse.Controls.NavigatorSwipeHow value)
void NavigatorSwipe__set_How_fn(NavigatorSwipe* __this, int32_t* value)
{
    __this->How(*value);
}

// public bool get_IsEnabled()
void NavigatorSwipe__get_IsEnabled_fn(NavigatorSwipe* __this, bool* __retval)
{
    *__retval = __this->IsEnabled();
}

// public void set_IsEnabled(bool value)
void NavigatorSwipe__set_IsEnabled_fn(NavigatorSwipe* __this, bool* value)
{
    __this->IsEnabled(*value);
}

// public NavigatorSwipe New()
void NavigatorSwipe__New2_fn(NavigatorSwipe** __retval)
{
    *__retval = NavigatorSwipe::New2();
}

// protected override sealed void OnRooted()
void NavigatorSwipe__OnRooted_fn(NavigatorSwipe* __this)
{
    ::g::Fuse::Animations::Change* collection3;
    ::g::Fuse::NodeGroupBase__OnRooted_fn(__this);
    __this->_router = ::g::Fuse::Navigation::Router::TryFindRouter(__this);

    if (__this->_router == nullptr)
    {
        ::g::Fuse::Diagnostics::UserError(::STRINGS[47/*"SwipeNaviga...*/], __this, ::STRINGS[48/*"/Users/mort...*/], 214, ::STRINGS[49/*"OnRooted"*/], nullptr);
        return;
    }

    if (!uIs((::g::Fuse::Visual*)__this->Parent(), ::TYPES[5/*Fuse.Elements.Element*/]))
    {
        ::g::Fuse::Diagnostics::UserError(::STRINGS[50/*"SwipeNaviga...*/], __this, ::STRINGS[48/*"/Users/mort...*/], 219, ::STRINGS[49/*"OnRooted"*/], nullptr);
        return;
    }

    __this->SetupGestureSwipeDerection();
    uPtr(__this->_swipeGesture)->LengthNode(uAs< ::g::Fuse::Elements::Element*>(__this->Parent(), ::TYPES[5/*Fuse.Elements.Element*/]));
    uPtr(__this->_swipeGesture)->IsEnabled(__this->Direction() != 0);
    __this->_prepareAnim = (collection3 = (::g::Fuse::Animations::Change*)::g::Fuse::Animations::Change::New2(::TYPES[43/*Fuse.Animations.Change<double>*/], ::g::Fuse::Controls::Router_PrepareProgress_Property::New1(__this->_router)), ::g::Fuse::Animations::Change__set_Value_fn(uPtr(collection3), uCRef(1.0)), 1.0, collection3);
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(uPtr(__this->_swipeAnim)->Animators()), ::TYPES[24/*Uno.Collections.ICollection<Fuse.Animations.Animator>*/]), __this->_prepareAnim);
}

// protected override sealed void OnUnrooted()
void NavigatorSwipe__OnUnrooted_fn(NavigatorSwipe* __this)
{
    bool ret5;
    ::g::Uno::Collections::ICollection::Remove_ex(uInterface(uPtr(uPtr(__this->_swipeAnim)->Animators()), ::TYPES[24/*Uno.Collections.ICollection<Fuse.Animations.Animator>*/]), __this->_prepareAnim, &ret5);
    __this->_prepareAnim = nullptr;
    __this->_router = nullptr;
    ::g::Fuse::NodeGroupBase__OnUnrooted_fn(__this);
}

// private void SetupGestureSwipeDerection()
void NavigatorSwipe__SetupGestureSwipeDerection_fn(NavigatorSwipe* __this)
{
    __this->SetupGestureSwipeDerection();
}

// public NavigatorSwipe() [instance]
void NavigatorSwipe::ctor_4()
{
    ::g::Fuse::Navigation::RouterModify* collection1;
    ::g::Fuse::Navigation::RouterModify* collection2;
    _swipeGesture = ::g::Fuse::Gestures::SwipeGesture::New2();
    _modify = (collection1 = ::g::Fuse::Navigation::RouterModify::New2(0), uPtr(collection1)->When(3), 3, collection1);
    ctor_3(0);
    UseContent(true);
    How(0);
    _swipeAnim = ::g::Fuse::Gestures::SwipingAnimation::New2(_swipeGesture);
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(uPtr(_swipeAnim)->Actions()), ::TYPES[42/*Uno.Collections.ICollection<Fuse.Triggers.Actions.TriggerAction>*/]), _modify);
    _swipedCompleted = ::g::Fuse::Gestures::Swiped::New2(_swipeGesture);
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(uPtr(_swipedCompleted)->Actions()), ::TYPES[42/*Uno.Collections.ICollection<Fuse.Triggers.Actions.TriggerAction>*/]), (collection2 = ::g::Fuse::Navigation::RouterModify::New2(0), uPtr(collection2)->How(7), 7, collection2));
    _swipedCancelled = ::g::Fuse::Gestures::Swiped::New2(_swipeGesture);
    uPtr(_swipedCancelled)->How(3);
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(uPtr(_swipedCancelled)->Actions()), ::TYPES[42/*Uno.Collections.ICollection<Fuse.Triggers.Actions.TriggerAction>*/]), ::g::Fuse::Navigation::RouterCancelNavigation::New2());
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(Nodes()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), _swipeGesture);
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(Nodes()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), _swipeAnim);
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(Nodes()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), _swipedCompleted);
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(Nodes()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), _swipedCancelled);
}

// public Fuse.Controls.NavigatorSwipeDirection get_Direction() [instance]
int32_t NavigatorSwipe::Direction()
{
    return _direction;
}

// public void set_Direction(Fuse.Controls.NavigatorSwipeDirection value) [instance]
void NavigatorSwipe::Direction(int32_t value)
{
    _direction = value;

    if (_swipeGesture != nullptr)
    {
        SetupGestureSwipeDerection();
        uPtr(_swipeGesture)->IsEnabled(Direction() != 0);
    }
}

// public Fuse.Controls.NavigatorSwipeHow get_How() [instance]
int32_t NavigatorSwipe::How()
{
    return _how;
}

// public void set_How(Fuse.Controls.NavigatorSwipeHow value) [instance]
void NavigatorSwipe::How(int32_t value)
{
    _how = value;

    switch (_how)
    {
        case 0:
        {
            uPtr(_modify)->How(4);
            break;
        }
        case 1:
        {
            uPtr(_modify)->How(5);
            break;
        }
        case 2:
        {
            uPtr(_modify)->How(6);
            break;
        }
    }
}

// public bool get_IsEnabled() [instance]
bool NavigatorSwipe::IsEnabled()
{
    return UseContent();
}

// public void set_IsEnabled(bool value) [instance]
void NavigatorSwipe::IsEnabled(bool value)
{
    UseContent(value);
}

// private void SetupGestureSwipeDerection() [instance]
void NavigatorSwipe::SetupGestureSwipeDerection()
{
    switch (Direction())
    {
        case 2:
        {
            uPtr(_swipeGesture)->Direction(0);
            break;
        }
        case 6:
        {
            uPtr(_swipeGesture)->Direction(2);
            break;
        }
        case 4:
        {
            uPtr(_swipeGesture)->Direction(1);
            break;
        }
        case 8:
        {
            uPtr(_swipeGesture)->Direction(3);
            break;
        }
        case 3:
        {
            uPtr(_swipeGesture)->Edge(0);
            uPtr(_swipeGesture)->HitSize(10.0f);
            break;
        }
        case 7:
        {
            uPtr(_swipeGesture)->Edge(1);
            uPtr(_swipeGesture)->HitSize(10.0f);
            break;
        }
        case 9:
        {
            uPtr(_swipeGesture)->Edge(2);
            uPtr(_swipeGesture)->HitSize(10.0f);
            break;
        }
        case 5:
        {
            uPtr(_swipeGesture)->Edge(3);
            uPtr(_swipeGesture)->HitSize(10.0f);
            break;
        }
    }
}

// public NavigatorSwipe New() [static]
NavigatorSwipe* NavigatorSwipe::New2()
{
    NavigatorSwipe* obj4 = (NavigatorSwipe*)uNew(NavigatorSwipe_typeof());
    obj4->ctor_4();
    return obj4;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigatorSwipe.uno
// -----------------------------------------------------------------------------------

// public enum NavigatorSwipeDirection
uEnumType* NavigatorSwipeDirection_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.NavigatorSwipeDirection", ::g::Uno::Int_typeof(), 10);
    type->SetLiterals(
        "None", 0LL,
        "Default", 1LL,
        "Left", 2LL,
        "LeftEdge", 3LL,
        "Up", 4LL,
        "Bottom", 5LL,
        "Right", 6LL,
        "RightEdge", 7LL,
        "Down", 8LL,
        "Top", 9LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigatorSwipe.uno
// -----------------------------------------------------------------------------------

// public enum NavigatorSwipeHow
uEnumType* NavigatorSwipeHow_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.NavigatorSwipeHow", ::g::Uno::Int_typeof(), 3);
    type->SetLiterals(
        "Back", 0LL,
        "PushBookmark", 1LL,
        "GotoBookmark", 2LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/Navigator.Types.uno
// ------------------------------------------------------------------------------------

// internal sealed class NavigatorSwitchedArgs
// {
static void NavigatorSwitchedArgs_build(uType* type)
{
    type->SetInterfaces(
        ::g::Fuse::Scripting::IScriptEvent_typeof(), offsetof(::g::Fuse::VisualEventArgs_type, interface0));
    type->SetFields(2,
        ::g::Uno::String_typeof(), offsetof(NavigatorSwitchedArgs, OldPath), 0,
        ::g::Uno::String_typeof(), offsetof(NavigatorSwitchedArgs, NewPath), 0,
        ::g::Uno::String_typeof(), offsetof(NavigatorSwitchedArgs, OldParameter), 0,
        ::g::Uno::String_typeof(), offsetof(NavigatorSwitchedArgs, NewParameter), 0,
        ::g::Fuse::Visual_typeof(), offsetof(NavigatorSwitchedArgs, OldVisual), 0,
        ::g::Fuse::Visual_typeof(), offsetof(NavigatorSwitchedArgs, NewVisual), 0,
        ::g::Fuse::Navigation::RoutingOperation_typeof(), offsetof(NavigatorSwitchedArgs, Operation), 0,
        ::g::Uno::String_typeof(), offsetof(NavigatorSwitchedArgs, OperationStyle), 0,
        ::g::Fuse::Navigation::NavigationGotoMode_typeof(), offsetof(NavigatorSwitchedArgs, Mode), 0);
}

::g::Fuse::VisualEventArgs_type* NavigatorSwitchedArgs_typeof()
{
    static uSStrong< ::g::Fuse::VisualEventArgs_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::VisualEventArgs_typeof();
    options.FieldCount = 11;
    options.InterfaceCount = 1;
    options.ObjectSize = sizeof(NavigatorSwitchedArgs);
    options.TypeSize = sizeof(::g::Fuse::VisualEventArgs_type);
    type = (::g::Fuse::VisualEventArgs_type*)uClassType::New("Fuse.Controls.NavigatorSwitchedArgs", options);
    type->fp_build_ = NavigatorSwitchedArgs_build;
    type->interface0.fp_Serialize = (void(*)(uObject*, uObject*))::g::Fuse::VisualEventArgs__FuseScriptingIScriptEventSerialize_fn;
    return type;
}

// public NavigatorSwitchedArgs(Fuse.Visual v)
void NavigatorSwitchedArgs__ctor_2_fn(NavigatorSwitchedArgs* __this, ::g::Fuse::Visual* v)
{
    __this->ctor_2(v);
}

// public NavigatorSwitchedArgs New(Fuse.Visual v)
void NavigatorSwitchedArgs__New3_fn(::g::Fuse::Visual* v, NavigatorSwitchedArgs** __retval)
{
    *__retval = NavigatorSwitchedArgs::New3(v);
}

// public NavigatorSwitchedArgs(Fuse.Visual v) [instance]
void NavigatorSwitchedArgs::ctor_2(::g::Fuse::Visual* v)
{
    ctor_1(v);
}

// public NavigatorSwitchedArgs New(Fuse.Visual v) [static]
NavigatorSwitchedArgs* NavigatorSwitchedArgs::New3(::g::Fuse::Visual* v)
{
    NavigatorSwitchedArgs* obj1 = (NavigatorSwitchedArgs*)uNew(NavigatorSwitchedArgs_typeof());
    obj1->ctor_2(v);
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/Navigator.uno
// ------------------------------------------------------------------------------

// private sealed class Navigator.NavPage
// {
static void Navigator__NavPage_build(uType* type)
{
    type->SetFields(0,
        ::g::Fuse::Visual_typeof(), offsetof(Navigator__NavPage, Visual), 0,
        ::g::Fuse::Navigation::RouterPage_typeof(), offsetof(Navigator__NavPage, RouterPage), 0);
}

uType* Navigator__NavPage_typeof()
{
    static uSStrong<uType*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.FieldCount = 2;
    options.ObjectSize = sizeof(Navigator__NavPage);
    options.TypeSize = sizeof(uType);
    type = uClassType::New("Fuse.Controls.Navigator.NavPage", options);
    type->fp_build_ = Navigator__NavPage_build;
    type->fp_ctor_ = (void*)Navigator__NavPage__New1_fn;
    return type;
}

// public NavPage()
void Navigator__NavPage__ctor__fn(Navigator__NavPage* __this)
{
    __this->ctor_();
}

// public NavPage New()
void Navigator__NavPage__New1_fn(Navigator__NavPage** __retval)
{
    *__retval = Navigator__NavPage::New1();
}

// public NavPage() [instance]
void Navigator__NavPage::ctor_()
{
    RouterPage = ::g::Fuse::Navigation::RouterPage::CreateDefault();
}

// public NavPage New() [static]
Navigator__NavPage* Navigator__NavPage::New1()
{
    Navigator__NavPage* obj1 = (Navigator__NavPage*)uNew(Navigator__NavPage_typeof());
    obj1->ctor_();
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/PageControl.uno
// --------------------------------------------------------------------------------

// public partial sealed class PageControl
// {
// static PageControl()
static void PageControl__cctor_5_fn(uType* __type)
{
    ::g::Fuse::Scripting::ScriptClass_typeof()->Init();
    PageControl::ActiveIndexName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[51/*"ActiveIndex"*/]);
    ::g::Fuse::Scripting::ScriptClass::Register(__type, uArray::Init< ::g::Fuse::Scripting::ScriptMember*>(::TYPES[19/*Fuse.Scripting.ScriptMember[]*/], 1, (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New1(::TYPES[44/*Fuse.Scripting.ScriptMethod<Fuse.Controls.PageControl>*/], ::STRINGS[52/*"goto"*/], uDelegate::New(::TYPES[45/*Uno.Action<Fuse.Controls.PageControl, object[]>*/], (void*)PageControl__gotoPage_fn))));
}

static void PageControl_build(uType* type)
{
    ::STRINGS[51] = uString::Const("ActiveIndex");
    ::STRINGS[52] = uString::Const("goto");
    ::STRINGS[5] = uString::Const("");
    ::STRINGS[53] = uString::Const("PageControl.goto() : Argument must be a node object");
    ::STRINGS[54] = uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/PageControl.uno");
    ::STRINGS[55] = uString::Const("gotoPage");
    ::TYPES[18] = ::g::Uno::Type_typeof();
    ::TYPES[19] = ::g::Fuse::Scripting::ScriptMember_typeof()->Array();
    ::TYPES[44] = ::g::Fuse::Scripting::ScriptMethod1_typeof()->MakeType(type, nullptr);
    ::TYPES[45] = ::g::Uno::Action2_typeof()->MakeType(type, uObject_typeof()->Array(), nullptr);
    ::TYPES[46] = ::g::Fuse::Navigation::ISeekableNavigation_typeof();
    ::TYPES[4] = ::g::Fuse::Visual_typeof();
    ::TYPES[6] = ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr);
    ::TYPES[5] = ::g::Fuse::Elements::Element_typeof();
    ::TYPES[47] = ::g::Fuse::Navigation::DynamicLinearNavigation_typeof();
    type->SetDependencies(
        ::g::Uno::Math_typeof(),
        ::g::Fuse::Navigation::PageData_typeof(),
        ::g::Fuse::Navigation::VisualNavigation_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(PageControl_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(PageControl_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(PageControl_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(PageControl_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(PageControl_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(PageControl_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(PageControl_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(PageControl_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(PageControl_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(PageControl_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::TYPES[4/*Fuse.Visual*/], nullptr), offsetof(PageControl_type, interface10),
        ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/], offsetof(PageControl_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(PageControl_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(PageControl_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(PageControl_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(PageControl_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(PageControl_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(PageControl_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(PageControl_type, interface18),
        ::g::Fuse::Navigation::INavigation_typeof(), offsetof(PageControl_type, interface19),
        ::g::Fuse::Reactive::IObserver_typeof(), offsetof(PageControl_type, interface20),
        ::g::Fuse::Node__ISubtreeDataProvider_typeof(), offsetof(PageControl_type, interface21),
        ::g::Fuse::Navigation::IBaseNavigation_typeof(), offsetof(PageControl_type, interface22),
        ::TYPES[46/*Fuse.Navigation.ISeekableNavigation*/], offsetof(PageControl_type, interface23),
        ::g::Fuse::Navigation::IRouterOutlet_typeof(), offsetof(PageControl_type, interface24));
    type->SetFields(124,
        ::g::Fuse::Controls::NavigationControlInactiveState_typeof(), offsetof(PageControl, _inactive), 0,
        ::g::Fuse::Navigation::SwipeNavigate_typeof(), offsetof(PageControl, _swipe), 0,
        ::g::Fuse::Navigation::AllowedNavigationDirections_typeof(), offsetof(PageControl, _swipeAllow), 0,
        ::g::Fuse::Controls::NavigationControlInteraction_typeof(), offsetof(PageControl, _interaction), 0,
        ::g::Fuse::Layouts::Orientation_typeof(), offsetof(PageControl, _orient), 0,
        ::g::Fuse::Controls::CommonNavigationPages_typeof(), offsetof(PageControl, _pages), 0,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&PageControl::ActiveIndexName_, uFieldFlagsStatic);
}

PageControl_type* PageControl_typeof()
{
    static uSStrong<PageControl_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::NavigationControl_typeof();
    options.FieldCount = 131;
    options.InterfaceCount = 25;
    options.DependencyCount = 3;
    options.ObjectSize = sizeof(PageControl);
    options.TypeSize = sizeof(PageControl_type);
    type = (PageControl_type*)uClassType::New("Fuse.Controls.PageControl", options);
    type->fp_build_ = PageControl_build;
    type->fp_cctor_ = PageControl__cctor_5_fn;
    type->fp_CreateTriggers = (void(*)(::g::Fuse::Controls::NavigationControl*, ::g::Fuse::Elements::Element*, ::g::Fuse::Controls::NavigationControl__ControlPageData*))PageControl__CreateTriggers_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))PageControl__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))PageControl__OnUnrooted_fn;
    type->fp_UpdateInteraction = (void(*)(::g::Fuse::Controls::NavigationControl*))PageControl__UpdateInteraction_fn;
    type->fp_UpdateProgress = (void(*)(::g::Fuse::Controls::NavigationControl*, ::g::Fuse::Elements::Element*, ::g::Fuse::Navigation::NavigationPageState*, ::g::Fuse::Controls::NavigationControl__ControlPageData*))PageControl__UpdateProgress_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))PageControl__UnoUXIPropertyListenerOnPropertyChanged_fn;
    type->interface24.fp_PartialPrepareGoto = (void(*)(uObject*, double*))PageControl__FuseNavigationIRouterOutletPartialPrepareGoto_fn;
    type->interface24.fp_CancelPrepare = (void(*)(uObject*))PageControl__FuseNavigationIRouterOutletCancelPrepare_fn;
    type->interface24.fp_CompareCurrent = (void(*)(uObject*, ::g::Fuse::Navigation::RouterPage*, ::g::Fuse::Visual**, int32_t*))PageControl__FuseNavigationIRouterOutletCompareCurrent_fn;
    type->interface24.fp_Goto = (void(*)(uObject*, ::g::Fuse::Navigation::RouterPage*, int32_t*, int32_t*, uString*, ::g::Fuse::Visual**, int32_t*))PageControl__FuseNavigationIRouterOutletGoto_fn;
    type->interface24.fp_GetCurrent = (void(*)(uObject*, ::g::Fuse::Visual**, ::g::Fuse::Navigation::RouterPage**))PageControl__FuseNavigationIRouterOutletGetCurrent_fn;
    type->interface23.fp_BeginSeek = (void(*)(uObject*))PageControl__FuseNavigationISeekableNavigationBeginSeek_fn;
    type->interface23.fp_Seek = (void(*)(uObject*, ::g::Fuse::Navigation::UpdateSeekArgs*))PageControl__FuseNavigationISeekableNavigationSeek_fn;
    type->interface23.fp_EndSeek = (void(*)(uObject*, ::g::Fuse::Navigation::EndSeekArgs*))PageControl__FuseNavigationISeekableNavigationEndSeek_fn;
    type->interface24.fp_get_Type = (void(*)(uObject*, int32_t*))PageControl__FuseNavigationIRouterOutletget_Type_fn;
    type->interface19.fp_Goto = (void(*)(uObject*, ::g::Fuse::Visual*, int32_t*))::g::Fuse::Controls::NavigationControl__Goto_fn;
    type->interface19.fp_Toggle = (void(*)(uObject*, ::g::Fuse::Visual*))::g::Fuse::Controls::NavigationControl__Toggle_fn;
    type->interface19.fp_add_PageProgressChanged = (void(*)(uObject*, uDelegate*))::g::Fuse::Controls::NavigationControl__add_PageProgressChanged_fn;
    type->interface19.fp_remove_PageProgressChanged = (void(*)(uObject*, uDelegate*))::g::Fuse::Controls::NavigationControl__remove_PageProgressChanged_fn;
    type->interface19.fp_add_Navigated = (void(*)(uObject*, uDelegate*))::g::Fuse::Controls::NavigationControl__add_Navigated_fn;
    type->interface19.fp_remove_Navigated = (void(*)(uObject*, uDelegate*))::g::Fuse::Controls::NavigationControl__remove_Navigated_fn;
    type->interface19.fp_add_StateChanged = (void(*)(uObject*, uDelegate*))::g::Fuse::Controls::NavigationControl__add_StateChanged_fn;
    type->interface19.fp_remove_StateChanged = (void(*)(uObject*, uDelegate*))::g::Fuse::Controls::NavigationControl__remove_StateChanged_fn;
    type->interface22.fp_GoForward = (void(*)(uObject*))::g::Fuse::Controls::NavigationControl__GoForward_fn;
    type->interface22.fp_GoBack = (void(*)(uObject*))::g::Fuse::Controls::NavigationControl__GoBack_fn;
    type->interface22.fp_get_CanGoBack = (void(*)(uObject*, bool*))::g::Fuse::Controls::NavigationControl__get_CanGoBack_fn;
    type->interface22.fp_get_CanGoForward = (void(*)(uObject*, bool*))::g::Fuse::Controls::NavigationControl__get_CanGoForward_fn;
    type->interface19.fp_GetPageState = (void(*)(uObject*, ::g::Fuse::Visual*, ::g::Fuse::Navigation::NavigationPageState*))::g::Fuse::Controls::NavigationControl__FuseNavigationINavigationGetPageState_fn;
    type->interface20.fp_OnSet = (void(*)(uObject*, uObject*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnSet_fn;
    type->interface20.fp_OnFailed = (void(*)(uObject*, uString*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnFailed_fn;
    type->interface20.fp_OnAdd = (void(*)(uObject*, uObject*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnAdd_fn;
    type->interface20.fp_OnRemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnRemoveAt_fn;
    type->interface20.fp_OnInsertAt = (void(*)(uObject*, int32_t*, uObject*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnInsertAt_fn;
    type->interface20.fp_OnNewAt = (void(*)(uObject*, int32_t*, uObject*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnNewAt_fn;
    type->interface20.fp_OnNewAll = (void(*)(uObject*, uObject*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnNewAll_fn;
    type->interface20.fp_OnClear = (void(*)(uObject*))::g::Fuse::Controls::NavigationControl__FuseReactiveIObserverOnClear_fn;
    type->interface21.fp_TryGetDataProvider = (void(*)(uObject*, ::g::Fuse::Node*, int32_t*, uObject**, int32_t*))::g::Fuse::Controls::NavigationControl__FuseNodeISubtreeDataProviderTryGetDataProvider_fn;
    type->interface19.fp_get_ActivePage = (void(*)(uObject*, ::g::Fuse::Visual**))::g::Fuse::Controls::NavigationControl__FuseNavigationINavigationget_ActivePage_fn;
    type->interface19.fp_get_State = (void(*)(uObject*, int32_t*))::g::Fuse::Controls::NavigationControl__FuseNavigationINavigationget_State_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// private bool get_CollapseInactive()
void PageControl__get_CollapseInactive_fn(PageControl* __this, bool* __retval)
{
    *__retval = __this->CollapseInactive();
}

// protected override sealed void CreateTriggers(Fuse.Elements.Element c, Fuse.Controls.NavigationControl.ControlPageData pd)
void PageControl__CreateTriggers_fn(PageControl* __this, ::g::Fuse::Elements::Element* c, ::g::Fuse::Controls::NavigationControl__ControlPageData* pd)
{
    switch (__this->PageTransition(c))
    {
        case 1:
            break;
        case 2:
        {
            if (__this->IsHorizontal())
            {
                uPtr(pd)->Enter = ::g::Fuse::Controls::NavigationInternal::EnterHorizontal::New3();
                pd->Exit = ::g::Fuse::Controls::NavigationInternal::ExitHorizontal::New3();
            }
            else
            {
                uPtr(pd)->Enter = ::g::Fuse::Controls::NavigationInternal::EnterVertical::New3();
                pd->Exit = ::g::Fuse::Controls::NavigationInternal::ExitVertical::New3();
            }

            break;
        }
    }
}

// private bool get_DisableInactive()
void PageControl__get_DisableInactive_fn(PageControl* __this, bool* __retval)
{
    *__retval = __this->DisableInactive();
}

// private void Fuse.Navigation.IRouterOutlet.CancelPrepare()
void PageControl__FuseNavigationIRouterOutletCancelPrepare_fn(PageControl* __this)
{
}

// private Fuse.Navigation.RoutingResult Fuse.Navigation.IRouterOutlet.CompareCurrent(Fuse.Navigation.RouterPage routerPage, Fuse.Visual& pageVisual)
void PageControl__FuseNavigationIRouterOutletCompareCurrent_fn(PageControl* __this, ::g::Fuse::Navigation::RouterPage* routerPage, ::g::Fuse::Visual** pageVisual, int32_t* __retval)
{
    return *__retval = ::g::Fuse::Controls::CommonNavigation::CompareCurrent(__this, __this->Active(), routerPage, pageVisual), void();
}

// private Fuse.Navigation.RouterPage Fuse.Navigation.IRouterOutlet.GetCurrent(Fuse.Visual& pageVisual)
void PageControl__FuseNavigationIRouterOutletGetCurrent_fn(PageControl* __this, ::g::Fuse::Visual** pageVisual, ::g::Fuse::Navigation::RouterPage** __retval)
{
    *pageVisual = __this->Active();

    if (__this->Active() == nullptr)
        return *__retval = ::g::Fuse::Navigation::RouterPage::New1(::STRINGS[5/*""*/], nullptr, nullptr), void();
    else
        return *__retval = uPtr(::g::Fuse::Navigation::PageData::GetOrCreate(__this->Active(), true))->RouterPage(), void();
}

// private Fuse.Navigation.RoutingResult Fuse.Navigation.IRouterOutlet.Goto(Fuse.Navigation.RouterPage routerPage, Fuse.Navigation.NavigationGotoMode gotoMode, Fuse.Navigation.RoutingOperation operation, string operationStyle, Fuse.Visual& pageVisual)
void PageControl__FuseNavigationIRouterOutletGoto_fn(PageControl* __this, ::g::Fuse::Navigation::RouterPage* routerPage, int32_t* gotoMode, int32_t* operation, uString* operationStyle, ::g::Fuse::Visual** pageVisual, int32_t* __retval)
{
    int32_t gotoMode_ = *gotoMode;
    int32_t operation_ = *operation;
    return *__retval = ::g::Fuse::Controls::CommonNavigation::Goto(__this, routerPage, gotoMode_, operation_, operationStyle, pageVisual), void();
}

// private void Fuse.Navigation.IRouterOutlet.PartialPrepareGoto(double progress)
void PageControl__FuseNavigationIRouterOutletPartialPrepareGoto_fn(PageControl* __this, double* progress)
{
}

// private Fuse.Navigation.OutletType Fuse.Navigation.IRouterOutlet.get_Type()
void PageControl__FuseNavigationIRouterOutletget_Type_fn(PageControl* __this, int32_t* __retval)
{
    return *__retval = __this->RouterOutletType(), void();
}

// private void Fuse.Navigation.ISeekableNavigation.BeginSeek()
void PageControl__FuseNavigationISeekableNavigationBeginSeek_fn(PageControl* __this)
{
    ::g::Fuse::Navigation::ISeekableNavigation::BeginSeek(uInterface(uPtr(uAs<uObject*>(__this->Navigation1(), ::TYPES[46/*Fuse.Navigation.ISeekableNavigation*/])), ::TYPES[46/*Fuse.Navigation.ISeekableNavigation*/]));
}

// private void Fuse.Navigation.ISeekableNavigation.EndSeek(Fuse.Navigation.EndSeekArgs args)
void PageControl__FuseNavigationISeekableNavigationEndSeek_fn(PageControl* __this, ::g::Fuse::Navigation::EndSeekArgs* args)
{
    ::g::Fuse::Navigation::ISeekableNavigation::EndSeek(uInterface(uPtr(uAs<uObject*>(__this->Navigation1(), ::TYPES[46/*Fuse.Navigation.ISeekableNavigation*/])), ::TYPES[46/*Fuse.Navigation.ISeekableNavigation*/]), args);
}

// private void Fuse.Navigation.ISeekableNavigation.Seek(Fuse.Navigation.UpdateSeekArgs args)
void PageControl__FuseNavigationISeekableNavigationSeek_fn(PageControl* __this, ::g::Fuse::Navigation::UpdateSeekArgs* args)
{
    ::g::Fuse::Navigation::ISeekableNavigation::Seek(uInterface(uPtr(uAs<uObject*>(__this->Navigation1(), ::TYPES[46/*Fuse.Navigation.ISeekableNavigation*/])), ::TYPES[46/*Fuse.Navigation.ISeekableNavigation*/]), args);
}

// private static void gotoPage(Fuse.Controls.PageControl pc, object[] args)
void PageControl__gotoPage_fn(PageControl* pc, uArray* args)
{
    PageControl::gotoPage(pc, args);
}

// private bool get_IsHorizontal()
void PageControl__get_IsHorizontal_fn(PageControl* __this, bool* __retval)
{
    *__retval = __this->IsHorizontal();
}

// internal new Fuse.Navigation.DynamicLinearNavigation get_Navigation()
void PageControl__get_Navigation1_fn(PageControl* __this, ::g::Fuse::Navigation::DynamicLinearNavigation** __retval)
{
    *__retval = __this->Navigation1();
}

// protected override sealed void OnRooted()
void PageControl__OnRooted_fn(PageControl* __this)
{
    ::g::Fuse::Controls::NavigationControl__OnRooted_fn(__this);
    uPtr(__this->_pages)->Rooted(__this);
    __this->RootActivePage();
}

// protected override sealed void OnUnrooted()
void PageControl__OnUnrooted_fn(PageControl* __this)
{
    __this->UnrootActivePage();
    uPtr(__this->_pages)->Unrooted();
    ::g::Fuse::Controls::NavigationControl__OnUnrooted_fn(__this);
}

// private void Uno.UX.IPropertyListener.OnPropertyChanged(Uno.UX.PropertyObject obj, Uno.UX.Selector property)
void PageControl__UnoUXIPropertyListenerOnPropertyChanged_fn(PageControl* __this, ::g::Uno::UX::PropertyObject* obj, ::g::Uno::UX::Selector* property)
{
    ::g::Uno::UX::Selector property_ = *property;

    if (obj == __this->Navigation1())
    {
        if (::g::Uno::UX::Selector__op_Equality(property_, ::g::Fuse::Navigation::VisualNavigation::ActiveIndexName()))
            __this->OnPropertyChanged(PageControl::ActiveIndexName_);
    }
}

// protected override sealed void UpdateInteraction()
void PageControl__UpdateInteraction_fn(PageControl* __this)
{
    bool ret2;
    bool needSwipe = __this->_interaction == 1;

    if (needSwipe)
    {
        if (__this->_swipe == nullptr)
        {
            __this->_swipe = ::g::Fuse::Navigation::SwipeNavigate::New2();
            uPtr(__this->_swipe)->SwipeDirection(__this->IsHorizontal() ? 1 : 3);
            uPtr(__this->_swipe)->AllowedDirections(__this->_swipeAllow);
            ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(__this->Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), __this->_swipe);
        }
    }
    else
    {
        if (__this->_swipe != nullptr)
            ::g::Uno::Collections::ICollection::Remove_ex(uInterface(uPtr(__this->Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), __this->_swipe, &ret2);

        __this->_swipe = nullptr;
    }
}

// protected override sealed void UpdateProgress(Fuse.Elements.Element page, Fuse.Navigation.NavigationPageState state, Fuse.Controls.NavigationControl.ControlPageData pd)
void PageControl__UpdateProgress_fn(PageControl* __this, ::g::Fuse::Elements::Element* page, ::g::Fuse::Navigation::NavigationPageState* state, ::g::Fuse::Controls::NavigationControl__ControlPageData* pd)
{
    ::g::Fuse::Navigation::NavigationPageState state_ = *state;
    bool active = ::g::Uno::Math::Abs1(state_.Progress) < 1.0f;
    ::g::Fuse::Elements::Element* elm = uAs< ::g::Fuse::Elements::Element*>(page, ::TYPES[5/*Fuse.Elements.Element*/]);

    if ((elm != nullptr) && __this->CollapseInactive())
        uPtr(elm)->Visibility(!active ? 1 : 0);

    if (__this->DisableInactive())
        uPtr(page)->IsEnabled(active);
}

::g::Uno::UX::Selector PageControl::ActiveIndexName_;

// private bool get_CollapseInactive() [instance]
bool PageControl::CollapseInactive()
{
    return _inactive == 0;
}

// private bool get_DisableInactive() [instance]
bool PageControl::DisableInactive()
{
    return (_inactive == 0) || (_inactive == 1);
}

// private bool get_IsHorizontal() [instance]
bool PageControl::IsHorizontal()
{
    return _orient == 0;
}

// internal new Fuse.Navigation.DynamicLinearNavigation get_Navigation() [instance]
::g::Fuse::Navigation::DynamicLinearNavigation* PageControl::Navigation1()
{
    return uAs< ::g::Fuse::Navigation::DynamicLinearNavigation*>(this->Navigation(), ::TYPES[47/*Fuse.Navigation.DynamicLinearNavigation*/]);
}

// private static void gotoPage(Fuse.Controls.PageControl pc, object[] args) [static]
void PageControl::gotoPage(PageControl* pc, uArray* args)
{
    PageControl_typeof()->Init();
    ::g::Fuse::Visual* target = uAs< ::g::Fuse::Visual*>(uPtr(args)->Strong<uObject*>(0), ::TYPES[4/*Fuse.Visual*/]);

    if (target != nullptr)
        uPtr(pc)->Active(target);
    else
        ::g::Fuse::Diagnostics::UserError(::STRINGS[53/*"PageControl...*/], pc, ::STRINGS[54/*"/Users/mort...*/], 98, ::STRINGS[55/*"gotoPage"*/], nullptr);
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/.uno/ux15/Fuse.Controls.PageIndicatorDot.g.uno
// ---------------------------------------------------------------------------------------------------------------

// public partial sealed class PageIndicatorDot
// {
// static PageIndicatorDot()
static void PageIndicatorDot__cctor_4_fn(uType* __type)
{
    PageIndicatorDot::__selector0_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[56/*"Color"*/]);
    PageIndicatorDot::__selector1_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[57/*"TheCircle"*/]);
}

static void PageIndicatorDot_build(uType* type)
{
    ::STRINGS[56] = uString::Const("Color");
    ::STRINGS[57] = uString::Const("TheCircle");
    ::STRINGS[58] = uString::Const("PageIndicator.ux");
    ::TYPES[48] = ::g::Fuse::Animations::Change_typeof()->MakeType(::g::Uno::Float4_typeof(), nullptr);
    ::TYPES[24] = ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Animations::Animator_typeof(), nullptr);
    ::TYPES[6] = ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr);
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface10),
        ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/], offsetof(::g::Fuse::Controls::Panel_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface18));
    type->SetFields(115,
        ::g::Uno::UX::Property1_typeof()->MakeType(::g::Uno::Float4_typeof(), nullptr), offsetof(PageIndicatorDot, TheCircle_Color_inst), 0,
        ::g::Fuse::Controls::Circle_typeof(), offsetof(PageIndicatorDot, TheCircle), 0,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&PageIndicatorDot::__selector0_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&PageIndicatorDot::__selector1_, uFieldFlagsStatic);
}

::g::Fuse::Controls::Panel_type* PageIndicatorDot_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Panel_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::Panel_typeof();
    options.FieldCount = 119;
    options.InterfaceCount = 19;
    options.ObjectSize = sizeof(PageIndicatorDot);
    options.TypeSize = sizeof(::g::Fuse::Controls::Panel_type);
    type = (::g::Fuse::Controls::Panel_type*)uClassType::New("Fuse.Controls.PageIndicatorDot", options);
    type->fp_build_ = PageIndicatorDot_build;
    type->fp_ctor_ = (void*)PageIndicatorDot__New4_fn;
    type->fp_cctor_ = PageIndicatorDot__cctor_4_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public PageIndicatorDot()
void PageIndicatorDot__ctor_7_fn(PageIndicatorDot* __this)
{
    __this->ctor_7();
}

// private void InitializeUX()
void PageIndicatorDot__InitializeUX_fn(PageIndicatorDot* __this)
{
    __this->InitializeUX();
}

// public PageIndicatorDot New()
void PageIndicatorDot__New4_fn(PageIndicatorDot** __retval)
{
    *__retval = PageIndicatorDot::New4();
}

::g::Uno::UX::Selector PageIndicatorDot::__selector0_;
::g::Uno::UX::Selector PageIndicatorDot::__selector1_;

// public PageIndicatorDot() [instance]
void PageIndicatorDot::ctor_7()
{
    ctor_6();
    InitializeUX();
}

// private void InitializeUX() [instance]
void PageIndicatorDot::InitializeUX()
{
    TheCircle = ::g::Fuse::Controls::Circle::New3();
    TheCircle_Color_inst = ::g::FuseControlsNavigation_FuseControlsShape_Color_Property::New1(TheCircle, PageIndicatorDot::__selector0_);
    ::g::Fuse::Navigation::ActivatingAnimation* temp = ::g::Fuse::Navigation::ActivatingAnimation::New2();
    ::g::Fuse::Animations::Scale* temp1 = ::g::Fuse::Animations::Scale::New2();
    ::g::Fuse::Animations::Change* temp2 = (::g::Fuse::Animations::Change*)::g::Fuse::Animations::Change::New2(::TYPES[48/*Fuse.Animations.Change<float4>*/], TheCircle_Color_inst);
    Width(::g::Uno::UX::Size__New1(6.0f, 1));
    Height(::g::Uno::UX::Size__New1(6.0f, 1));
    Margin(::g::Uno::Float4__New2(5.0f, 5.0f, 5.0f, 5.0f));
    SourceLineNumber(2);
    SourceFileName(::STRINGS[58/*"PageIndicat...*/]);
    uPtr(TheCircle)->Color(::g::Uno::Float4__New2(0.0f, 0.0f, 0.0f, 0.3f));
    uPtr(TheCircle)->Name(PageIndicatorDot::__selector1_);
    uPtr(TheCircle)->SourceLineNumber(3);
    uPtr(TheCircle)->SourceFileName(::STRINGS[58/*"PageIndicat...*/]);
    temp->SourceLineNumber(4);
    temp->SourceFileName(::STRINGS[58/*"PageIndicat...*/]);
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(temp->Animators()), ::TYPES[24/*Uno.Collections.ICollection<Fuse.Animations.Animator>*/]), temp1);
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(temp->Animators()), ::TYPES[24/*Uno.Collections.ICollection<Fuse.Animations.Animator>*/]), temp2);
    temp1->Factor(1.2f);
    ::g::Fuse::Animations::Change__set_Value_fn(temp2, uCRef(::g::Uno::Float4__New2(0.0f, 0.0f, 0.0f, 1.0f)));
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), TheCircle);
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), temp);
}

// public PageIndicatorDot New() [static]
PageIndicatorDot* PageIndicatorDot::New4()
{
    PageIndicatorDot* obj1 = (PageIndicatorDot*)uNew(PageIndicatorDot_typeof());
    obj1->ctor_7();
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/PageIndicator.uno
// ----------------------------------------------------------------------------------

// internal sealed class PageIndicatorDotTemplate
// {
static void PageIndicatorDotTemplate_build(uType* type)
{
    type->SetFields(2);
}

::g::Uno::UX::Template_type* PageIndicatorDotTemplate_typeof()
{
    static uSStrong< ::g::Uno::UX::Template_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Uno::UX::Template_typeof();
    options.FieldCount = 2;
    options.ObjectSize = sizeof(PageIndicatorDotTemplate);
    options.TypeSize = sizeof(::g::Uno::UX::Template_type);
    type = (::g::Uno::UX::Template_type*)uClassType::New("Fuse.Controls.PageIndicatorDotTemplate", options);
    type->fp_build_ = PageIndicatorDotTemplate_build;
    type->fp_New1 = (void(*)(::g::Uno::UX::Template*, uObject**))PageIndicatorDotTemplate__New1_fn;
    return type;
}

// public override sealed object New()
void PageIndicatorDotTemplate__New1_fn(PageIndicatorDotTemplate* __this, uObject** __retval)
{
    return *__retval = ::g::Fuse::Controls::PageIndicatorDot::New4(), void();
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/CommonNavigationPages.uno
// ------------------------------------------------------------------------------------------

// private sealed class CommonNavigationPages.PagesMap
// {
static void CommonNavigationPages__PagesMap_build(uType* type)
{
    type->SetBase(::g::Fuse::Reactive::ObserverMap_typeof()->MakeType(::g::Fuse::Controls::CommonNavigationPages__AddedPage_typeof(), nullptr));
    type->SetInterfaces(
        ::g::Fuse::Reactive::IObserver_typeof(), offsetof(::g::Fuse::Reactive::ObserverMap_type, interface0));
    type->SetFields(6,
        ::g::Fuse::Controls::CommonNavigationPages_typeof(), offsetof(CommonNavigationPages__PagesMap, PageControl), 0);
}

::g::Fuse::Reactive::ObserverMap_type* CommonNavigationPages__PagesMap_typeof()
{
    static uSStrong< ::g::Fuse::Reactive::ObserverMap_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Reactive::ObserverMap_typeof();
    options.FieldCount = 7;
    options.InterfaceCount = 1;
    options.ObjectSize = sizeof(CommonNavigationPages__PagesMap);
    options.TypeSize = sizeof(::g::Fuse::Reactive::ObserverMap_type);
    type = (::g::Fuse::Reactive::ObserverMap_type*)uClassType::New("Fuse.Controls.CommonNavigationPages.PagesMap", options);
    type->fp_build_ = CommonNavigationPages__PagesMap_build;
    type->fp_Map = (void(*)(::g::Fuse::Reactive::ObserverMap*, uObject*, uObject**))CommonNavigationPages__PagesMap__Map_fn;
    type->fp_OnUpdated = (void(*)(::g::Fuse::Reactive::ObserverMap*))CommonNavigationPages__PagesMap__OnUpdated_fn;
    type->fp_Unmap = (void(*)(::g::Fuse::Reactive::ObserverMap*, uObject*, uObject**))CommonNavigationPages__PagesMap__Unmap_fn;
    type->interface0.fp_OnClear = (void(*)(uObject*))::g::Fuse::Reactive::ObserverMap__FuseReactiveIObserverOnClear_fn;
    type->interface0.fp_OnNewAll = (void(*)(uObject*, uObject*))::g::Fuse::Reactive::ObserverMap__FuseReactiveIObserverOnNewAll_fn;
    type->interface0.fp_OnNewAt = (void(*)(uObject*, int32_t*, uObject*))::g::Fuse::Reactive::ObserverMap__FuseReactiveIObserverOnNewAt_fn;
    type->interface0.fp_OnSet = (void(*)(uObject*, uObject*))::g::Fuse::Reactive::ObserverMap__FuseReactiveIObserverOnSet_fn;
    type->interface0.fp_OnAdd = (void(*)(uObject*, uObject*))::g::Fuse::Reactive::ObserverMap__FuseReactiveIObserverOnAdd_fn;
    type->interface0.fp_OnRemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Reactive::ObserverMap__FuseReactiveIObserverOnRemoveAt_fn;
    type->interface0.fp_OnInsertAt = (void(*)(uObject*, int32_t*, uObject*))::g::Fuse::Reactive::ObserverMap__FuseReactiveIObserverOnInsertAt_fn;
    type->interface0.fp_OnFailed = (void(*)(uObject*, uString*))::g::Fuse::Reactive::ObserverMap__FuseReactiveIObserverOnFailed_fn;
    return type;
}

// public void Attach(Fuse.Controls.CommonNavigationPages pageControl, Fuse.IArray obs)
void CommonNavigationPages__PagesMap__Attach1_fn(CommonNavigationPages__PagesMap* __this, ::g::Fuse::Controls::CommonNavigationPages* pageControl, uObject* obs)
{
    __this->Attach1(pageControl, obs);
}

// public new void Detach()
void CommonNavigationPages__PagesMap__Detach1_fn(CommonNavigationPages__PagesMap* __this)
{
    __this->Detach1();
}

// protected override sealed Fuse.Controls.CommonNavigationPages.AddedPage Map(object v)
void CommonNavigationPages__PagesMap__Map_fn(CommonNavigationPages__PagesMap* __this, uObject* v, ::g::Fuse::Controls::CommonNavigationPages__AddedPage** __retval)
{
    ::g::Fuse::Controls::CommonNavigationPages__AddedPage* collection1;
    collection1 = ::g::Fuse::Controls::CommonNavigationPages__AddedPage::New1();
    uPtr(collection1)->Data = v;
    return *__retval = collection1, void();
}

// protected override sealed void OnUpdated()
void CommonNavigationPages__PagesMap__OnUpdated_fn(CommonNavigationPages__PagesMap* __this)
{
    if (__this->PageControl != nullptr)
        uPtr(__this->PageControl)->UpdatePages();
}

// protected override sealed object Unmap(Fuse.Controls.CommonNavigationPages.AddedPage mv)
void CommonNavigationPages__PagesMap__Unmap_fn(CommonNavigationPages__PagesMap* __this, ::g::Fuse::Controls::CommonNavigationPages__AddedPage* mv, uObject** __retval)
{
    return *__retval = uPtr(mv)->Data, void();
}

// public void Attach(Fuse.Controls.CommonNavigationPages pageControl, Fuse.IArray obs) [instance]
void CommonNavigationPages__PagesMap::Attach1(::g::Fuse::Controls::CommonNavigationPages* pageControl, uObject* obs)
{
    PageControl = pageControl;
    Attach(obs, nullptr);
}

// public new void Detach() [instance]
void CommonNavigationPages__PagesMap::Detach1()
{
    PageControl = nullptr;
    Detach();
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/Panel.Freeze.uno
// -----------------------------------------------------------------------------

// public partial class Panel
// {
// static generated Panel()
static void Panel__cctor_3_fn(uType* __type)
{
    Panel::ColorPropertyName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[56/*"Color"*/]);
}

static void Panel_build(uType* type)
{
    ::STRINGS[56] = uString::Const("Color");
    ::STRINGS[5] = uString::Const("");
    ::STRINGS[59] = uString::Const("unable to freeze non-flat or infinite element");
    ::STRINGS[60] = uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/Panel.Freeze.uno");
    ::STRINGS[61] = uString::Const("OnPrepared");
    ::STRINGS[62] = uString::Const("unable to freeze element");
    ::STRINGS[63] = uString::Const("Panel.IsFrozen cannot be used when a Panel is in a Surface");
    ::STRINGS[64] = uString::Const("SetupListener");
    ::TYPES[49] = ::g::Uno::Action1_typeof()->MakeType(::g::Fuse::DrawContext_typeof(), nullptr);
    ::TYPES[16] = ::g::Uno::Action_typeof();
    type->SetDependencies(
        ::g::Fuse::Common::Blitter_typeof(),
        ::g::Fuse::Triggers::BusyTask_typeof(),
        ::g::Fuse::UpdateManager_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(Panel_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(Panel_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(Panel_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(Panel_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(Panel_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(Panel_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(Panel_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(Panel_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(Panel_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(Panel_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(Panel_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(Panel_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(Panel_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(Panel_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(Panel_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(Panel_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(Panel_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(Panel_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(Panel_type, interface18));
    type->SetFields(108,
        ::g::Uno::Bool_typeof(), offsetof(Panel, _freezeAwaitPrepared), 0,
        ::g::Uno::Graphics::Framebuffer_typeof(), offsetof(Panel, _frozenBuffer), 0,
        ::g::Uno::Bool_typeof(), offsetof(Panel, _isFrozen), 0,
        ::g::Fuse::Triggers::BusyTask_typeof(), offsetof(Panel, _freezeBusyTask), 0,
        ::g::Fuse::Triggers::BusyTaskActivity_typeof(), offsetof(Panel, _deferFreeze), 0,
        ::g::Uno::Float2_typeof(), offsetof(Panel, _frozenActualSize), 0,
        ::g::Fuse::VisualBounds_typeof(), offsetof(Panel, _frozenRenderBounds), 0,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&Panel::ColorPropertyName_, uFieldFlagsStatic);
}

Panel_type* Panel_typeof()
{
    static uSStrong<Panel_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::LayoutControl_typeof();
    options.FieldCount = 116;
    options.InterfaceCount = 19;
    options.DependencyCount = 3;
    options.ObjectSize = sizeof(Panel);
    options.TypeSize = sizeof(Panel_type);
    type = (Panel_type*)uClassType::New("Fuse.Controls.Panel", options);
    type->fp_build_ = Panel_build;
    type->fp_ctor_ = (void*)Panel__New3_fn;
    type->fp_cctor_ = Panel__cctor_3_fn;
    type->fp_ArrangePaddingBox = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::LayoutParams*))Panel__ArrangePaddingBox_fn;
    type->fp_Draw = (void(*)(::g::Fuse::Visual*, ::g::Fuse::DrawContext*))Panel__Draw_fn;
    type->fp_FastTrackDrawWithOpacity = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::DrawContext*, bool*))Panel__FastTrackDrawWithOpacity_fn;
    type->fp_GetContentSize = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::LayoutParams*, ::g::Uno::Float2*))Panel__GetContentSize_fn;
    type->fp_get_IsLayoutRoot = (void(*)(::g::Fuse::Visual*, bool*))Panel__get_IsLayoutRoot_fn;
    type->fp_get_LocalRenderBounds = (void(*)(::g::Fuse::Visual*, ::g::Fuse::VisualBounds**))Panel__get_LocalRenderBounds_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))Panel__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))Panel__OnUnrooted_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))Panel__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))Panel__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))Panel__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public generated Panel()
void Panel__ctor_6_fn(Panel* __this)
{
    __this->ctor_6();
}

// protected override sealed void ArrangePaddingBox(Fuse.LayoutParams lp)
void Panel__ArrangePaddingBox_fn(Panel* __this, ::g::Fuse::LayoutParams* lp)
{
    ::g::Fuse::LayoutParams lp_ = *lp;

    if (__this->HasFreezePrepared())
        return;

    ::g::Fuse::Controls::LayoutControl__ArrangePaddingBox_fn(__this, uCRef(lp_));
}

// private void CleanupBuffer()
void Panel__CleanupBuffer_fn(Panel* __this)
{
    __this->CleanupBuffer();
}

// private void CleanupListener([bool nextFrame])
void Panel__CleanupListener_fn(Panel* __this, bool* nextFrame)
{
    __this->CleanupListener(*nextFrame);
}

// public Fuse.Triggers.BusyTaskActivity get_DeferFreeze()
void Panel__get_DeferFreeze_fn(Panel* __this, int32_t* __retval)
{
    *__retval = __this->DeferFreeze();
}

// public void set_DeferFreeze(Fuse.Triggers.BusyTaskActivity value)
void Panel__set_DeferFreeze_fn(Panel* __this, int32_t* value)
{
    __this->DeferFreeze(*value);
}

// public override sealed void Draw(Fuse.DrawContext dc)
void Panel__Draw_fn(Panel* __this, ::g::Fuse::DrawContext* dc)
{
    if (!__this->IsFrozen() || !__this->HasFreezePrepared())
    {
        ::g::Fuse::Elements::Element__Draw_fn(__this, dc);
        return;
    }

    ::g::Uno::Rect rect = ::g::Uno::Rect__Scale1(uPtr(__this->_frozenRenderBounds)->FlatRect(), __this->Scale());
    uPtr(::g::Fuse::Common::Blitter::Singleton())->Blit1(uPtr(__this->_frozenBuffer)->ColorBuffer(), rect, uPtr(dc)->GetLocalToClipTransform(__this), __this->Opacity(), true, 0);
}

// private void EndBusy()
void Panel__EndBusy_fn(Panel* __this)
{
    __this->EndBusy();
}

// protected override sealed bool FastTrackDrawWithOpacity(Fuse.DrawContext dc)
void Panel__FastTrackDrawWithOpacity_fn(Panel* __this, ::g::Fuse::DrawContext* dc, bool* __retval)
{
    bool ret2;

    if (__this->IsFrozen() && __this->HasFreezePrepared())
    {
        ::g::Uno::Rect rect = ::g::Uno::Rect__Scale1(uPtr(__this->_frozenRenderBounds)->FlatRect(), __this->Scale());
        uPtr(::g::Fuse::Common::Blitter::Singleton())->Blit1(uPtr(__this->_frozenBuffer)->ColorBuffer(), rect, uPtr(dc)->GetLocalToClipTransform(__this), __this->Opacity(), true, 0);
        return *__retval = true, void();
    }

    return *__retval = (::g::Fuse::Controls::LayoutControl__FastTrackDrawWithOpacity_fn(__this, dc, &ret2), ret2), void();
}

// private void FreezeRooted()
void Panel__FreezeRooted_fn(Panel* __this)
{
    __this->FreezeRooted();
}

// private void FreezeUnrooted()
void Panel__FreezeUnrooted_fn(Panel* __this)
{
    __this->FreezeUnrooted();
}

// private void Fuse.Drawing.ISurfaceDrawable.Draw(Fuse.Drawing.Surface surface)
void Panel__FuseDrawingISurfaceDrawableDraw_fn(Panel* __this, ::g::Fuse::Drawing::Surface* surface)
{
    __this->ISurfaceDrawableDraw(surface);
}

// private float2 Fuse.Drawing.ISurfaceDrawable.get_ElementSize()
void Panel__FuseDrawingISurfaceDrawableget_ElementSize_fn(Panel* __this, ::g::Uno::Float2* __retval)
{
    return *__retval = __this->ActualSize(), void();
}

// private bool Fuse.Drawing.ISurfaceDrawable.get_IsPrimary()
void Panel__FuseDrawingISurfaceDrawableget_IsPrimary_fn(Panel* __this, bool* __retval)
{
    return *__retval = false, void();
}

// protected override sealed float2 GetContentSize(Fuse.LayoutParams lp)
void Panel__GetContentSize_fn(Panel* __this, ::g::Fuse::LayoutParams* lp, ::g::Uno::Float2* __retval)
{
    ::g::Uno::Float2 ret3;
    ::g::Fuse::LayoutParams lp_ = *lp;

    if (__this->HasFreezePrepared())
        return *__retval = __this->_frozenActualSize, void();

    return *__retval = (::g::Fuse::Controls::LayoutControl__GetContentSize_fn(__this, uCRef(lp_), &ret3), ret3), void();
}

// private bool get_HasFreezePrepared()
void Panel__get_HasFreezePrepared_fn(Panel* __this, bool* __retval)
{
    *__retval = __this->HasFreezePrepared();
}

// public bool get_IsFrozen()
void Panel__get_IsFrozen_fn(Panel* __this, bool* __retval)
{
    *__retval = __this->IsFrozen();
}

// public void set_IsFrozen(bool value)
void Panel__set_IsFrozen_fn(Panel* __this, bool* value)
{
    __this->IsFrozen(*value);
}

// internal override sealed bool get_IsLayoutRoot()
void Panel__get_IsLayoutRoot_fn(Panel* __this, bool* __retval)
{
    return *__retval = __this->HasFreezePrepared(), void();
}

// public override sealed Fuse.VisualBounds get_LocalRenderBounds()
void Panel__get_LocalRenderBounds_fn(Panel* __this, ::g::Fuse::VisualBounds** __retval)
{
    ::g::Fuse::VisualBounds* ret6;

    if (__this->HasFreezePrepared())
        return *__retval = uPtr(__this->_frozenRenderBounds)->Scale(::g::Uno::Float3__New4(__this->Scale(), 1.0f)), void();

    return *__retval = (::g::Fuse::Elements::Element__get_LocalRenderBounds_fn(__this, &ret6), ret6), void();
}

// public generated Panel New()
void Panel__New3_fn(Panel** __retval)
{
    *__retval = Panel::New3();
}

// private void OnPrepared(Fuse.DrawContext dc)
void Panel__OnPrepared_fn(Panel* __this, ::g::Fuse::DrawContext* dc)
{
    __this->OnPrepared(dc);
}

// protected override void OnRooted()
void Panel__OnRooted_fn(Panel* __this)
{
    ::g::Fuse::Controls::LayoutControl__OnRooted_fn(__this);
    __this->SurfaceRooted(false);
    __this->FreezeRooted();
}

// protected override void OnUnrooted()
void Panel__OnUnrooted_fn(Panel* __this)
{
    __this->FreezeUnrooted();
    __this->SurfaceUnrooted();
    ::g::Fuse::Controls::LayoutControl__OnUnrooted_fn(__this);
}

// private float2 get_Scale()
void Panel__get_Scale_fn(Panel* __this, ::g::Uno::Float2* __retval)
{
    *__retval = __this->Scale();
}

// private void SetupListener()
void Panel__SetupListener_fn(Panel* __this)
{
    __this->SetupListener();
}

::g::Uno::UX::Selector Panel::ColorPropertyName_;

// public generated Panel() [instance]
void Panel::ctor_6()
{
    ctor_5();
}

// private void CleanupBuffer() [instance]
void Panel::CleanupBuffer()
{
    if (_frozenBuffer != nullptr)
    {
        ::g::Fuse::FramebufferPool::Release(_frozenBuffer);
        _frozenBuffer = nullptr;
    }
}

// private void CleanupListener([bool nextFrame]) [instance]
void Panel::CleanupListener(bool nextFrame)
{
    if (_freezeAwaitPrepared)
    {
        ::g::Fuse::Internal::DrawManager::remove_Prepared(uDelegate::New(::TYPES[49/*Uno.Action<Fuse.DrawContext>*/], (void*)Panel__OnPrepared_fn, this));

        if (nextFrame)
            ::g::Fuse::UpdateManager::PerformNextFrame(uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)Panel__EndBusy_fn, this), 0, 1);
        else
            EndBusy();

        _freezeAwaitPrepared = false;
    }
}

// public Fuse.Triggers.BusyTaskActivity get_DeferFreeze() [instance]
int32_t Panel::DeferFreeze()
{
    return _deferFreeze;
}

// public void set_DeferFreeze(Fuse.Triggers.BusyTaskActivity value) [instance]
void Panel::DeferFreeze(int32_t value)
{
    _deferFreeze = value;
}

// private void EndBusy() [instance]
void Panel::EndBusy()
{
    ::g::Fuse::Triggers::BusyTask::SetBusy(this, &_freezeBusyTask, 0, ::STRINGS[5/*""*/]);
}

// private void FreezeRooted() [instance]
void Panel::FreezeRooted()
{
    if (IsFrozen())
        SetupListener();
}

// private void FreezeUnrooted() [instance]
void Panel::FreezeUnrooted()
{
    CleanupBuffer();
    CleanupListener(false);
}

// private bool get_HasFreezePrepared() [instance]
bool Panel::HasFreezePrepared()
{
    return _frozenBuffer != nullptr;
}

// public bool get_IsFrozen() [instance]
bool Panel::IsFrozen()
{
    return _isFrozen;
}

// public void set_IsFrozen(bool value) [instance]
void Panel::IsFrozen(bool value)
{
    if (_isFrozen == value)
        return;

    _isFrozen = value;

    if (!IsRootingCompleted())
        return;

    CleanupBuffer();

    if (_isFrozen && !HasFreezePrepared())
        SetupListener();
    else
        CleanupListener(false);

    if (!_isFrozen)
    {
        InvalidateLayout(2);
        InvalidateVisual();
    }
}

// private void OnPrepared(Fuse.DrawContext dc) [instance]
void Panel::OnPrepared(::g::Fuse::DrawContext* dc)
{
    ::g::Fuse::VisualBounds* ret4;

    if (DeferFreeze() != 0)
    {
        int32_t b = ::g::Fuse::Triggers::BusyTask::GetBusyActivity(this, 1);

        if ((b & DeferFreeze()) != 0)
            return;
    }

    CleanupListener(true);
    _frozenRenderBounds = (::g::Fuse::Elements::Element__get_LocalRenderBounds_fn(this, &ret4), ret4);

    if (!uPtr(_frozenRenderBounds)->IsFlat() || uPtr(_frozenRenderBounds)->IsInfinite())
    {
        ::g::Fuse::Diagnostics::InternalError(::STRINGS[59/*"unable to f...*/], this, ::STRINGS[60/*"/Users/mort...*/], 140, ::STRINGS[61/*"OnPrepared"*/]);
        return;
    }

    _frozenBuffer = CaptureRegion(dc, uPtr(_frozenRenderBounds)->FlatRect(), ::g::Uno::Float2__New1(0.0f));

    if (_frozenBuffer == nullptr)
    {
        ::g::Fuse::Diagnostics::InternalError(::STRINGS[62/*"unable to f...*/], this, ::STRINGS[60/*"/Users/mort...*/], 147, ::STRINGS[61/*"OnPrepared"*/]);
        return;
    }

    _frozenActualSize = ActualSize();
}

// private float2 get_Scale() [instance]
::g::Uno::Float2 Panel::Scale()
{
    return ::g::Uno::Float2__op_Division2(ActualSize(), _frozenActualSize);
}

// private void SetupListener() [instance]
void Panel::SetupListener()
{
    if (LayoutSurface() != nullptr)
    {
        ::g::Fuse::Diagnostics::UserError(::STRINGS[63/*"Panel.IsFro...*/], this, ::STRINGS[60/*"/Users/mort...*/], 88, ::STRINGS[64/*"SetupListener"*/], nullptr);
        return;
    }

    if (!_freezeAwaitPrepared)
    {
        ::g::Fuse::Internal::DrawManager::add_Prepared(uDelegate::New(::TYPES[49/*Uno.Action<Fuse.DrawContext>*/], (void*)Panel__OnPrepared_fn, this));
        ::g::Fuse::Triggers::BusyTask::SetBusy(this, &_freezeBusyTask, 8, ::STRINGS[5/*""*/]);
        _freezeAwaitPrepared = true;
    }
}

// public generated Panel New() [static]
Panel* Panel::New3()
{
    Panel* obj1 = (Panel*)uNew(Panel_typeof());
    obj1->ctor_6();
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Path.uno
// --------------------------------------------------------------------------------

// public partial sealed class Path
// {
static void Path_build(uType* type)
{
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface18),
        ::g::Fuse::Drawing::IDrawObjectWatcherFeedback_typeof(), offsetof(::g::Fuse::Controls::SegmentedShape_type, interface19));
    type->SetFields(124,
        ::g::Uno::Collections::List_typeof()->MakeType(::g::Fuse::Drawing::LineSegment_typeof(), nullptr), offsetof(Path, _segments1), 0,
        ::g::Fuse::Internal::SizingContainer_typeof(), offsetof(Path, sizing), 0,
        ::g::Fuse::Controls::FitMode_typeof(), offsetof(Path, _fitMode), 0,
        ::g::Uno::Float4_typeof(), offsetof(Path, _extents), 0);
}

::g::Fuse::Controls::SegmentedShape_type* Path_typeof()
{
    static uSStrong< ::g::Fuse::Controls::SegmentedShape_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::SegmentedShape_typeof();
    options.FieldCount = 128;
    options.InterfaceCount = 20;
    options.ObjectSize = sizeof(Path);
    options.TypeSize = sizeof(::g::Fuse::Controls::SegmentedShape_type);
    type = (::g::Fuse::Controls::SegmentedShape_type*)uClassType::New("Fuse.Controls.Path", options);
    type->fp_build_ = Path_build;
    type->fp_CalcShapeExtents = (void(*)(::g::Fuse::Controls::Shape*, ::g::Uno::Rect*))Path__CalcShapeExtents_fn;
    type->fp_GetContentSize = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::LayoutParams*, ::g::Uno::Float2*))Path__GetContentSize_fn;
    type->fp_GetSegments = (void(*)(::g::Fuse::Controls::SegmentedShape*, uObject**))Path__GetSegments_fn;
    type->fp_InvalidateSurfacePath = (void(*)(::g::Fuse::Controls::Shape*))Path__InvalidateSurfacePath_fn;
    type->interface19.fp_Changed = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackChanged_fn;
    type->interface19.fp_Prepare = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackPrepare_fn;
    type->interface19.fp_Unprepare = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackUnprepare_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Shape__OnPropertyChanged2_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// private Uno.Rect CalcNaturalExtents()
void Path__CalcNaturalExtents_fn(Path* __this, ::g::Uno::Rect* __retval)
{
    *__retval = __this->CalcNaturalExtents();
}

// private Fuse.Controls.Path.Positioning CalcPositioning()
void Path__CalcPositioning_fn(Path* __this, Path__Positioning* __retval)
{
    *__retval = __this->CalcPositioning();
}

// protected override sealed Uno.Rect CalcShapeExtents()
void Path__CalcShapeExtents_fn(Path* __this, ::g::Uno::Rect* __retval)
{
    Path__Positioning pos = __this->CalcPositioning();
    ::g::Uno::Float2 mn = ::g::Uno::Float2__op_Addition2(::g::Uno::Float2__op_Addition2(::g::Uno::Float2__op_Multiply2(::g::Uno::Float2__op_Subtraction2(pos.NaturalExtents.Minimum(), pos.Extents.Minimum()), pos.Scale), pos.Offset), pos.Extents.Minimum());
    ::g::Uno::Float2 mx = ::g::Uno::Float2__op_Addition2(::g::Uno::Float2__op_Addition2(::g::Uno::Float2__op_Multiply2(::g::Uno::Float2__op_Subtraction2(pos.NaturalExtents.Maximum(), pos.Extents.Minimum()), pos.Scale), pos.Offset), pos.Extents.Minimum());
    ::g::Uno::Rect r = ::g::Uno::Rect__New2(mn, ::g::Uno::Float2__op_Subtraction2(mx, mn));
    return *__retval = r, void();
}

// public float4 get_Extents()
void Path__get_Extents_fn(Path* __this, ::g::Uno::Float4* __retval)
{
    *__retval = __this->Extents();
}

// public void set_Extents(float4 value)
void Path__set_Extents_fn(Path* __this, ::g::Uno::Float4* value)
{
    __this->Extents(*value);
}

// public Fuse.Controls.FitMode get_FitMode()
void Path__get_FitMode_fn(Path* __this, int32_t* __retval)
{
    *__retval = __this->FitMode();
}

// public void set_FitMode(Fuse.Controls.FitMode value)
void Path__set_FitMode_fn(Path* __this, int32_t* value)
{
    __this->FitMode(*value);
}

// protected override sealed float2 GetContentSize(Fuse.LayoutParams lp)
void Path__GetContentSize_fn(Path* __this, ::g::Fuse::LayoutParams* lp, ::g::Uno::Float2* __retval)
{
    ::g::Fuse::LayoutParams lp_ = *lp;
    ::g::Uno::Float2 natural = __this->GetDesiredContentSize();
    ::g::Uno::Float2 r = uPtr(__this->Sizing())->ExpandFillSize(natural, lp_);
    return *__retval = r, void();
}

// private float2 GetDesiredContentSize()
void Path__GetDesiredContentSize_fn(Path* __this, ::g::Uno::Float2* __retval)
{
    *__retval = __this->GetDesiredContentSize();
}

// internal override sealed Uno.Collections.IList<Fuse.Drawing.LineSegment> GetSegments()
void Path__GetSegments_fn(Path* __this, uObject** __retval)
{
    ::g::Fuse::Drawing::LineSegment ret8;
    Path__Positioning pos = __this->CalcPositioning();
    ::g::Uno::Collections::List* list = (::g::Uno::Collections::List*)::g::Uno::Collections::List::New1(::TYPES[53/*Uno.Collections.List<Fuse.Drawing.LineSegment>*/]);

    for (int32_t i = 0; i < uPtr(__this->_segments1)->Count(); ++i)
    {
        ::g::Fuse::Drawing::LineSegment seg = (::g::Uno::Collections::List__get_Item_fn(uPtr(__this->_segments1), uCRef<int32_t>(i), &ret8), ret8);
        seg.Translate(::g::Uno::Float2__op_UnaryNegation(pos.Extents.Minimum()));
        seg.Scale(pos.Scale);
        seg.Translate(::g::Uno::Float2__op_Addition2(pos.Offset, pos.Extents.Minimum()));
        ::g::Uno::Collections::List__Add_fn(uPtr(list), uCRef(seg));
    }

    return *__retval = (uObject*)list, void();
}

// protected override sealed void InvalidateSurfacePath()
void Path__InvalidateSurfacePath_fn(Path* __this)
{
    ::g::Fuse::Controls::SegmentedShape__InvalidateSurfacePath_fn(__this);
    __this->InvalidateRenderBounds();
}

// private void OnShapeLayoutChanged()
void Path__OnShapeLayoutChanged_fn(Path* __this)
{
    __this->OnShapeLayoutChanged();
}

// internal Fuse.Internal.SizingContainer get_Sizing()
void Path__get_Sizing_fn(Path* __this, ::g::Fuse::Internal::SizingContainer** __retval)
{
    *__retval = __this->Sizing();
}

// private Uno.Rect CalcNaturalExtents() [instance]
::g::Uno::Rect Path::CalcNaturalExtents()
{
    return ::g::Fuse::Drawing::LineMetrics::GetBounds((uObject*)_segments1);
}

// private Fuse.Controls.Path.Positioning CalcPositioning() [instance]
Path__Positioning Path::CalcPositioning()
{
    ::g::Uno::Float4 ind4;
    ::g::Uno::Float4 ind5;
    ::g::Uno::Float4 ind6;
    Path__Positioning collection1;
    ::g::Uno::Rect naturalExtents = CalcNaturalExtents();
    ::g::Uno::Float2 desiredSize = GetDesiredContentSize();
    ::g::Uno::Float2 scale = uPtr(Sizing())->CalcScale(ActualSize(), desiredSize);
    ::g::Uno::Float2 offset = uPtr(Sizing())->CalcOrigin(ActualSize(), ::g::Uno::Float2__op_Multiply2(desiredSize, scale));
    ::g::Uno::Rect extents = naturalExtents;

    switch (FitMode())
    {
        case 0:
            break;
        case 1:
        {
            offset = ::g::Uno::Float2__op_Subtraction2(offset, extents.Minimum());
            break;
        }
        case 2:
        {
            offset = ::g::Uno::Float2__op_Subtraction2(offset, extents.Minimum());
            extents = ::g::Uno::Rect__New2((ind4 = Extents(), ::g::Uno::Float2__New2(ind4.X, ind4.Y)), ::g::Uno::Float2__op_Subtraction2((ind5 = Extents(), ::g::Uno::Float2__New2(ind5.Z, ind5.W)), (ind6 = Extents(), ::g::Uno::Float2__New2(ind6.X, ind6.Y))));
            break;
        }
    }

    collection1 = uDefault<Path__Positioning>();
    collection1.Scale = scale;
    collection1.Offset = offset;
    collection1.NaturalExtents = naturalExtents;
    collection1.Extents = extents;
    return collection1;
}

// public float4 get_Extents() [instance]
::g::Uno::Float4 Path::Extents()
{
    return _extents;
}

// public void set_Extents(float4 value) [instance]
void Path::Extents(::g::Uno::Float4 value)
{
    if (::g::Uno::Float4__op_Equality(_extents, value) && (_fitMode == 2))
        return;

    _extents = value;
    _fitMode = 2;
    OnShapeLayoutChanged();
}

// public Fuse.Controls.FitMode get_FitMode() [instance]
int32_t Path::FitMode()
{
    return _fitMode;
}

// public void set_FitMode(Fuse.Controls.FitMode value) [instance]
void Path::FitMode(int32_t value)
{
    if (value != _fitMode)
    {
        _fitMode = value;
        OnShapeLayoutChanged();
    }
}

// private float2 GetDesiredContentSize() [instance]
::g::Uno::Float2 Path::GetDesiredContentSize()
{
    ::g::Uno::Float4 ind2;
    ::g::Uno::Float4 ind3;
    ::g::Uno::Float2 hi = ::g::Uno::Float2__New1(0.0f);
    ::g::Uno::Float2 lo = ::g::Uno::Float2__New1(0.0f);
    ::g::Uno::Rect bounds = CalcNaturalExtents();

    switch (FitMode())
    {
        case 0:
        {
            lo = ::g::Uno::Float2__New1(0.0f);
            hi = bounds.Maximum();
            break;
        }
        case 1:
        {
            lo = bounds.Minimum();
            hi = bounds.Maximum();
            break;
        }
        case 2:
        {
            lo = (ind2 = Extents(), ::g::Uno::Float2__New2(ind2.X, ind2.Y));
            hi = (ind3 = Extents(), ::g::Uno::Float2__New2(ind3.Z, ind3.W));
            break;
        }
    }

    ::g::Uno::Float2 natural = ::g::Uno::Float2__op_Subtraction2(hi, lo);
    return natural;
}

// private void OnShapeLayoutChanged() [instance]
void Path::OnShapeLayoutChanged()
{
    InvalidateSurfacePath();
    InvalidateLayout(2);
}

// internal Fuse.Internal.SizingContainer get_Sizing() [instance]
::g::Fuse::Internal::SizingContainer* Path::Sizing()
{
    return sizing;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/PathExpression.uno
// ------------------------------------------------------------------------------------------

// public abstract class PathExpression
// {
static void PathExpression_build(uType* type)
{
    type->SetInterfaces(
        ::g::Fuse::Reactive::IExpression_typeof(), offsetof(PathExpression_type, interface0),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(PathExpression_type, interface1));
    type->SetFields(2,
        ::g::Fuse::Reactive::Expression_typeof(), offsetof(PathExpression, _path), 0,
        ::g::Fuse::Reactive::Expression_typeof(), offsetof(PathExpression, _arg), 0,
        ::g::Uno::String_typeof(), offsetof(PathExpression, _name), 0);
}

PathExpression_type* PathExpression_typeof()
{
    static uSStrong<PathExpression_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Reactive::Expression_typeof();
    options.FieldCount = 5;
    options.InterfaceCount = 2;
    options.ObjectSize = sizeof(PathExpression);
    options.TypeSize = sizeof(PathExpression_type);
    type = (PathExpression_type*)uClassType::New("Fuse.Controls.PathExpression", options);
    type->fp_build_ = PathExpression_build;
    type->fp_Subscribe = (void(*)(::g::Fuse::Reactive::Expression*, uObject*, uObject*, uObject**))PathExpression__Subscribe_fn;
    type->fp_ToString = (void(*)(uObject*, uString**))PathExpression__ToString_fn;
    type->interface1.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Reactive::Expression__FuseISourceLocationget_SourceNearest_fn;
    type->interface0.fp_Subscribe = (void(*)(uObject*, uObject*, uObject*, uObject**))PathExpression__Subscribe_fn;
    type->interface1.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Reactive::Expression__get_SourceLineNumber_fn;
    type->interface1.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Reactive::Expression__get_SourceFileName_fn;
    return type;
}

// public override sealed Uno.IDisposable Subscribe(Fuse.Reactive.IContext context, Fuse.Reactive.IListener listener)
void PathExpression__Subscribe_fn(PathExpression* __this, uObject* context, uObject* listener, uObject** __retval)
{
    PathExpression__PathSubscription* sub = PathExpression__PathSubscription::New1(__this, context, listener);
    sub->Init(context);
    return *__retval = (uObject*)sub, void();
}

// public override sealed string ToString()
void PathExpression__ToString_fn(PathExpression* __this, uString** __retval)
{
    return *__retval = ::g::Uno::String::op_Addition2(::g::Uno::String::op_Addition1(::g::Uno::String::op_Addition2(::g::Uno::String::op_Addition1(::g::Uno::String::op_Addition2(__this->_name, uString::Const("(")), __this->_path), uString::Const(", ")), __this->_arg), uString::Const(")")), void();
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/SegmentedShape.uno
// ------------------------------------------------------------------------------------------

// public enum PathMeasureMode
uEnumType* PathMeasureMode_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.PathMeasureMode", ::g::Uno::Int_typeof(), 2);
    type->SetLiterals(
        "Time", 0LL,
        "Distance", 1LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/PathExpression.uno
// ------------------------------------------------------------------------------------------

// public sealed class PathPointAtDistance
// {
static void PathPointAtDistance_build(uType* type)
{
    ::TYPES[50] = ::g::Fuse::Marshal_typeof()->MakeMethod(0/*ToType<float>*/, ::g::Uno::Float_typeof(), nullptr);
    type->SetInterfaces(
        ::g::Fuse::Reactive::IExpression_typeof(), offsetof(::g::Fuse::Controls::PathExpression_type, interface0),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::PathExpression_type, interface1));
    type->SetFields(5);
}

::g::Fuse::Controls::PathExpression_type* PathPointAtDistance_typeof()
{
    static uSStrong< ::g::Fuse::Controls::PathExpression_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::PathExpression_typeof();
    options.FieldCount = 5;
    options.InterfaceCount = 2;
    options.ObjectSize = sizeof(PathPointAtDistance);
    options.TypeSize = sizeof(::g::Fuse::Controls::PathExpression_type);
    type = (::g::Fuse::Controls::PathExpression_type*)uClassType::New("Fuse.Controls.PathPointAtDistance", options);
    type->fp_build_ = PathPointAtDistance_build;
    type->fp_Calculate = (void(*)(::g::Fuse::Controls::PathExpression*, ::g::Fuse::Controls::SegmentedShape*, uObject*, uObject**))PathPointAtDistance__Calculate_fn;
    type->interface1.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Reactive::Expression__FuseISourceLocationget_SourceNearest_fn;
    type->interface0.fp_Subscribe = (void(*)(uObject*, uObject*, uObject*, uObject**))::g::Fuse::Controls::PathExpression__Subscribe_fn;
    type->interface1.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Reactive::Expression__get_SourceLineNumber_fn;
    type->interface1.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Reactive::Expression__get_SourceFileName_fn;
    return type;
}

// protected override sealed object Calculate(Fuse.Controls.SegmentedShape path, object param)
void PathPointAtDistance__Calculate_fn(PathPointAtDistance* __this, ::g::Fuse::Controls::SegmentedShape* path, uObject* param, uObject** __retval)
{
    float ret2;
    return *__retval = uBox(::g::Uno::Float2_typeof(), uPtr(path)->PointAtDistance((::g::Fuse::Marshal__ToType_fn(::TYPES[50/*Fuse.Marshal.ToType<float>*/], param, &ret2), ret2))), void();
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/PathExpression.uno
// ------------------------------------------------------------------------------------------

// public sealed class PathPointAtTime
// {
static void PathPointAtTime_build(uType* type)
{
    ::TYPES[50] = ::g::Fuse::Marshal_typeof()->MakeMethod(0/*ToType<float>*/, ::g::Uno::Float_typeof(), nullptr);
    type->SetInterfaces(
        ::g::Fuse::Reactive::IExpression_typeof(), offsetof(::g::Fuse::Controls::PathExpression_type, interface0),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::PathExpression_type, interface1));
    type->SetFields(5);
}

::g::Fuse::Controls::PathExpression_type* PathPointAtTime_typeof()
{
    static uSStrong< ::g::Fuse::Controls::PathExpression_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::PathExpression_typeof();
    options.FieldCount = 5;
    options.InterfaceCount = 2;
    options.ObjectSize = sizeof(PathPointAtTime);
    options.TypeSize = sizeof(::g::Fuse::Controls::PathExpression_type);
    type = (::g::Fuse::Controls::PathExpression_type*)uClassType::New("Fuse.Controls.PathPointAtTime", options);
    type->fp_build_ = PathPointAtTime_build;
    type->fp_Calculate = (void(*)(::g::Fuse::Controls::PathExpression*, ::g::Fuse::Controls::SegmentedShape*, uObject*, uObject**))PathPointAtTime__Calculate_fn;
    type->interface1.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Reactive::Expression__FuseISourceLocationget_SourceNearest_fn;
    type->interface0.fp_Subscribe = (void(*)(uObject*, uObject*, uObject*, uObject**))::g::Fuse::Controls::PathExpression__Subscribe_fn;
    type->interface1.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Reactive::Expression__get_SourceLineNumber_fn;
    type->interface1.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Reactive::Expression__get_SourceFileName_fn;
    return type;
}

// protected override sealed object Calculate(Fuse.Controls.SegmentedShape path, object param)
void PathPointAtTime__Calculate_fn(PathPointAtTime* __this, ::g::Fuse::Controls::SegmentedShape* path, uObject* param, uObject** __retval)
{
    float ret2;
    return *__retval = uBox(::g::Uno::Float2_typeof(), uPtr(path)->PointAtTime((::g::Fuse::Marshal__ToType_fn(::TYPES[50/*Fuse.Marshal.ToType<float>*/], param, &ret2), ret2))), void();
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/PathExpression.uno
// ------------------------------------------------------------------------------------------

// private sealed class PathExpression.PathSubscription
// {
static void PathExpression__PathSubscription_build(uType* type)
{
    ::STRINGS[65] = uString::Const(" requires a SegmentedShape as first argument");
    ::STRINGS[66] = uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/PathExpression.uno");
    ::STRINGS[67] = uString::Const("OnArguments");
    ::TYPES[51] = ::g::Fuse::Reactive::Expression_typeof()->Array();
    ::TYPES[16] = ::g::Uno::Action_typeof();
    ::TYPES[52] = ::g::Fuse::Controls::SegmentedShape_typeof();
    type->SetDependencies(
        ::g::Fuse::UpdateManager_typeof());
    type->SetInterfaces(
        ::g::Uno::IDisposable_typeof(), offsetof(::g::Fuse::Reactive::ExpressionListener_type, interface0),
        ::g::Fuse::Reactive::IListener_typeof(), offsetof(::g::Fuse::Reactive::ExpressionListener_type, interface1));
    type->SetFields(9,
        ::g::Fuse::Reactive::IListener_typeof(), offsetof(PathExpression__PathSubscription, _listener1), 0,
        ::g::Fuse::Controls::PathExpression_typeof(), offsetof(PathExpression__PathSubscription, _expr), 0,
        ::TYPES[52/*Fuse.Controls.SegmentedShape*/], offsetof(PathExpression__PathSubscription, _path), 0,
        uObject_typeof(), offsetof(PathExpression__PathSubscription, _param), 0);
}

::g::Fuse::Reactive::ExpressionListener_type* PathExpression__PathSubscription_typeof()
{
    static uSStrong< ::g::Fuse::Reactive::ExpressionListener_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Reactive::ExpressionListener_typeof();
    options.FieldCount = 13;
    options.InterfaceCount = 2;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(PathExpression__PathSubscription);
    options.TypeSize = sizeof(::g::Fuse::Reactive::ExpressionListener_type);
    type = (::g::Fuse::Reactive::ExpressionListener_type*)uClassType::New("Fuse.Controls.PathExpression.PathSubscription", options);
    type->fp_build_ = PathExpression__PathSubscription_build;
    type->fp_Dispose = (void(*)(::g::Fuse::Reactive::InnerListener*))PathExpression__PathSubscription__Dispose_fn;
    type->fp_OnArguments = (void(*)(::g::Fuse::Reactive::ExpressionSubscriber*, uArray*))PathExpression__PathSubscription__OnArguments_fn;
    type->fp_OnDataCleared = (void(*)(::g::Fuse::Reactive::ExpressionListener*))PathExpression__PathSubscription__OnDataCleared_fn;
    type->interface1.fp_OnNewData = (void(*)(uObject*, uObject*, uObject*))::g::Fuse::Reactive::InnerListener__FuseReactiveIListenerOnNewData_fn;
    type->interface1.fp_OnLostData = (void(*)(uObject*, uObject*))::g::Fuse::Reactive::InnerListener__FuseReactiveIListenerOnLostData_fn;
    type->interface0.fp_Dispose = (void(*)(uObject*))PathExpression__PathSubscription__Dispose_fn;
    return type;
}

// public PathSubscription(Fuse.Controls.PathExpression expr, Fuse.Reactive.IContext context, Fuse.Reactive.IListener listener)
void PathExpression__PathSubscription__ctor_3_fn(PathExpression__PathSubscription* __this, ::g::Fuse::Controls::PathExpression* expr, uObject* context, uObject* listener)
{
    __this->ctor_3(expr, context, listener);
}

// public override sealed void Dispose()
void PathExpression__PathSubscription__Dispose_fn(PathExpression__PathSubscription* __this)
{
    __this->_listener1 = nullptr;

    if (__this->_path != nullptr)
    {
        uPtr(__this->_path)->remove_SegmentsChanged(uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)PathExpression__PathSubscription__SegmentsChanged_fn, __this));
        __this->_path = nullptr;
    }

    ::g::Fuse::Reactive::ExpressionListener__Dispose_fn(__this);
}

// public PathSubscription New(Fuse.Controls.PathExpression expr, Fuse.Reactive.IContext context, Fuse.Reactive.IListener listener)
void PathExpression__PathSubscription__New1_fn(::g::Fuse::Controls::PathExpression* expr, uObject* context, uObject* listener, PathExpression__PathSubscription** __retval)
{
    *__retval = PathExpression__PathSubscription::New1(expr, context, listener);
}

// protected override sealed void OnArguments(Fuse.Reactive.Expression.Argument[] args)
void PathExpression__PathSubscription__OnArguments_fn(PathExpression__PathSubscription* __this, uArray* args)
{
    if (uPtr(args)->Length() < 2)
        return;

    ::g::Fuse::Controls::SegmentedShape* ss = uAs< ::g::Fuse::Controls::SegmentedShape*>(uPtr(uPtr(args)->Strong< ::g::Fuse::Reactive::Expression__Argument*>(0))->Value(), ::TYPES[52/*Fuse.Controls.SegmentedShape*/]);

    if (ss == nullptr)
    {
        ::g::Fuse::Diagnostics::UserError(::g::Uno::String::op_Addition2(uPtr(__this->_expr)->_name, ::STRINGS[65/*" requires a...*/]), __this, ::STRINGS[66/*"/Users/mort...*/], 56, ::STRINGS[67/*"OnArguments"*/], nullptr);
        __this->ClearData();
        return;
    }

    __this->SwitchPath(ss);
    __this->_param = uPtr(args->Strong< ::g::Fuse::Reactive::Expression__Argument*>(1))->Value();
    __this->UpdateValue();
}

// protected override sealed void OnDataCleared()
void PathExpression__PathSubscription__OnDataCleared_fn(PathExpression__PathSubscription* __this)
{
    ::g::Fuse::Reactive::ExpressionListener__OnDataCleared_fn(__this);
    __this->SwitchPath(nullptr);
}

// private void SegmentsChanged()
void PathExpression__PathSubscription__SegmentsChanged_fn(PathExpression__PathSubscription* __this)
{
    __this->SegmentsChanged();
}

// private void SwitchPath(Fuse.Controls.SegmentedShape path)
void PathExpression__PathSubscription__SwitchPath_fn(PathExpression__PathSubscription* __this, ::g::Fuse::Controls::SegmentedShape* path)
{
    __this->SwitchPath(path);
}

// private void UpdateValue()
void PathExpression__PathSubscription__UpdateValue_fn(PathExpression__PathSubscription* __this)
{
    __this->UpdateValue();
}

// public PathSubscription(Fuse.Controls.PathExpression expr, Fuse.Reactive.IContext context, Fuse.Reactive.IListener listener) [instance]
void PathExpression__PathSubscription::ctor_3(::g::Fuse::Controls::PathExpression* expr, uObject* context, uObject* listener)
{
    ctor_2(expr, listener, uArray::Init< ::g::Fuse::Reactive::Expression*>(::TYPES[51/*Fuse.Reactive.Expression[]*/], 2, (::g::Fuse::Reactive::Expression*)uPtr(expr)->_path, (::g::Fuse::Reactive::Expression*)uPtr(expr)->_arg), 0);
    _expr = expr;
}

// private void SegmentsChanged() [instance]
void PathExpression__PathSubscription::SegmentsChanged()
{
    if (_path != nullptr)
        ::g::Fuse::UpdateManager::AddDeferredAction2(uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)PathExpression__PathSubscription__UpdateValue_fn, this), -1, 2);
}

// private void SwitchPath(Fuse.Controls.SegmentedShape path) [instance]
void PathExpression__PathSubscription::SwitchPath(::g::Fuse::Controls::SegmentedShape* path)
{
    if (_path == path)
        return;

    if (_path != nullptr)
        uPtr(_path)->remove_SegmentsChanged(uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)PathExpression__PathSubscription__SegmentsChanged_fn, this));

    _path = path;

    if (_path != nullptr)
        uPtr(_path)->add_SegmentsChanged(uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)PathExpression__PathSubscription__SegmentsChanged_fn, this));
}

// private void UpdateValue() [instance]
void PathExpression__PathSubscription::UpdateValue()
{
    if (_path != nullptr)
    {
        uObject* result = uPtr(_expr)->Calculate(_path, _param);
        SetData(result);
    }
}

// public PathSubscription New(Fuse.Controls.PathExpression expr, Fuse.Reactive.IContext context, Fuse.Reactive.IListener listener) [static]
PathExpression__PathSubscription* PathExpression__PathSubscription::New1(::g::Fuse::Controls::PathExpression* expr, uObject* context, uObject* listener)
{
    PathExpression__PathSubscription* obj1 = (PathExpression__PathSubscription*)uNew(PathExpression__PathSubscription_typeof());
    obj1->ctor_3(expr, context, listener);
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/PathExpression.uno
// ------------------------------------------------------------------------------------------

// public sealed class PathTangentAngleAtDistance
// {
static void PathTangentAngleAtDistance_build(uType* type)
{
    ::TYPES[50] = ::g::Fuse::Marshal_typeof()->MakeMethod(0/*ToType<float>*/, ::g::Uno::Float_typeof(), nullptr);
    type->SetDependencies(
        ::g::Uno::Math_typeof());
    type->SetInterfaces(
        ::g::Fuse::Reactive::IExpression_typeof(), offsetof(::g::Fuse::Controls::PathExpression_type, interface0),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::PathExpression_type, interface1));
    type->SetFields(5);
}

::g::Fuse::Controls::PathExpression_type* PathTangentAngleAtDistance_typeof()
{
    static uSStrong< ::g::Fuse::Controls::PathExpression_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::PathExpression_typeof();
    options.FieldCount = 5;
    options.InterfaceCount = 2;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(PathTangentAngleAtDistance);
    options.TypeSize = sizeof(::g::Fuse::Controls::PathExpression_type);
    type = (::g::Fuse::Controls::PathExpression_type*)uClassType::New("Fuse.Controls.PathTangentAngleAtDistance", options);
    type->fp_build_ = PathTangentAngleAtDistance_build;
    type->fp_Calculate = (void(*)(::g::Fuse::Controls::PathExpression*, ::g::Fuse::Controls::SegmentedShape*, uObject*, uObject**))PathTangentAngleAtDistance__Calculate_fn;
    type->interface1.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Reactive::Expression__FuseISourceLocationget_SourceNearest_fn;
    type->interface0.fp_Subscribe = (void(*)(uObject*, uObject*, uObject*, uObject**))::g::Fuse::Controls::PathExpression__Subscribe_fn;
    type->interface1.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Reactive::Expression__get_SourceLineNumber_fn;
    type->interface1.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Reactive::Expression__get_SourceFileName_fn;
    return type;
}

// protected override sealed object Calculate(Fuse.Controls.SegmentedShape path, object param)
void PathTangentAngleAtDistance__Calculate_fn(PathTangentAngleAtDistance* __this, ::g::Fuse::Controls::SegmentedShape* path, uObject* param, uObject** __retval)
{
    float ret2;
    ::g::Uno::Float2 tangent = uPtr(path)->TangentAtDistance((::g::Fuse::Marshal__ToType_fn(::TYPES[50/*Fuse.Marshal.ToType<float>*/], param, &ret2), ret2));
    return *__retval = uBox(::g::Uno::Float_typeof(), ::g::Uno::Math::Atan22(tangent.Y, tangent.X)), void();
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/PathExpression.uno
// ------------------------------------------------------------------------------------------

// public sealed class PathTangentAngleAtTime
// {
static void PathTangentAngleAtTime_build(uType* type)
{
    ::TYPES[50] = ::g::Fuse::Marshal_typeof()->MakeMethod(0/*ToType<float>*/, ::g::Uno::Float_typeof(), nullptr);
    type->SetDependencies(
        ::g::Uno::Math_typeof());
    type->SetInterfaces(
        ::g::Fuse::Reactive::IExpression_typeof(), offsetof(::g::Fuse::Controls::PathExpression_type, interface0),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::PathExpression_type, interface1));
    type->SetFields(5);
}

::g::Fuse::Controls::PathExpression_type* PathTangentAngleAtTime_typeof()
{
    static uSStrong< ::g::Fuse::Controls::PathExpression_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::PathExpression_typeof();
    options.FieldCount = 5;
    options.InterfaceCount = 2;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(PathTangentAngleAtTime);
    options.TypeSize = sizeof(::g::Fuse::Controls::PathExpression_type);
    type = (::g::Fuse::Controls::PathExpression_type*)uClassType::New("Fuse.Controls.PathTangentAngleAtTime", options);
    type->fp_build_ = PathTangentAngleAtTime_build;
    type->fp_Calculate = (void(*)(::g::Fuse::Controls::PathExpression*, ::g::Fuse::Controls::SegmentedShape*, uObject*, uObject**))PathTangentAngleAtTime__Calculate_fn;
    type->interface1.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Reactive::Expression__FuseISourceLocationget_SourceNearest_fn;
    type->interface0.fp_Subscribe = (void(*)(uObject*, uObject*, uObject*, uObject**))::g::Fuse::Controls::PathExpression__Subscribe_fn;
    type->interface1.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Reactive::Expression__get_SourceLineNumber_fn;
    type->interface1.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Reactive::Expression__get_SourceFileName_fn;
    return type;
}

// protected override sealed object Calculate(Fuse.Controls.SegmentedShape path, object param)
void PathTangentAngleAtTime__Calculate_fn(PathTangentAngleAtTime* __this, ::g::Fuse::Controls::SegmentedShape* path, uObject* param, uObject** __retval)
{
    float ret2;
    ::g::Uno::Float2 tangent = uPtr(path)->TangentAtTime((::g::Fuse::Marshal__ToType_fn(::TYPES[50/*Fuse.Marshal.ToType<float>*/], param, &ret2), ret2));
    return *__retval = uBox(::g::Uno::Float_typeof(), ::g::Uno::Math::Atan22(tangent.Y, tangent.X)), void();
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Path.uno
// --------------------------------------------------------------------------------

// private struct Path.Positioning
// {
static void Path__Positioning_build(uType* type)
{
    type->SetFields(0,
        ::g::Uno::Float2_typeof(), offsetof(Path__Positioning, Scale), 0,
        ::g::Uno::Float2_typeof(), offsetof(Path__Positioning, Offset), 0,
        ::g::Uno::Rect_typeof(), offsetof(Path__Positioning, NaturalExtents), 0,
        ::g::Uno::Rect_typeof(), offsetof(Path__Positioning, Extents), 0);
}

uStructType* Path__Positioning_typeof()
{
    static uSStrong<uStructType*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Uno::ValueType_typeof();
    options.FieldCount = 4;
    options.Alignment = alignof(Path__Positioning);
    options.ValueSize = sizeof(Path__Positioning);
    options.TypeSize = sizeof(uStructType);
    type = uStructType::New("Fuse.Controls.Path.Positioning", options);
    type->fp_build_ = Path__Positioning_build;
    return type;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/Navigator.uno
// ------------------------------------------------------------------------------

// private struct Navigator.PrepareResult
// {
static void Navigator__PrepareResult_build(uType* type)
{
    type->SetFields(0,
        ::g::Fuse::Navigation::RoutingResult_typeof(), offsetof(Navigator__PrepareResult, Routing), 0,
        ::g::Uno::Bool_typeof(), offsetof(Navigator__PrepareResult, UsedPrepared), 0,
        ::g::Fuse::Controls::Navigator__NavPage_typeof(), offsetof(Navigator__PrepareResult, Page), 0);
}

uStructType* Navigator__PrepareResult_typeof()
{
    static uSStrong<uStructType*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Uno::ValueType_typeof();
    options.FieldCount = 3;
    options.Alignment = alignof(Navigator__PrepareResult);
    options.ValueSize = sizeof(Navigator__PrepareResult);
    options.TypeSize = sizeof(uStructType);
    type = uStructType::New("Fuse.Controls.Navigator.PrepareResult", options);
    type->fp_build_ = Navigator__PrepareResult_build;
    return type;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Rectangle.Surface.uno
// ---------------------------------------------------------------------------------------------

// public partial sealed class Rectangle
// {
// static generated Rectangle()
static void Rectangle__cctor_4_fn(uType* __type)
{
    Rectangle::CornerRadiusPropertyName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[68/*"CornerRadius"*/]);
}

static void Rectangle_build(uType* type)
{
    ::STRINGS[68] = uString::Const("CornerRadius");
    ::TYPES[53] = ::g::Uno::Collections::List_typeof()->MakeType(::g::Fuse::Drawing::LineSegment_typeof(), nullptr);
    type->SetDependencies(
        ::g::Uno::Math_typeof(),
        ::g::Fuse::Drawing::Primitives::Rectangle_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface18),
        ::g::Fuse::Drawing::IDrawObjectWatcherFeedback_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface19));
    type->SetFields(116,
        ::g::Uno::Float4_typeof(), offsetof(Rectangle, _cornerRadius), 0,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&Rectangle::CornerRadiusPropertyName_, uFieldFlagsStatic);
}

::g::Fuse::Controls::Shape_type* Rectangle_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Shape_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::Shape_typeof();
    options.FieldCount = 118;
    options.InterfaceCount = 20;
    options.DependencyCount = 2;
    options.ObjectSize = sizeof(Rectangle);
    options.TypeSize = sizeof(::g::Fuse::Controls::Shape_type);
    type = (::g::Fuse::Controls::Shape_type*)uClassType::New("Fuse.Controls.Rectangle", options);
    type->fp_build_ = Rectangle_build;
    type->fp_ctor_ = (void*)Rectangle__New3_fn;
    type->fp_cctor_ = Rectangle__cctor_4_fn;
    type->fp_CreateSurfacePath = (void(*)(::g::Fuse::Controls::Shape*, ::g::Fuse::Drawing::Surface*, ::g::Fuse::Drawing::SurfacePath**))Rectangle__CreateSurfacePath_fn;
    type->fp_DrawFill = (void(*)(::g::Fuse::Controls::Shape*, ::g::Fuse::DrawContext*, ::g::Fuse::Drawing::Brush*))Rectangle__DrawFill_fn;
    type->fp_DrawStroke = (void(*)(::g::Fuse::Controls::Shape*, ::g::Fuse::DrawContext*, ::g::Fuse::Drawing::Stroke*))Rectangle__DrawStroke_fn;
    type->fp_get_NeedSurface = (void(*)(::g::Fuse::Controls::Shape*, bool*))Rectangle__get_NeedSurface_fn;
    type->fp_OnHitTestLocalVisual = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::HitTestContext*))Rectangle__OnHitTestLocalVisual_fn;
    type->interface19.fp_Changed = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackChanged_fn;
    type->interface19.fp_Prepare = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackPrepare_fn;
    type->interface19.fp_Unprepare = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackUnprepare_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Shape__OnPropertyChanged2_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public generated Rectangle()
void Rectangle__ctor_7_fn(Rectangle* __this)
{
    __this->ctor_7();
}

// private float4 get_ConstrainedCornerRadius()
void Rectangle__get_ConstrainedCornerRadius_fn(Rectangle* __this, ::g::Uno::Float4* __retval)
{
    *__retval = __this->ConstrainedCornerRadius();
}

// public float4 get_CornerRadius()
void Rectangle__get_CornerRadius_fn(Rectangle* __this, ::g::Uno::Float4* __retval)
{
    *__retval = __this->CornerRadius();
}

// public void set_CornerRadius(float4 value)
void Rectangle__set_CornerRadius_fn(Rectangle* __this, ::g::Uno::Float4* value)
{
    __this->CornerRadius(*value);
}

// protected override sealed Fuse.Drawing.SurfacePath CreateSurfacePath(Fuse.Drawing.Surface surface)
void Rectangle__CreateSurfacePath_fn(Rectangle* __this, ::g::Fuse::Drawing::Surface* surface, ::g::Fuse::Drawing::SurfacePath** __retval)
{
    ::g::Uno::Collections::List* collection1;
    ::g::Fuse::Drawing::LineSegment collection2;
    ::g::Fuse::Drawing::LineSegment collection3;
    ::g::Fuse::Drawing::LineSegment collection4;
    ::g::Fuse::Drawing::LineSegment collection5;
    ::g::Fuse::Drawing::LineSegment collection6;
    ::g::Fuse::Drawing::LineSegment collection7;
    ::g::Fuse::Drawing::LineSegment collection8;
    ::g::Fuse::Drawing::LineSegment collection9;
    ::g::Fuse::Drawing::LineSegment collection10;
    ::g::Fuse::Drawing::LineSegment collection11;
    ::g::Uno::Float2 rs = __this->ActualSize();
    ::g::Uno::Float4 useCornerRadius = __this->ConstrainedCornerRadius();
    collection1 = (::g::Uno::Collections::List*)::g::Uno::Collections::List::New1(::TYPES[53/*Uno.Collections.List<Fuse.Drawing.LineSegment>*/]);
    ::g::Uno::Collections::List__Add_fn(uPtr(collection1), uCRef((collection2 = uDefault< ::g::Fuse::Drawing::LineSegment>(), collection2.Type = 0, collection2.To = ::g::Uno::Float2__New2(useCornerRadius.Item(0), 0.0f), collection2)));
    ::g::Uno::Collections::List__Add_fn(uPtr(collection1), uCRef((collection3 = uDefault< ::g::Fuse::Drawing::LineSegment>(), collection3.Type = 1, collection3.To = ::g::Uno::Float2__New2(rs.X - useCornerRadius.Item(1), 0.0f), collection3)));
    ::g::Uno::Collections::List__Add_fn(uPtr(collection1), uCRef((collection4 = uDefault< ::g::Fuse::Drawing::LineSegment>(), collection4.Type = 3, collection4.To = ::g::Uno::Float2__New2(rs.X, useCornerRadius.Item(1)), collection4.A = ::g::Uno::Float2__New1(useCornerRadius.Item(1)), collection4.B = ::g::Uno::Float2__New1(0.0f), collection4.Flags = 2, collection4)));
    ::g::Uno::Collections::List__Add_fn(uPtr(collection1), uCRef((collection5 = uDefault< ::g::Fuse::Drawing::LineSegment>(), collection5.Type = 1, collection5.To = ::g::Uno::Float2__New2(rs.X, rs.Y - useCornerRadius.Item(2)), collection5)));
    ::g::Uno::Collections::List__Add_fn(uPtr(collection1), uCRef((collection6 = uDefault< ::g::Fuse::Drawing::LineSegment>(), collection6.Type = 3, collection6.To = ::g::Uno::Float2__New2(rs.X - useCornerRadius.Item(2), rs.Y), collection6.A = ::g::Uno::Float2__New1(useCornerRadius.Item(2)), collection6.B = ::g::Uno::Float2__New1(0.0f), collection6.Flags = 2, collection6)));
    ::g::Uno::Collections::List__Add_fn(uPtr(collection1), uCRef((collection7 = uDefault< ::g::Fuse::Drawing::LineSegment>(), collection7.Type = 1, collection7.To = ::g::Uno::Float2__New2(useCornerRadius.Item(3), rs.Y), collection7)));
    ::g::Uno::Collections::List__Add_fn(uPtr(collection1), uCRef((collection8 = uDefault< ::g::Fuse::Drawing::LineSegment>(), collection8.Type = 3, collection8.To = ::g::Uno::Float2__New2(0.0f, rs.Y - useCornerRadius.Item(3)), collection8.A = ::g::Uno::Float2__New1(useCornerRadius.Item(3)), collection8.B = ::g::Uno::Float2__New1(0.0f), collection8.Flags = 2, collection8)));
    ::g::Uno::Collections::List__Add_fn(uPtr(collection1), uCRef((collection9 = uDefault< ::g::Fuse::Drawing::LineSegment>(), collection9.Type = 1, collection9.To = ::g::Uno::Float2__New2(0.0f, useCornerRadius.Item(0)), collection9)));
    ::g::Uno::Collections::List__Add_fn(uPtr(collection1), uCRef((collection10 = uDefault< ::g::Fuse::Drawing::LineSegment>(), collection10.Type = 3, collection10.To = ::g::Uno::Float2__New2(useCornerRadius.Item(0), 0.0f), collection10.A = ::g::Uno::Float2__New1(useCornerRadius.Item(0)), collection10.B = ::g::Uno::Float2__New1(0.0f), collection10.Flags = 2, collection10)));
    ::g::Uno::Collections::List__Add_fn(uPtr(collection1), uCRef((collection11 = uDefault< ::g::Fuse::Drawing::LineSegment>(), collection11.Type = 4, collection11)));
    ::g::Uno::Collections::List* rect = collection1;
    return *__retval = uPtr(surface)->CreatePath((uObject*)rect, 0), void();
}

// protected override sealed void DrawFill(Fuse.DrawContext dc, Fuse.Drawing.Brush fill)
void Rectangle__DrawFill_fn(Rectangle* __this, ::g::Fuse::DrawContext* dc, ::g::Fuse::Drawing::Brush* fill)
{
    uPtr(::g::Fuse::Drawing::Primitives::Rectangle::Singleton())->Fill(dc, __this, __this->ActualSize(), __this->CornerRadius(), fill, ::g::Uno::Float2__New1(0.0f), __this->Smoothness());
}

// protected override sealed void DrawStroke(Fuse.DrawContext dc, Fuse.Drawing.Stroke stroke)
void Rectangle__DrawStroke_fn(Rectangle* __this, ::g::Fuse::DrawContext* dc, ::g::Fuse::Drawing::Stroke* stroke)
{
    uPtr(::g::Fuse::Drawing::Primitives::Rectangle::Singleton())->Stroke(dc, __this, __this->ActualSize(), __this->CornerRadius(), stroke, ::g::Uno::Float2__New1(0.0f), __this->Smoothness());
}

// private float4 GetConstrainedCornerRadius(float2 sz)
void Rectangle__GetConstrainedCornerRadius_fn(Rectangle* __this, ::g::Uno::Float2* sz, ::g::Uno::Float4* __retval)
{
    *__retval = __this->GetConstrainedCornerRadius(*sz);
}

// protected override sealed bool get_NeedSurface()
void Rectangle__get_NeedSurface_fn(Rectangle* __this, bool* __retval)
{
    return *__retval = __this->VisualContext() != 1, void();
}

// public generated Rectangle New()
void Rectangle__New3_fn(Rectangle** __retval)
{
    *__retval = Rectangle::New3();
}

// protected override sealed void OnHitTestLocalVisual(Fuse.HitTestContext htc)
void Rectangle__OnHitTestLocalVisual_fn(Rectangle* __this, ::g::Fuse::HitTestContext* htc)
{
    ::g::Fuse::Controls::Control__OnHitTestLocalVisual_fn(__this, htc);
    ::g::Uno::Float2 lp = uPtr(htc)->LocalPoint();

    if (!__this->HasFills() || !__this->IsPointInside(lp))
        return;

    ::g::Uno::Float4 cr = __this->ConstrainedCornerRadius();

    if ((lp.X < cr.Item(0)) && (lp.Y < cr.Item(0)))
    {
        if (::g::Uno::Vector::Distance(lp, ::g::Uno::Float2__New1(cr.Item(0))) > cr.Item(0))
            return;
    }
    else if ((lp.X > (__this->ActualSize().X - cr.Item(1))) && (lp.Y < cr.Item(1)))
    {
        if (::g::Uno::Vector::Distance(lp, ::g::Uno::Float2__New2(__this->ActualSize().X - cr.Item(1), cr.Item(1))) > cr.Item(1))
            return;
    }
    else if ((lp.X < cr.Item(3)) && (lp.Y > (__this->ActualSize().Y - cr.Item(3))))
    {
        if (::g::Uno::Vector::Distance(lp, ::g::Uno::Float2__New2(cr.Item(3), __this->ActualSize().Y - cr.Item(3))) > cr.Item(3))
            return;
    }
    else if ((lp.X > (__this->ActualSize().X - cr.Item(2))) && (lp.Y > (__this->ActualSize().Y - cr.Item(2))))
    {
        if (::g::Uno::Vector::Distance(lp, ::g::Uno::Float2__New2(__this->ActualSize().X - cr.Item(2), __this->ActualSize().Y - cr.Item(2))) > cr.Item(2))
            return;
    }

    htc->Hit(__this);
}

// public void SetCornerRadius(float4 value, Uno.UX.IPropertyListener origin)
void Rectangle__SetCornerRadius_fn(Rectangle* __this, ::g::Uno::Float4* value, uObject* origin)
{
    __this->SetCornerRadius(*value, origin);
}

::g::Uno::UX::Selector Rectangle::CornerRadiusPropertyName_;

// public generated Rectangle() [instance]
void Rectangle::ctor_7()
{
    ctor_6();
}

// private float4 get_ConstrainedCornerRadius() [instance]
::g::Uno::Float4 Rectangle::ConstrainedCornerRadius()
{
    return GetConstrainedCornerRadius(ActualSize());
}

// public float4 get_CornerRadius() [instance]
::g::Uno::Float4 Rectangle::CornerRadius()
{
    return _cornerRadius;
}

// public void set_CornerRadius(float4 value) [instance]
void Rectangle::CornerRadius(::g::Uno::Float4 value)
{
    SetCornerRadius(value, (uObject*)this);
}

// private float4 GetConstrainedCornerRadius(float2 sz) [instance]
::g::Uno::Float4 Rectangle::GetConstrainedCornerRadius(::g::Uno::Float2 sz)
{
    ::g::Uno::Float4 useCornerRadius = CornerRadius();
    float mn = ::g::Uno::Math::Min1(sz.X / 2.0f, sz.Y / 2.0f);

    for (int32_t i = 0; i < 4; ++i)
        useCornerRadius.Item(i, ::g::Uno::Math::Clamp1(useCornerRadius.Item(i), 0.0f, mn));

    return useCornerRadius;
}

// public void SetCornerRadius(float4 value, Uno.UX.IPropertyListener origin) [instance]
void Rectangle::SetCornerRadius(::g::Uno::Float4 value, uObject* origin)
{
    if (::g::Uno::Float4__op_Inequality(_cornerRadius, value))
    {
        _cornerRadius = value;
        OnPropertyChanged1(Rectangle::CornerRadiusPropertyName_, origin);
        InvalidateSurfacePath();
    }
}

// public generated Rectangle New() [static]
Rectangle* Rectangle::New3()
{
    Rectangle* obj12 = (Rectangle*)uNew(Rectangle_typeof());
    obj12->ctor_7();
    return obj12;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/RegularPolygon.uno
// ------------------------------------------------------------------------------------------

// public partial sealed class RegularPolygon
// {
static void RegularPolygon_build(uType* type)
{
    ::STRINGS[69] = uString::Const("Sides");
    ::TYPES[53] = ::g::Uno::Collections::List_typeof()->MakeType(::g::Fuse::Drawing::LineSegment_typeof(), nullptr);
    type->SetDependencies(
        ::g::Uno::Math_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface18),
        ::g::Fuse::Drawing::IDrawObjectWatcherFeedback_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface19));
    type->SetFields(116,
        ::g::Uno::Int_typeof(), offsetof(RegularPolygon, _sides), 0);
}

::g::Fuse::Controls::Shape_type* RegularPolygon_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Shape_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::Shape_typeof();
    options.FieldCount = 117;
    options.InterfaceCount = 20;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(RegularPolygon);
    options.TypeSize = sizeof(::g::Fuse::Controls::Shape_type);
    type = (::g::Fuse::Controls::Shape_type*)uClassType::New("Fuse.Controls.RegularPolygon", options);
    type->fp_build_ = RegularPolygon_build;
    type->fp_CreateSurfacePath = (void(*)(::g::Fuse::Controls::Shape*, ::g::Fuse::Drawing::Surface*, ::g::Fuse::Drawing::SurfacePath**))RegularPolygon__CreateSurfacePath_fn;
    type->interface19.fp_Changed = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackChanged_fn;
    type->interface19.fp_Prepare = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackPrepare_fn;
    type->interface19.fp_Unprepare = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackUnprepare_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Shape__OnPropertyChanged2_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// protected override sealed Fuse.Drawing.SurfacePath CreateSurfacePath(Fuse.Drawing.Surface surface)
void RegularPolygon__CreateSurfacePath_fn(RegularPolygon* __this, ::g::Fuse::Drawing::Surface* surface, ::g::Fuse::Drawing::SurfacePath** __retval)
{
    ::g::Fuse::Drawing::LineSegment collection1;
    ::g::Fuse::Drawing::LineSegment collection2;
    ::g::Fuse::Drawing::LineSegment collection3;
    float radius = ::g::Uno::Math::Min1(__this->ActualSize().X, __this->ActualSize().Y) * 0.5f;
    ::g::Uno::Float2 center = ::g::Uno::Float2__op_Division1(__this->ActualSize(), 2.0f);
    ::g::Uno::Collections::List* list = (::g::Uno::Collections::List*)::g::Uno::Collections::List::New1(::TYPES[53/*Uno.Collections.List<Fuse.Drawing.LineSegment>*/]);

    if (__this->Sides() >= 3)
    {
        float t = -6.28318548f / (float)__this->Sides();
        ::g::Uno::Collections::List__Add_fn(uPtr(list), uCRef((collection1 = uDefault< ::g::Fuse::Drawing::LineSegment>(), collection1.Type = 0, collection1.To = ::g::Uno::Float2__New2(center.X, center.Y - radius), collection1)));

        for (int32_t i = 1; i < __this->Sides(); i++)
            ::g::Uno::Collections::List__Add_fn(uPtr(list), uCRef((collection2 = uDefault< ::g::Fuse::Drawing::LineSegment>(), collection2.Type = 1, collection2.To = ::g::Uno::Float2__New2(center.X + (::g::Uno::Math::Sin1(t * (float)i) * radius), center.Y - (::g::Uno::Math::Cos1(t * (float)i) * radius)), collection2)));

        ::g::Uno::Collections::List__Add_fn(list, uCRef((collection3 = uDefault< ::g::Fuse::Drawing::LineSegment>(), collection3.Type = 4, collection3)));
    }

    return *__retval = uPtr(surface)->CreatePath((uObject*)list, 0), void();
}

// public int get_Sides()
void RegularPolygon__get_Sides_fn(RegularPolygon* __this, int32_t* __retval)
{
    *__retval = __this->Sides();
}

// public void set_Sides(int value)
void RegularPolygon__set_Sides_fn(RegularPolygon* __this, int32_t* value)
{
    __this->Sides(*value);
}

// public int get_Sides() [instance]
int32_t RegularPolygon::Sides()
{
    return _sides;
}

// public void set_Sides(int value) [instance]
void RegularPolygon::Sides(int32_t value)
{
    if (value == _sides)
        return;

    _sides = value;
    InvalidateSurfacePath();
    OnPropertyChanged(::g::Uno::UX::Selector__op_Implicit(::STRINGS[69/*"Sides"*/]));
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/Navigator.Types.uno
// ------------------------------------------------------------------------------------

// public enum RemoveType
uEnumType* RemoveType_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.RemoveType", ::g::Uno::Int_typeof(), 4);
    type->SetLiterals(
        "Default", 0LL,
        "None", 1LL,
        "Cleared", 2LL,
        "Released", 3LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Shape.Resources.uno
// -------------------------------------------------------------------------------------------

// private sealed class Shape.ResourceWatcher
// {
static void Shape__ResourceWatcher_build(uType* type)
{
    type->SetFields(0,
        ::g::Uno::Bool_typeof(), offsetof(Shape__ResourceWatcher, IsWatching), 0);
}

uType* Shape__ResourceWatcher_typeof()
{
    static uSStrong<uType*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.FieldCount = 1;
    options.ObjectSize = sizeof(Shape__ResourceWatcher);
    options.TypeSize = sizeof(uType);
    type = uClassType::New("Fuse.Controls.Shape.ResourceWatcher", options);
    type->fp_build_ = Shape__ResourceWatcher_build;
    type->fp_ctor_ = (void*)Shape__ResourceWatcher__New1_fn;
    return type;
}

// public generated ResourceWatcher()
void Shape__ResourceWatcher__ctor__fn(Shape__ResourceWatcher* __this)
{
    __this->ctor_();
}

// public generated ResourceWatcher New()
void Shape__ResourceWatcher__New1_fn(Shape__ResourceWatcher** __retval)
{
    *__retval = Shape__ResourceWatcher::New1();
}

// public generated ResourceWatcher() [instance]
void Shape__ResourceWatcher::ctor_()
{
}

// public generated ResourceWatcher New() [static]
Shape__ResourceWatcher* Shape__ResourceWatcher::New1()
{
    Shape__ResourceWatcher* obj1 = (Shape__ResourceWatcher*)uNew(Shape__ResourceWatcher_typeof());
    obj1->ctor_();
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/Navigator.Types.uno
// ------------------------------------------------------------------------------------

// public enum ReuseType
uEnumType* ReuseType_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.ReuseType", ::g::Uno::Int_typeof(), 6);
    type->SetLiterals(
        "Default", 0LL,
        "None", 1LL,
        "Removed", 2LL,
        "Inactive", 3LL,
        "Replace", 4LL,
        "Any", 5LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigatorSwipe.uno
// -----------------------------------------------------------------------------------

// internal sealed class Router_PrepareProgress_Property
// {
static void Router_PrepareProgress_Property_build(uType* type)
{
    ::STRINGS[70] = uString::Const("PrepareProgress");
    ::TYPES[54] = ::g::Fuse::Navigation::Router_typeof();
    type->SetBase(::g::Uno::UX::Property1_typeof()->MakeType(::g::Uno::Double_typeof(), nullptr));
    type->SetFields(1,
        ::TYPES[54/*Fuse.Navigation.Router*/], offsetof(Router_PrepareProgress_Property, _obj), 0);
}

::g::Uno::UX::Property1_type* Router_PrepareProgress_Property_typeof()
{
    static uSStrong< ::g::Uno::UX::Property1_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Uno::UX::Property1_typeof();
    options.FieldCount = 2;
    options.ObjectSize = sizeof(Router_PrepareProgress_Property);
    options.TypeSize = sizeof(::g::Uno::UX::Property1_type);
    type = (::g::Uno::UX::Property1_type*)uClassType::New("Fuse.Controls.Router_PrepareProgress_Property", options);
    type->fp_build_ = Router_PrepareProgress_Property_build;
    type->fp_Get1 = (void(*)(::g::Uno::UX::Property1*, ::g::Uno::UX::PropertyObject*, uTRef))Router_PrepareProgress_Property__Get1_fn;
    type->fp_get_Object = (void(*)(::g::Uno::UX::Property*, ::g::Uno::UX::PropertyObject**))Router_PrepareProgress_Property__get_Object_fn;
    type->fp_Set1 = (void(*)(::g::Uno::UX::Property1*, ::g::Uno::UX::PropertyObject*, void*, uObject*))Router_PrepareProgress_Property__Set1_fn;
    type->fp_get_SupportsOriginSetter = (void(*)(::g::Uno::UX::PropertyAccessor*, bool*))Router_PrepareProgress_Property__get_SupportsOriginSetter_fn;
    return type;
}

// public Router_PrepareProgress_Property(Fuse.Navigation.Router obj)
void Router_PrepareProgress_Property__ctor_3_fn(Router_PrepareProgress_Property* __this, ::g::Fuse::Navigation::Router* obj)
{
    __this->ctor_3(obj);
}

// public override sealed double Get(Uno.UX.PropertyObject obj)
void Router_PrepareProgress_Property__Get1_fn(Router_PrepareProgress_Property* __this, ::g::Uno::UX::PropertyObject* obj, double* __retval)
{
    return *__retval = uPtr(uCast< ::g::Fuse::Navigation::Router*>(obj, ::TYPES[54/*Fuse.Navigation.Router*/]))->PrepareProgress(), void();
}

// public Router_PrepareProgress_Property New(Fuse.Navigation.Router obj)
void Router_PrepareProgress_Property__New1_fn(::g::Fuse::Navigation::Router* obj, Router_PrepareProgress_Property** __retval)
{
    *__retval = Router_PrepareProgress_Property::New1(obj);
}

// public override sealed Uno.UX.PropertyObject get_Object()
void Router_PrepareProgress_Property__get_Object_fn(Router_PrepareProgress_Property* __this, ::g::Uno::UX::PropertyObject** __retval)
{
    return *__retval = __this->_obj, void();
}

// public override sealed void Set(Uno.UX.PropertyObject obj, double v, Uno.UX.IPropertyListener origin)
void Router_PrepareProgress_Property__Set1_fn(Router_PrepareProgress_Property* __this, ::g::Uno::UX::PropertyObject* obj, double* v, uObject* origin)
{
    double v_ = *v;
    uPtr(uCast< ::g::Fuse::Navigation::Router*>(obj, ::TYPES[54/*Fuse.Navigation.Router*/]))->PrepareProgress(v_);
}

// public override sealed bool get_SupportsOriginSetter()
void Router_PrepareProgress_Property__get_SupportsOriginSetter_fn(Router_PrepareProgress_Property* __this, bool* __retval)
{
    return *__retval = false, void();
}

// public Router_PrepareProgress_Property(Fuse.Navigation.Router obj) [instance]
void Router_PrepareProgress_Property::ctor_3(::g::Fuse::Navigation::Router* obj)
{
    ctor_2(::g::Uno::UX::Selector__op_Implicit(::STRINGS[70/*"PrepareProg...*/]));
    _obj = obj;
}

// public Router_PrepareProgress_Property New(Fuse.Navigation.Router obj) [static]
Router_PrepareProgress_Property* Router_PrepareProgress_Property::New1(::g::Fuse::Navigation::Router* obj)
{
    Router_PrepareProgress_Property* obj1 = (Router_PrepareProgress_Property*)uNew(Router_PrepareProgress_Property_typeof());
    obj1->ctor_3(obj);
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Native/Enums.uno
// ----------------------------------------------------------------------

// public enum ScrollDirections
uEnumType* ScrollDirections_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.ScrollDirections", ::g::Uno::Int_typeof(), 8);
    type->SetLiterals(
        "Left", 1LL,
        "Right", 2LL,
        "Up", 4LL,
        "Down", 8LL,
        "Horizontal", 3LL,
        "Vertical", 12LL,
        "Both", 15LL,
        "All", 15LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.ScrollView/ScrollView.uno
// -------------------------------------------------------------------------------

// public sealed class ScrollPositionChangedArgs
// {
static void ScrollPositionChangedArgs_build(uType* type)
{
    ::STRINGS[71] = uString::Const("value");
    ::STRINGS[72] = uString::Const("relativePosition");
    ::TYPES[17] = ::g::Fuse::Scripting::IEventSerializer_typeof();
    type->SetBase(::g::Uno::UX::ValueChangedArgs_typeof()->MakeType(::g::Uno::Float2_typeof(), nullptr));
    type->SetInterfaces(
        ::g::Fuse::Scripting::IScriptEvent_typeof(), offsetof(ScrollPositionChangedArgs_type, interface0));
    type->SetFields(1,
        ::g::Uno::Float2_typeof(), offsetof(ScrollPositionChangedArgs, _ArrangeOffset), 0,
        ::g::Uno::Bool_typeof(), offsetof(ScrollPositionChangedArgs, _IsAdjustment), 0,
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(ScrollPositionChangedArgs, _Origin), 0,
        ::g::Uno::Float2_typeof(), offsetof(ScrollPositionChangedArgs, _RelativeScrollPosition), 0);
}

ScrollPositionChangedArgs_type* ScrollPositionChangedArgs_typeof()
{
    static uSStrong<ScrollPositionChangedArgs_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Uno::UX::ValueChangedArgs_typeof();
    options.FieldCount = 5;
    options.InterfaceCount = 1;
    options.ObjectSize = sizeof(ScrollPositionChangedArgs);
    options.TypeSize = sizeof(ScrollPositionChangedArgs_type);
    type = (ScrollPositionChangedArgs_type*)uClassType::New("Fuse.Controls.ScrollPositionChangedArgs", options);
    type->fp_build_ = ScrollPositionChangedArgs_build;
    type->interface0.fp_Serialize = (void(*)(uObject*, uObject*))ScrollPositionChangedArgs__FuseScriptingIScriptEventSerialize_fn;
    return type;
}

// public ScrollPositionChangedArgs(float2 scrollPos, float2 arrangeOffset, bool isAdjustment, Uno.UX.IPropertyListener origin, float2 relativeScrollPos)
void ScrollPositionChangedArgs__ctor_2_fn(ScrollPositionChangedArgs* __this, ::g::Uno::Float2* scrollPos, ::g::Uno::Float2* arrangeOffset, bool* isAdjustment, uObject* origin, ::g::Uno::Float2* relativeScrollPos)
{
    __this->ctor_2(*scrollPos, *arrangeOffset, *isAdjustment, origin, *relativeScrollPos);
}

// public generated float2 get_ArrangeOffset()
void ScrollPositionChangedArgs__get_ArrangeOffset_fn(ScrollPositionChangedArgs* __this, ::g::Uno::Float2* __retval)
{
    *__retval = __this->ArrangeOffset();
}

// private generated void set_ArrangeOffset(float2 value)
void ScrollPositionChangedArgs__set_ArrangeOffset_fn(ScrollPositionChangedArgs* __this, ::g::Uno::Float2* value)
{
    __this->ArrangeOffset(*value);
}

// private void Fuse.Scripting.IScriptEvent.Serialize(Fuse.Scripting.IEventSerializer s)
void ScrollPositionChangedArgs__FuseScriptingIScriptEventSerialize_fn(ScrollPositionChangedArgs* __this, uObject* s)
{
    ::g::Uno::Float2 ret2;
    ::g::Fuse::Scripting::IEventSerializer::AddObject(uInterface(uPtr(s), ::TYPES[17/*Fuse.Scripting.IEventSerializer*/]), ::STRINGS[71/*"value"*/], uBox(::g::Uno::Float2_typeof(), (::g::Uno::UX::ValueChangedArgs__get_Value_fn(__this, &ret2), ret2)));
    ::g::Fuse::Scripting::IEventSerializer::AddObject(uInterface(s, ::TYPES[17/*Fuse.Scripting.IEventSerializer*/]), ::STRINGS[72/*"relativePos...*/], uBox(::g::Uno::Float2_typeof(), __this->RelativeScrollPosition()));
}

// public generated bool get_IsAdjustment()
void ScrollPositionChangedArgs__get_IsAdjustment_fn(ScrollPositionChangedArgs* __this, bool* __retval)
{
    *__retval = __this->IsAdjustment();
}

// private generated void set_IsAdjustment(bool value)
void ScrollPositionChangedArgs__set_IsAdjustment_fn(ScrollPositionChangedArgs* __this, bool* value)
{
    __this->IsAdjustment(*value);
}

// public ScrollPositionChangedArgs New(float2 scrollPos, float2 arrangeOffset, bool isAdjustment, Uno.UX.IPropertyListener origin, float2 relativeScrollPos)
void ScrollPositionChangedArgs__New3_fn(::g::Uno::Float2* scrollPos, ::g::Uno::Float2* arrangeOffset, bool* isAdjustment, uObject* origin, ::g::Uno::Float2* relativeScrollPos, ScrollPositionChangedArgs** __retval)
{
    *__retval = ScrollPositionChangedArgs::New3(*scrollPos, *arrangeOffset, *isAdjustment, origin, *relativeScrollPos);
}

// public generated Uno.UX.IPropertyListener get_Origin()
void ScrollPositionChangedArgs__get_Origin_fn(ScrollPositionChangedArgs* __this, uObject** __retval)
{
    *__retval = __this->Origin();
}

// private generated void set_Origin(Uno.UX.IPropertyListener value)
void ScrollPositionChangedArgs__set_Origin_fn(ScrollPositionChangedArgs* __this, uObject* value)
{
    __this->Origin(value);
}

// public generated float2 get_RelativeScrollPosition()
void ScrollPositionChangedArgs__get_RelativeScrollPosition_fn(ScrollPositionChangedArgs* __this, ::g::Uno::Float2* __retval)
{
    *__retval = __this->RelativeScrollPosition();
}

// private generated void set_RelativeScrollPosition(float2 value)
void ScrollPositionChangedArgs__set_RelativeScrollPosition_fn(ScrollPositionChangedArgs* __this, ::g::Uno::Float2* value)
{
    __this->RelativeScrollPosition(*value);
}

// public ScrollPositionChangedArgs(float2 scrollPos, float2 arrangeOffset, bool isAdjustment, Uno.UX.IPropertyListener origin, float2 relativeScrollPos) [instance]
void ScrollPositionChangedArgs::ctor_2(::g::Uno::Float2 scrollPos, ::g::Uno::Float2 arrangeOffset, bool isAdjustment, uObject* origin, ::g::Uno::Float2 relativeScrollPos)
{
    ::g::Uno::UX::ValueChangedArgs__ctor_1_fn(this, uCRef(scrollPos));
    ArrangeOffset(arrangeOffset);
    Origin(origin);
    IsAdjustment(isAdjustment);
    RelativeScrollPosition(relativeScrollPos);
}

// public generated float2 get_ArrangeOffset() [instance]
::g::Uno::Float2 ScrollPositionChangedArgs::ArrangeOffset()
{
    return _ArrangeOffset;
}

// private generated void set_ArrangeOffset(float2 value) [instance]
void ScrollPositionChangedArgs::ArrangeOffset(::g::Uno::Float2 value)
{
    _ArrangeOffset = value;
}

// public generated bool get_IsAdjustment() [instance]
bool ScrollPositionChangedArgs::IsAdjustment()
{
    return _IsAdjustment;
}

// private generated void set_IsAdjustment(bool value) [instance]
void ScrollPositionChangedArgs::IsAdjustment(bool value)
{
    _IsAdjustment = value;
}

// public generated Uno.UX.IPropertyListener get_Origin() [instance]
uObject* ScrollPositionChangedArgs::Origin()
{
    return _Origin;
}

// private generated void set_Origin(Uno.UX.IPropertyListener value) [instance]
void ScrollPositionChangedArgs::Origin(uObject* value)
{
    _Origin = value;
}

// public generated float2 get_RelativeScrollPosition() [instance]
::g::Uno::Float2 ScrollPositionChangedArgs::RelativeScrollPosition()
{
    return _RelativeScrollPosition;
}

// private generated void set_RelativeScrollPosition(float2 value) [instance]
void ScrollPositionChangedArgs::RelativeScrollPosition(::g::Uno::Float2 value)
{
    _RelativeScrollPosition = value;
}

// public ScrollPositionChangedArgs New(float2 scrollPos, float2 arrangeOffset, bool isAdjustment, Uno.UX.IPropertyListener origin, float2 relativeScrollPos) [static]
ScrollPositionChangedArgs* ScrollPositionChangedArgs::New3(::g::Uno::Float2 scrollPos, ::g::Uno::Float2 arrangeOffset, bool isAdjustment, uObject* origin, ::g::Uno::Float2 relativeScrollPos)
{
    ScrollPositionChangedArgs* obj1 = (ScrollPositionChangedArgs*)uNew(ScrollPositionChangedArgs_typeof());
    obj1->ctor_2(scrollPos, arrangeOffset, isAdjustment, origin, relativeScrollPos);
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.ScrollView/ScrollView.uno
// -------------------------------------------------------------------------------

// public delegate void ScrollPositionChangedHandler(object sender, Fuse.Controls.ScrollPositionChangedArgs args)
uDelegateType* ScrollPositionChangedHandler_typeof()
{
    static uSStrong<uDelegateType*> type;
    if (type != nullptr) return type;

    type = uDelegateType::New("Fuse.Controls.ScrollPositionChangedHandler", 2, 0);
    type->SetSignature(uVoid_typeof(),
        uObject_typeof(),
        ::g::Fuse::Controls::ScrollPositionChangedArgs_typeof());
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.ScrollView/ScrollView.ux.uno
// ----------------------------------------------------------------------------------

// public partial sealed class ScrollView
// {
// static ScrollView()
static void ScrollView__cctor_4_fn(uType* __type)
{
    ScrollView::__selector0_ = ::g::Uno::UX::Selector__op_Implicit(uString::Const("s"));
}

static void ScrollView_build(uType* type)
{
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::ScrollViewBase_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::ScrollViewBase_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::ScrollViewBase_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::ScrollViewBase_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::ScrollViewBase_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::ScrollViewBase_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::ScrollViewBase_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::ScrollViewBase_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::ScrollViewBase_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::ScrollViewBase_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::ScrollViewBase_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::ScrollViewBase_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::ScrollViewBase_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::ScrollViewBase_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::ScrollViewBase_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::ScrollViewBase_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::ScrollViewBase_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::ScrollViewBase_type, interface17),
        ::g::Fuse::Controls::Native::IScrollViewHost_typeof(), offsetof(::g::Fuse::Controls::ScrollViewBase_type, interface18));
    type->SetFields(129,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&ScrollView::__selector0_, uFieldFlagsStatic);
}

::g::Fuse::Controls::ScrollViewBase_type* ScrollView_typeof()
{
    static uSStrong< ::g::Fuse::Controls::ScrollViewBase_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::ScrollViewBase_typeof();
    options.FieldCount = 130;
    options.InterfaceCount = 19;
    options.ObjectSize = sizeof(ScrollView);
    options.TypeSize = sizeof(::g::Fuse::Controls::ScrollViewBase_type);
    type = (::g::Fuse::Controls::ScrollViewBase_type*)uClassType::New("Fuse.Controls.ScrollView", options);
    type->fp_build_ = ScrollView_build;
    type->fp_cctor_ = ScrollView__cctor_4_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))ScrollView__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))ScrollView__OnUnrooted_fn;
    type->interface18.fp_OnScrollPositionChanged = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::ScrollViewBase__FuseControlsNativeIScrollViewHostOnScrollPositionChanged_fn;
    type->interface18.fp_get_PixelsPerPoint = (void(*)(uObject*, float*))::g::Fuse::Controls::ScrollViewBase__FuseControlsNativeIScrollViewHostget_PixelsPerPoint_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// protected override sealed void OnRooted()
void ScrollView__OnRooted_fn(ScrollView* __this)
{
    ::g::Fuse::Controls::ScrollViewBase__OnRooted_fn(__this);

    if (__this->VisualContext() != 2)
        ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(__this->Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), ::g::Fuse::Gestures::Scroller::New2(true));

    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(__this->Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), ScrollView__DefaultTrigger::New3(__this));
}

// protected override sealed void OnUnrooted()
void ScrollView__OnUnrooted_fn(ScrollView* __this)
{
    __this->RemoveAllChildren(::TYPES[4/*Fuse.Visual*/]->MakeMethod(8/*RemoveAllChildren<Fuse.Gestures.Scroller>*/, ::g::Fuse::Gestures::Scroller_typeof(), nullptr));
    __this->RemoveAllChildren(::TYPES[4/*Fuse.Visual*/]->MakeMethod(8/*RemoveAllChildren<Fuse.Controls.ScrollView.DefaultTrigger>*/, ScrollView__DefaultTrigger_typeof(), nullptr));
    ::g::Fuse::Controls::ScrollViewBase__OnUnrooted_fn(__this);
}

::g::Uno::UX::Selector ScrollView::__selector0_;
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.ScrollView/ScrollView.ScriptClass.uno
// -------------------------------------------------------------------------------------------

// public partial class ScrollViewBase
// {
// static ScrollViewBase()
static void ScrollViewBase__cctor_3_fn(uType* __type)
{
    ::g::Fuse::Scripting::ScriptClass_typeof()->Init();
    ScrollViewBase::SizingChanged_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[73/*"SizingChanged"*/]);
    ScrollViewBase::UserScrollName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[74/*"UserScroll"*/]);
    ScrollViewBase::GesturePriorityName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[75/*"GesturePrio...*/]);
    ScrollViewBase::_keepFocusInViewName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[76/*"KeepFocusIn...*/]);
    ScrollViewBase::_allowedScrollDirectionsName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[77/*"AllowedScro...*/]);
    ScrollViewBase::ScrollPositionName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[78/*"ScrollPosit...*/]);
    ::g::Fuse::Scripting::ScriptClass::Register(__type, uArray::Init< ::g::Fuse::Scripting::ScriptMember*>(::TYPES[19/*Fuse.Scripting.ScriptMember[]*/], 4, (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New1(::TYPES[55/*Fuse.Scripting.ScriptMethod<Fuse.Controls.ScrollViewBase>*/], ::STRINGS[52/*"goto"*/], uDelegate::New(::TYPES[56/*Uno.Action<Fuse.Controls.ScrollViewBase, object[]>*/], (void*)ScrollViewBase__goto__fn)), (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New1(::TYPES[55/*Fuse.Scripting.ScriptMethod<Fuse.Controls.ScrollViewBase>*/], ::STRINGS[79/*"gotoRelative"*/], uDelegate::New(::TYPES[56/*Uno.Action<Fuse.Controls.ScrollViewBase, object[]>*/], (void*)ScrollViewBase__gotoRelative_fn)), (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New1(::TYPES[55/*Fuse.Scripting.ScriptMethod<Fuse.Controls.ScrollViewBase>*/], ::STRINGS[80/*"seekTo"*/], uDelegate::New(::TYPES[56/*Uno.Action<Fuse.Controls.ScrollViewBase, object[]>*/], (void*)ScrollViewBase__seekTo_fn)), (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New1(::TYPES[55/*Fuse.Scripting.ScriptMethod<Fuse.Controls.ScrollViewBase>*/], ::STRINGS[81/*"seekToRelat...*/], uDelegate::New(::TYPES[56/*Uno.Action<Fuse.Controls.ScrollViewBase, object[]>*/], (void*)ScrollViewBase__seekToRelative_fn))));
}

static void ScrollViewBase_build(uType* type)
{
    ::STRINGS[73] = uString::Const("SizingChanged");
    ::STRINGS[74] = uString::Const("UserScroll");
    ::STRINGS[75] = uString::Const("GesturePriority");
    ::STRINGS[76] = uString::Const("KeepFocusInView");
    ::STRINGS[77] = uString::Const("AllowedScrollDirections");
    ::STRINGS[78] = uString::Const("ScrollPosition");
    ::STRINGS[52] = uString::Const("goto");
    ::STRINGS[79] = uString::Const("gotoRelative");
    ::STRINGS[80] = uString::Const("seekTo");
    ::STRINGS[81] = uString::Const("seekToRelative");
    ::STRINGS[82] = uString::Const("AllowedScrollDirections is not valid: ");
    ::STRINGS[83] = uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.ScrollView/ScrollView.Layout.uno");
    ::STRINGS[84] = uString::Const("ArrangeContent");
    ::STRINGS[85] = uString::Const("ScrollViewBase.");
    ::STRINGS[86] = uString::Const(" requires 1 or 2 arguments");
    ::STRINGS[87] = uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.ScrollView/ScrollView.ScriptClass.uno");
    ::STRINGS[88] = uString::Const("getParams");
    ::STRINGS[89] = uString::Const("gotoToRelative");
    ::STRINGS[90] = uString::Const("Visual content of ScrollView must be of type Element");
    ::STRINGS[91] = uString::Const("Motion should not be changed post-rooting");
    ::STRINGS[92] = uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.ScrollView/ScrollView.uno");
    ::STRINGS[93] = uString::Const("set_Motion");
    ::TYPES[18] = ::g::Uno::Type_typeof();
    ::TYPES[19] = ::g::Fuse::Scripting::ScriptMember_typeof()->Array();
    ::TYPES[55] = ::g::Fuse::Scripting::ScriptMethod1_typeof()->MakeType(type, nullptr);
    ::TYPES[56] = ::g::Uno::Action2_typeof()->MakeType(type, uObject_typeof()->Array(), nullptr);
    ::TYPES[5] = ::g::Fuse::Elements::Element_typeof();
    ::TYPES[16] = ::g::Uno::Action_typeof();
    ::TYPES[57] = ::g::Fuse::Visual_typeof()->MakeMethod(2/*FirstChild<Fuse.Elements.Element>*/, ::TYPES[5/*Fuse.Elements.Element*/], nullptr);
    ::TYPES[58] = ::g::Fuse::Node_typeof()->MakeMethod(3/*NextSibling<Fuse.Elements.Element>*/, ::TYPES[5/*Fuse.Elements.Element*/], nullptr);
    ::TYPES[6] = ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr);
    ::TYPES[59] = ::g::Fuse::Controls::Native::IScrollView_typeof();
    ::TYPES[36] = ::g::Fuse::ICommonViewport_typeof();
    ::TYPES[60] = ::g::Fuse::Controls::ScrollPositionChangedHandler_typeof();
    type->SetDependencies(
        ::g::Fuse::Layouts::Layout_typeof(),
        ::g::Fuse::Marshal_typeof(),
        ::g::Uno::Math_typeof(),
        ::g::Fuse::UpdateManager_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(ScrollViewBase_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(ScrollViewBase_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(ScrollViewBase_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(ScrollViewBase_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(ScrollViewBase_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(ScrollViewBase_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(ScrollViewBase_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(ScrollViewBase_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(ScrollViewBase_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(ScrollViewBase_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(ScrollViewBase_type, interface10),
        ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/], offsetof(ScrollViewBase_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(ScrollViewBase_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(ScrollViewBase_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(ScrollViewBase_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(ScrollViewBase_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(ScrollViewBase_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(ScrollViewBase_type, interface17),
        ::g::Fuse::Controls::Native::IScrollViewHost_typeof(), offsetof(ScrollViewBase_type, interface18));
    type->SetFields(106,
        ::g::Fuse::Controls::ScrollViewLayoutMode_typeof(), offsetof(ScrollViewBase, _layoutMode), 0,
        ::g::Uno::Bool_typeof(), offsetof(ScrollViewBase, _hasPrevArrange), 0,
        ::TYPES[5/*Fuse.Elements.Element*/], offsetof(ScrollViewBase, _placeAnchor), 0,
        ::g::Uno::Float2_typeof(), offsetof(ScrollViewBase, _oldMinScroll), 0,
        ::g::Uno::Float2_typeof(), offsetof(ScrollViewBase, _oldMaxScroll), 0,
        ::g::Uno::Float2_typeof(), offsetof(ScrollViewBase, _placePosition), 0,
        ::g::Uno::Float2_typeof(), offsetof(ScrollViewBase, _oldScrollPosition), 0,
        ::g::Uno::Float2_typeof(), offsetof(ScrollViewBase, _oldActualSize), 0,
        ::g::Fuse::Elements::Alignment_typeof(), offsetof(ScrollViewBase, _contentAlignment), 0,
        ::g::Uno::Float2_typeof(), offsetof(ScrollViewBase, _contentMarginSize), 0,
        ::g::Uno::Bool_typeof(), offsetof(ScrollViewBase, _userScroll), 0,
        ::g::Fuse::Input::GesturePriority_typeof(), offsetof(ScrollViewBase, _gesturePriority), 0,
        ::g::Uno::Bool_typeof(), offsetof(ScrollViewBase, _snapMinTransform), 0,
        ::g::Uno::Bool_typeof(), offsetof(ScrollViewBase, _snapMaxTransform), 0,
        ::g::Fuse::Visual_typeof(), offsetof(ScrollViewBase, _currentContent), 0,
        ::g::Fuse::Gestures::Scroller_typeof(), offsetof(ScrollViewBase, _scroller), 0,
        ::g::Fuse::Motion::MotionConfig_typeof(), offsetof(ScrollViewBase, _motion), 0,
        ::g::Uno::Bool_typeof(), offsetof(ScrollViewBase, _keepFocusInView), 0,
        ::g::Fuse::Controls::ScrollDirections_typeof(), offsetof(ScrollViewBase, _allowedScrollDirections), 0,
        ::g::Uno::Float2_typeof(), offsetof(ScrollViewBase, _scrollPosition), 0,
        ::g::Fuse::Translation_typeof(), offsetof(ScrollViewBase, _scrollTranslation), 0,
        ::g::Uno::Float2_typeof(), offsetof(ScrollViewBase, _previousRelative), 0,
        ::TYPES[60/*Fuse.Controls.ScrollPositionChangedHandler*/], offsetof(ScrollViewBase, ScrollPositionChanged1), 0,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&ScrollViewBase::SizingChanged_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&ScrollViewBase::UserScrollName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&ScrollViewBase::GesturePriorityName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&ScrollViewBase::_keepFocusInViewName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&ScrollViewBase::_allowedScrollDirectionsName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&ScrollViewBase::ScrollPositionName_, uFieldFlagsStatic);
}

ScrollViewBase_type* ScrollViewBase_typeof()
{
    static uSStrong<ScrollViewBase_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::ContentControl_typeof();
    options.FieldCount = 135;
    options.InterfaceCount = 19;
    options.DependencyCount = 4;
    options.ObjectSize = sizeof(ScrollViewBase);
    options.TypeSize = sizeof(ScrollViewBase_type);
    type = (ScrollViewBase_type*)uClassType::New("Fuse.Controls.ScrollViewBase", options);
    type->fp_build_ = ScrollViewBase_build;
    type->fp_cctor_ = ScrollViewBase__cctor_3_fn;
    type->fp_ArrangePaddingBox = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::LayoutParams*))ScrollViewBase__ArrangePaddingBox_fn;
    type->fp_CompensateForScrollView = (void(*)(::g::Fuse::Controls::Control*, ::g::Uno::Float4x4*))ScrollViewBase__CompensateForScrollView_fn;
    type->fp_GetContentSize = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::LayoutParams*, ::g::Uno::Float2*))ScrollViewBase__GetContentSize_fn;
    type->fp_IsMarginBoxDependent = (void(*)(::g::Fuse::Visual*, ::g::Fuse::Visual*, int32_t*))ScrollViewBase__IsMarginBoxDependent_fn;
    type->fp_OnContentChanged = (void(*)(::g::Fuse::Controls::ContentControl*))ScrollViewBase__OnContentChanged_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))ScrollViewBase__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))ScrollViewBase__OnUnrooted_fn;
    type->fp_PushPropertiesToNativeView = (void(*)(::g::Fuse::Controls::Control*))ScrollViewBase__PushPropertiesToNativeView_fn;
    type->interface18.fp_OnScrollPositionChanged = (void(*)(uObject*, ::g::Uno::Float2*))ScrollViewBase__FuseControlsNativeIScrollViewHostOnScrollPositionChanged_fn;
    type->interface18.fp_get_PixelsPerPoint = (void(*)(uObject*, float*))ScrollViewBase__FuseControlsNativeIScrollViewHostget_PixelsPerPoint_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public Fuse.Controls.ScrollDirections get_AllowedScrollDirections()
void ScrollViewBase__get_AllowedScrollDirections_fn(ScrollViewBase* __this, int32_t* __retval)
{
    *__retval = __this->AllowedScrollDirections();
}

// public void set_AllowedScrollDirections(Fuse.Controls.ScrollDirections value)
void ScrollViewBase__set_AllowedScrollDirections_fn(ScrollViewBase* __this, int32_t* value)
{
    __this->AllowedScrollDirections(*value);
}

// private void ArrangeContent(Fuse.LayoutParams lp)
void ScrollViewBase__ArrangeContent_fn(ScrollViewBase* __this, ::g::Fuse::LayoutParams* lp)
{
    __this->ArrangeContent(*lp);
}

// protected override sealed void ArrangePaddingBox(Fuse.LayoutParams lp)
void ScrollViewBase__ArrangePaddingBox_fn(ScrollViewBase* __this, ::g::Fuse::LayoutParams* lp)
{
    ::g::Fuse::LayoutParams lp_ = *lp;

    if (__this->Element() == nullptr)
    {
        __this->_contentMarginSize = ::g::Uno::Float2__New1(0.0f);
        __this->_placeAnchor = nullptr;
    }
    else
    {
        __this->_placeAnchor = ((!__this->_hasPrevArrange || (__this->LayoutMode() == 0)) ? uCast< ::g::Fuse::Elements::Element*>(nullptr, ::TYPES[5/*Fuse.Elements.Element*/]) : (::g::Fuse::Elements::Element*)__this->FindAnchorElement());

        if (__this->_placeAnchor != nullptr)
        {
            __this->_oldMinScroll = __this->MinScroll();
            __this->_oldMaxScroll = __this->MaxScroll();
            __this->_oldScrollPosition = __this->ScrollPosition();
            __this->_oldActualSize = __this->ActualSize();
            __this->_placePosition = ::g::Uno::Float2__op_Addition2(uPtr(__this->_placeAnchor)->ActualPosition(), uPtr(__this->Content())->ActualPosition());
        }

        __this->ArrangeContent(lp_);
        __this->_hasPrevArrange = true;
    }

    ::g::Fuse::UpdateManager::AddDeferredAction3(uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)ScrollViewBase__UpdateScrollPosition_fn, __this), 4);
}

// internal override sealed void CompensateForScrollView(float4x4& t)
void ScrollViewBase__CompensateForScrollView_fn(ScrollViewBase* __this, ::g::Uno::Float4x4* t)
{
    (*t).M41 = ((*t).M41 + __this->ScrollPosition().X);
    (*t).M42 = ((*t).M42 + __this->ScrollPosition().Y);
}

// internal float2 Constrain(float2 t)
void ScrollViewBase__Constrain_fn(ScrollViewBase* __this, ::g::Uno::Float2* t, ::g::Uno::Float2* __retval)
{
    *__retval = __this->Constrain(*t);
}

// private float2 ConstrainDown(float2 t)
void ScrollViewBase__ConstrainDown_fn(ScrollViewBase* __this, ::g::Uno::Float2* t, ::g::Uno::Float2* __retval)
{
    *__retval = __this->ConstrainDown(*t);
}

// internal float2 ConstrainExtents(float2 t)
void ScrollViewBase__ConstrainExtents_fn(ScrollViewBase* __this, ::g::Uno::Float2* t, ::g::Uno::Float2* __retval)
{
    *__retval = __this->ConstrainExtents(*t);
}

// private float2 ConstrainUp(float2 t)
void ScrollViewBase__ConstrainUp_fn(ScrollViewBase* __this, ::g::Uno::Float2* t, ::g::Uno::Float2* __retval)
{
    *__retval = __this->ConstrainUp(*t);
}

// internal float2 get_ContentMarginSize()
void ScrollViewBase__get_ContentMarginSize_fn(ScrollViewBase* __this, ::g::Uno::Float2* __retval)
{
    *__retval = __this->ContentMarginSize();
}

// private Fuse.Elements.Element get_Element()
void ScrollViewBase__get_Element_fn(ScrollViewBase* __this, ::g::Fuse::Elements::Element** __retval)
{
    *__retval = __this->Element();
}

// private Fuse.Elements.Element FindAnchorElement()
void ScrollViewBase__FindAnchorElement_fn(ScrollViewBase* __this, ::g::Fuse::Elements::Element** __retval)
{
    *__retval = __this->FindAnchorElement();
}

// private float2 FromScalarPosition(float value)
void ScrollViewBase__FromScalarPosition_fn(ScrollViewBase* __this, float* value, ::g::Uno::Float2* __retval)
{
    *__retval = __this->FromScalarPosition(*value);
}

// private void Fuse.Controls.Native.IScrollViewHost.OnScrollPositionChanged(float2 newScrollPosition)
void ScrollViewBase__FuseControlsNativeIScrollViewHostOnScrollPositionChanged_fn(ScrollViewBase* __this, ::g::Uno::Float2* newScrollPosition)
{
    ::g::Uno::Float2 newScrollPosition_ = *newScrollPosition;
    __this->SetScrollPosition1(newScrollPosition_, nullptr);
}

// private float Fuse.Controls.Native.IScrollViewHost.get_PixelsPerPoint()
void ScrollViewBase__FuseControlsNativeIScrollViewHostget_PixelsPerPoint_fn(ScrollViewBase* __this, float* __retval)
{
    return *__retval = ::g::Fuse::ICommonViewport::PixelsPerPoint(uInterface(uPtr(__this->Viewport()), ::TYPES[36/*Fuse.ICommonViewport*/])), void();
}

// public Fuse.Input.GesturePriority get_GesturePriority()
void ScrollViewBase__get_GesturePriority_fn(ScrollViewBase* __this, int32_t* __retval)
{
    *__retval = __this->GesturePriority();
}

// public void set_GesturePriority(Fuse.Input.GesturePriority value)
void ScrollViewBase__set_GesturePriority_fn(ScrollViewBase* __this, int32_t* value)
{
    __this->GesturePriority(*value);
}

// protected override sealed float2 GetContentSize(Fuse.LayoutParams lp)
void ScrollViewBase__GetContentSize_fn(ScrollViewBase* __this, ::g::Fuse::LayoutParams* lp, ::g::Uno::Float2* __retval)
{
    ::g::Uno::Float4 ind6;
    ::g::Uno::Float4 ind7;
    ::g::Fuse::LayoutParams lp_ = *lp;

    if (__this->Element() != nullptr)
    {
        ::g::Fuse::LayoutParams nlp = lp_.CloneAndDerive();
        nlp.RemoveSize(::g::Uno::Float2__op_Addition2((ind6 = __this->Padding(), ::g::Uno::Float2__New2(ind6.X, ind6.Y)), (ind7 = __this->Padding(), ::g::Uno::Float2__New2(ind7.Z, ind7.W))));
        ::g::Uno::Float2 r = uPtr(__this->Element())->GetMarginSize(nlp);
        return *__retval = r, void();
    }

    return *__retval = ::g::Uno::Float2__New1(0.0f), void();
}

// private static bool getParams(Fuse.Controls.ScrollViewBase s, object[] args, string func, float2& pos)
void ScrollViewBase__getParams_fn(ScrollViewBase* s, uArray* args, uString* func, ::g::Uno::Float2* pos, bool* __retval)
{
    *__retval = ScrollViewBase::getParams(s, args, func, pos);
}

// public float2 GetVisualScrollPosition(Fuse.Visual n)
void ScrollViewBase__GetVisualScrollPosition_fn(ScrollViewBase* __this, ::g::Fuse::Visual* n, ::g::Uno::Float2* __retval)
{
    *__retval = __this->GetVisualScrollPosition(n);
}

// public void Goto(float2 position)
void ScrollViewBase__Goto_fn(ScrollViewBase* __this, ::g::Uno::Float2* position)
{
    __this->Goto(*position);
}

// private static void goto_(Fuse.Controls.ScrollViewBase s, object[] args)
void ScrollViewBase__goto__fn(ScrollViewBase* s, uArray* args)
{
    ScrollViewBase::goto_(s, args);
}

// private static void gotoRelative(Fuse.Controls.ScrollViewBase s, object[] args)
void ScrollViewBase__gotoRelative_fn(ScrollViewBase* s, uArray* args)
{
    ScrollViewBase::gotoRelative(s, args);
}

// public void GotoRelative(float2 position)
void ScrollViewBase__GotoRelative_fn(ScrollViewBase* __this, ::g::Uno::Float2* position)
{
    __this->GotoRelative(*position);
}

// protected override sealed Fuse.LayoutDependent IsMarginBoxDependent(Fuse.Visual child)
void ScrollViewBase__IsMarginBoxDependent_fn(ScrollViewBase* __this, ::g::Fuse::Visual* child, int32_t* __retval)
{
    return *__retval = 3, void();
}

// public bool get_KeepFocusInView()
void ScrollViewBase__get_KeepFocusInView_fn(ScrollViewBase* __this, bool* __retval)
{
    *__retval = __this->KeepFocusInView();
}

// public void set_KeepFocusInView(bool value)
void ScrollViewBase__set_KeepFocusInView_fn(ScrollViewBase* __this, bool* value)
{
    __this->KeepFocusInView(*value);
}

// public Fuse.Controls.ScrollViewLayoutMode get_LayoutMode()
void ScrollViewBase__get_LayoutMode_fn(ScrollViewBase* __this, int32_t* __retval)
{
    *__retval = __this->LayoutMode();
}

// public void set_LayoutMode(Fuse.Controls.ScrollViewLayoutMode value)
void ScrollViewBase__set_LayoutMode_fn(ScrollViewBase* __this, int32_t* value)
{
    __this->LayoutMode(*value);
}

// public float2 get_MaxScroll()
void ScrollViewBase__get_MaxScroll_fn(ScrollViewBase* __this, ::g::Uno::Float2* __retval)
{
    *__retval = __this->MaxScroll();
}

// public float2 get_MinScroll()
void ScrollViewBase__get_MinScroll_fn(ScrollViewBase* __this, ::g::Uno::Float2* __retval)
{
    *__retval = __this->MinScroll();
}

// public Fuse.Motion.MotionConfig get_Motion()
void ScrollViewBase__get_Motion_fn(ScrollViewBase* __this, ::g::Fuse::Motion::MotionConfig** __retval)
{
    *__retval = __this->Motion();
}

// public void set_Motion(Fuse.Motion.MotionConfig value)
void ScrollViewBase__set_Motion_fn(ScrollViewBase* __this, ::g::Fuse::Motion::MotionConfig* value)
{
    __this->Motion(value);
}

// private Fuse.Controls.Native.IScrollView get_NativeScrollView()
void ScrollViewBase__get_NativeScrollView_fn(ScrollViewBase* __this, uObject** __retval)
{
    *__retval = __this->NativeScrollView();
}

// protected override sealed void OnContentChanged()
void ScrollViewBase__OnContentChanged_fn(ScrollViewBase* __this)
{
    bool ret12;
    ::g::Fuse::Controls::ContentControl__OnContentChanged_fn(__this);

    if ((__this->Content() != nullptr) && !uIs((::g::Fuse::Elements::Element*)__this->Content(), ::TYPES[5/*Fuse.Elements.Element*/]))
        U_THROW(::g::Uno::Exception::New2(::STRINGS[90/*"Visual cont...*/]));

    if (__this->_currentContent != nullptr)
        ::g::Uno::Collections::ICollection::Remove_ex(uInterface(uPtr(uPtr(__this->_currentContent)->Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), __this->_scrollTranslation, &ret12);

    __this->_currentContent = __this->Content();

    if (__this->_currentContent != nullptr)
        ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(uPtr(__this->_currentContent)->Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), __this->_scrollTranslation);

    __this->_hasPrevArrange = false;
}

// protected override void OnRooted()
void ScrollViewBase__OnRooted_fn(ScrollViewBase* __this)
{
    ::g::Fuse::Controls::Control__OnRooted_fn(__this);
    __this->_hasPrevArrange = false;
}

// private void OnScrollPositionChanged(float2 arrangeOffset, bool adjustment, Uno.UX.IPropertyListener origin)
void ScrollViewBase__OnScrollPositionChanged_fn(ScrollViewBase* __this, ::g::Uno::Float2* arrangeOffset, bool* adjustment, uObject* origin)
{
    __this->OnScrollPositionChanged(*arrangeOffset, *adjustment, origin);
}

// private void OnScrollPropertyChanged(Uno.UX.Selector name, Uno.UX.IPropertyListener origin)
void ScrollViewBase__OnScrollPropertyChanged_fn(ScrollViewBase* __this, ::g::Uno::UX::Selector* name, uObject* origin)
{
    __this->OnScrollPropertyChanged(*name, origin);
}

// protected override void OnUnrooted()
void ScrollViewBase__OnUnrooted_fn(ScrollViewBase* __this)
{
    ::g::Fuse::Controls::Control__OnUnrooted_fn(__this);
}

// protected override sealed void PushPropertiesToNativeView()
void ScrollViewBase__PushPropertiesToNativeView_fn(ScrollViewBase* __this)
{
    ::g::Fuse::Controls::Control__PushPropertiesToNativeView_fn(__this);
    uObject* nsv = __this->NativeScrollView();

    if (nsv != nullptr)
        ::g::Fuse::Controls::Native::IScrollView::AllowedScrollDirections(uInterface(uPtr(nsv), ::TYPES[59/*Fuse.Controls.Native.IScrollView*/]), __this->AllowedScrollDirections());
}

// public float2 get_RelativeScrollPosition()
void ScrollViewBase__get_RelativeScrollPosition_fn(ScrollViewBase* __this, ::g::Uno::Float2* __retval)
{
    *__retval = __this->RelativeScrollPosition();
}

// public void set_RelativeScrollPosition(float2 value)
void ScrollViewBase__set_RelativeScrollPosition_fn(ScrollViewBase* __this, ::g::Uno::Float2* value)
{
    __this->RelativeScrollPosition(*value);
}

// internal float2 RelativeToAbsolutePosition(float2 pos)
void ScrollViewBase__RelativeToAbsolutePosition_fn(ScrollViewBase* __this, ::g::Uno::Float2* pos, ::g::Uno::Float2* __retval)
{
    *__retval = __this->RelativeToAbsolutePosition(*pos);
}

// public float2 get_ScrollPosition()
void ScrollViewBase__get_ScrollPosition_fn(ScrollViewBase* __this, ::g::Uno::Float2* __retval)
{
    *__retval = __this->ScrollPosition();
}

// public void set_ScrollPosition(float2 value)
void ScrollViewBase__set_ScrollPosition_fn(ScrollViewBase* __this, ::g::Uno::Float2* value)
{
    __this->ScrollPosition(*value);
}

// public generated void add_ScrollPositionChanged(Fuse.Controls.ScrollPositionChangedHandler value)
void ScrollViewBase__add_ScrollPositionChanged_fn(ScrollViewBase* __this, uDelegate* value)
{
    __this->add_ScrollPositionChanged(value);
}

// public generated void remove_ScrollPositionChanged(Fuse.Controls.ScrollPositionChangedHandler value)
void ScrollViewBase__remove_ScrollPositionChanged_fn(ScrollViewBase* __this, uDelegate* value)
{
    __this->remove_ScrollPositionChanged(value);
}

// private static void seekTo(Fuse.Controls.ScrollViewBase s, object[] args)
void ScrollViewBase__seekTo_fn(ScrollViewBase* s, uArray* args)
{
    ScrollViewBase::seekTo(s, args);
}

// private static void seekToRelative(Fuse.Controls.ScrollViewBase s, object[] args)
void ScrollViewBase__seekToRelative_fn(ScrollViewBase* s, uArray* args)
{
    ScrollViewBase::seekToRelative(s, args);
}

// private void SetScrollPosition(float2 position, float2 arrangeOffset, Uno.UX.IPropertyListener origin)
void ScrollViewBase__SetScrollPosition_fn(ScrollViewBase* __this, ::g::Uno::Float2* position, ::g::Uno::Float2* arrangeOffset, uObject* origin)
{
    __this->SetScrollPosition(*position, *arrangeOffset, origin);
}

// public void SetScrollPosition(float2 position, Uno.UX.IPropertyListener origin)
void ScrollViewBase__SetScrollPosition1_fn(ScrollViewBase* __this, ::g::Uno::Float2* position, uObject* origin)
{
    __this->SetScrollPosition1(*position, origin);
}

// private void SetScrollPositionImpl(float2 position, float2 arrangeOffset, bool adjustment, Uno.UX.IPropertyListener origin)
void ScrollViewBase__SetScrollPositionImpl_fn(ScrollViewBase* __this, ::g::Uno::Float2* position, ::g::Uno::Float2* arrangeOffset, bool* adjustment, uObject* origin)
{
    __this->SetScrollPositionImpl(*position, *arrangeOffset, *adjustment, origin);
}

// public bool get_SnapMaxTransform()
void ScrollViewBase__get_SnapMaxTransform_fn(ScrollViewBase* __this, bool* __retval)
{
    *__retval = __this->SnapMaxTransform();
}

// public void set_SnapMaxTransform(bool value)
void ScrollViewBase__set_SnapMaxTransform_fn(ScrollViewBase* __this, bool* value)
{
    __this->SnapMaxTransform(*value);
}

// public bool get_SnapMinTransform()
void ScrollViewBase__get_SnapMinTransform_fn(ScrollViewBase* __this, bool* __retval)
{
    *__retval = __this->SnapMinTransform();
}

// public void set_SnapMinTransform(bool value)
void ScrollViewBase__set_SnapMinTransform_fn(ScrollViewBase* __this, bool* value)
{
    __this->SnapMinTransform(*value);
}

// internal float ToScalarPosition(float2 value)
void ScrollViewBase__ToScalarPosition_fn(ScrollViewBase* __this, ::g::Uno::Float2* value, float* __retval)
{
    *__retval = __this->ToScalarPosition(*value);
}

// private void UpdateScrollPosition()
void ScrollViewBase__UpdateScrollPosition_fn(ScrollViewBase* __this)
{
    __this->UpdateScrollPosition();
}

// public bool get_UserScroll()
void ScrollViewBase__get_UserScroll_fn(ScrollViewBase* __this, bool* __retval)
{
    *__retval = __this->UserScroll();
}

// public void set_UserScroll(bool value)
void ScrollViewBase__set_UserScroll_fn(ScrollViewBase* __this, bool* value)
{
    __this->UserScroll(*value);
}

::g::Uno::UX::Selector ScrollViewBase::SizingChanged_;
::g::Uno::UX::Selector ScrollViewBase::UserScrollName_;
::g::Uno::UX::Selector ScrollViewBase::GesturePriorityName_;
::g::Uno::UX::Selector ScrollViewBase::_keepFocusInViewName_;
::g::Uno::UX::Selector ScrollViewBase::_allowedScrollDirectionsName_;
::g::Uno::UX::Selector ScrollViewBase::ScrollPositionName_;

// public Fuse.Controls.ScrollDirections get_AllowedScrollDirections() [instance]
int32_t ScrollViewBase::AllowedScrollDirections()
{
    return _allowedScrollDirections;
}

// public void set_AllowedScrollDirections(Fuse.Controls.ScrollDirections value) [instance]
void ScrollViewBase::AllowedScrollDirections(int32_t value)
{
    if (_allowedScrollDirections != value)
    {
        _allowedScrollDirections = value;
        OnScrollPropertyChanged(ScrollViewBase::_allowedScrollDirectionsName_, (uObject*)this);
        uObject* s = NativeScrollView();

        if (s != nullptr)
            ::g::Fuse::Controls::Native::IScrollView::AllowedScrollDirections(uInterface(uPtr(s), ::TYPES[59/*Fuse.Controls.Native.IScrollView*/]), _allowedScrollDirections);
    }
}

// private void ArrangeContent(Fuse.LayoutParams lp) [instance]
void ScrollViewBase::ArrangeContent(::g::Fuse::LayoutParams lp)
{
    ::g::Uno::Float4 ind1;
    ::g::Uno::Float4 ind2;
    ::g::Uno::Float4 ind3;
    ::g::Uno::Float4 ind4;
    ::g::Uno::Float4 ind5;
    ::g::Fuse::LayoutParams nlp = lp.CloneAndDerive();
    nlp.RemoveSize(::g::Uno::Float2__op_Addition2((ind1 = Padding(), ::g::Uno::Float2__New2(ind1.X, ind1.Y)), (ind2 = Padding(), ::g::Uno::Float2__New2(ind2.Z, ind2.W))));
    nlp.SetRelativeSize(lp.GetAvailableSize(), true, true);
    int32_t align = 0;
    bool setWidth = false;
    bool setHeight = false;

    if (AllowedScrollDirections() == 15)
    {
        align = 5;
        setWidth = true;
        setHeight = true;
    }
    else if (AllowedScrollDirections() == 3)
    {
        align = 1;
        setWidth = true;
    }
    else if (AllowedScrollDirections() == 12)
    {
        align = 4;
        setHeight = true;
    }
    else
        ::g::Fuse::Diagnostics::UserError(::g::Uno::String::op_Addition1(::STRINGS[82/*"AllowedScro...*/], uBox<int32_t>(::g::Fuse::Controls::ScrollDirections_typeof(), AllowedScrollDirections())), this, ::STRINGS[83/*"/Users/mort...*/], 171, ::STRINGS[84/*"ArrangeCont...*/], nullptr);

    int32_t hAlign = 0;

    if (setWidth)
    {
        hAlign = ::g::Fuse::Elements::AlignmentHelpers::GetHorizontalAlign(uPtr(Content())->Alignment());

        if (hAlign == 0)
            hAlign = ::g::Fuse::Elements::AlignmentHelpers::GetHorizontalAlign(align);
    }

    int32_t vAlign = 0;

    if (setHeight)
    {
        vAlign = ::g::Fuse::Elements::AlignmentHelpers::GetVerticalAlign(uPtr(Content())->Alignment());

        if (vAlign == 0)
            vAlign = ::g::Fuse::Elements::AlignmentHelpers::GetVerticalAlign(align);
    }

    align = hAlign | vAlign;
    nlp.RetainAxesXY(!setWidth, !setHeight);
    ::g::Uno::Float2 sz = uPtr(Content())->ArrangeMarginBox((ind3 = Padding(), ::g::Uno::Float2__New2(ind3.X, ind3.Y)), nlp);
    ::g::Fuse::Layouts::Layout::AdjustAlignBox(Content(), sz, ::g::Uno::Float4__New7((ind4 = Padding(), ::g::Uno::Float2__New2(ind4.X, ind4.Y)), ::g::Uno::Float2__op_Subtraction2(lp.Size(), (ind5 = Padding(), ::g::Uno::Float2__New2(ind5.Z, ind5.W)))), align);
    _contentMarginSize = sz;
    _contentAlignment = align;
}

// internal float2 Constrain(float2 t) [instance]
::g::Uno::Float2 ScrollViewBase::Constrain(::g::Uno::Float2 t)
{
    return IfSnap(ConstrainExtents(t));
}

// private float2 ConstrainDown(float2 t) [instance]
::g::Uno::Float2 ScrollViewBase::ConstrainDown(::g::Uno::Float2 t)
{
    return IfSnapDown(ConstrainExtents(t));
}

// internal float2 ConstrainExtents(float2 t) [instance]
::g::Uno::Float2 ScrollViewBase::ConstrainExtents(::g::Uno::Float2 t)
{
    if (AllowedScrollDirections() == 3)
        t.Y = 0.0f;
    else if (AllowedScrollDirections() == 12)
        t.X = 0.0f;

    return t;
}

// private float2 ConstrainUp(float2 t) [instance]
::g::Uno::Float2 ScrollViewBase::ConstrainUp(::g::Uno::Float2 t)
{
    return IfSnapUp(ConstrainExtents(t));
}

// internal float2 get_ContentMarginSize() [instance]
::g::Uno::Float2 ScrollViewBase::ContentMarginSize()
{
    return _contentMarginSize;
}

// private Fuse.Elements.Element get_Element() [instance]
::g::Fuse::Elements::Element* ScrollViewBase::Element()
{
    return uAs< ::g::Fuse::Elements::Element*>(Content(), ::TYPES[5/*Fuse.Elements.Element*/]);
}

// private Fuse.Elements.Element FindAnchorElement() [instance]
::g::Fuse::Elements::Element* ScrollViewBase::FindAnchorElement()
{
    ::g::Fuse::Elements::Element* cur = nullptr;
    float curDist = 0.0f;
    ::g::Uno::Float2 relAnchor = ::g::Fuse::Elements::AlignmentHelpers::GetAnchor(_contentAlignment);
    ::g::Uno::Float2 anchor = ::g::Uno::Float2__op_Multiply2(relAnchor, ActualSize());

    for (::g::Fuse::Elements::Element* c = (::g::Fuse::Elements::Element*)uPtr(Element())->FirstChild(::TYPES[57/*Fuse.Visual.FirstChild<Fuse.Elements.Element>*/]); c != nullptr; c = (::g::Fuse::Elements::Element*)uPtr(c)->NextSibling(::TYPES[58/*Fuse.Node.NextSibling<Fuse.Elements.Element>*/]))
    {
        if (!uPtr(c)->HasMarginBox() || (uPtr(c)->LayoutRole() != 0))
            continue;

        ::g::Uno::Float2 cAnchor = ::g::Uno::Float2__op_Addition2(::g::Uno::Float2__op_Addition2(::g::Uno::Float2__op_Subtraction2(uPtr(Content())->ActualPosition(), ScrollPosition()), uPtr(c)->ActualPosition()), ::g::Uno::Float2__op_Multiply2(uPtr(c)->ActualSize(), relAnchor));
        float dist = ::g::Uno::Vector::Length(::g::Uno::Float2__op_Subtraction2(cAnchor, anchor));

        if ((dist < curDist) || (cur == nullptr))
        {
            cur = c;
            curDist = dist;
        }
    }

    return cur;
}

// private float2 FromScalarPosition(float value) [instance]
::g::Uno::Float2 ScrollViewBase::FromScalarPosition(float value)
{
    if (AllowedScrollDirections() == 3)
        return ::g::Uno::Float2__New2(value, 0.0f);
    else if (AllowedScrollDirections() == 12)
        return ::g::Uno::Float2__New2(0.0f, value);

    return ::g::Uno::Float2__New1(value);
}

// public Fuse.Input.GesturePriority get_GesturePriority() [instance]
int32_t ScrollViewBase::GesturePriority()
{
    return _gesturePriority;
}

// public void set_GesturePriority(Fuse.Input.GesturePriority value) [instance]
void ScrollViewBase::GesturePriority(int32_t value)
{
    if (_gesturePriority == value)
        return;

    _gesturePriority = value;
    OnScrollPropertyChanged(ScrollViewBase::GesturePriorityName_, (uObject*)this);
}

// public float2 GetVisualScrollPosition(Fuse.Visual n) [instance]
::g::Uno::Float2 ScrollViewBase::GetVisualScrollPosition(::g::Fuse::Visual* n)
{
    if ((n == nullptr) || (Element() == nullptr))
        return ::g::Uno::Float2__New1(0.0f);

    ::g::Uno::Float4x4 trans = uPtr(n)->GetTransformTo(Element());
    ::g::Uno::Float4 local = ::g::Uno::Vector::Transform4(::g::Uno::Float3__New1(0.0f), trans);
    ::g::Fuse::Elements::Element* elm = uAs< ::g::Fuse::Elements::Element*>(n, ::TYPES[5/*Fuse.Elements.Element*/]);

    if (elm == nullptr)
        return ::g::Uno::Float2__New2(local.X, local.Y);

    return ::g::Uno::Float2__op_Subtraction2(::g::Uno::Float2__op_Addition2(::g::Uno::Float2__op_Addition2(MinScroll(), ::g::Uno::Float2__New2(local.X, local.Y)), ::g::Uno::Float2__op_Division1(uPtr(elm)->ActualSize(), 2.0f)), ::g::Uno::Float2__op_Division1(ActualSize(), 2.0f));
}

// public void Goto(float2 position) [instance]
void ScrollViewBase::Goto(::g::Uno::Float2 position)
{
    if (_scroller == nullptr)
        ScrollPosition(::g::Uno::Math::Min3(MaxScroll(), ::g::Uno::Math::Max3(MinScroll(), ScrollPosition())));
    else
        uPtr(_scroller)->Goto(position);
}

// public void GotoRelative(float2 position) [instance]
void ScrollViewBase::GotoRelative(::g::Uno::Float2 position)
{
    Goto(RelativeToAbsolutePosition(position));
}

// public bool get_KeepFocusInView() [instance]
bool ScrollViewBase::KeepFocusInView()
{
    return _keepFocusInView;
}

// public void set_KeepFocusInView(bool value) [instance]
void ScrollViewBase::KeepFocusInView(bool value)
{
    if (_keepFocusInView != value)
    {
        _keepFocusInView = value;
        OnScrollPropertyChanged(ScrollViewBase::_keepFocusInViewName_, (uObject*)this);
    }
}

// public Fuse.Controls.ScrollViewLayoutMode get_LayoutMode() [instance]
int32_t ScrollViewBase::LayoutMode()
{
    return _layoutMode;
}

// public void set_LayoutMode(Fuse.Controls.ScrollViewLayoutMode value) [instance]
void ScrollViewBase::LayoutMode(int32_t value)
{
    _layoutMode = value;
}

// public float2 get_MaxScroll() [instance]
::g::Uno::Float2 ScrollViewBase::MaxScroll()
{
    ::g::Uno::Float4 ind8;
    ::g::Uno::Float4 ind9;

    if (Element() == nullptr)
        return ::g::Uno::Float2__New1(0.0f);

    return ConstrainUp(::g::Uno::Math::Max3(::g::Uno::Float2__op_Subtraction2(::g::Uno::Float2__op_Addition2(::g::Uno::Float2__op_Addition2(::g::Uno::Float2__op_Addition2(ContentMarginSize(), uPtr(Element())->ActualPosition()), (ind8 = Padding(), ::g::Uno::Float2__New2(ind8.X, ind8.Y))), (ind9 = Padding(), ::g::Uno::Float2__New2(ind9.Z, ind9.W))), ActualSize()), ::g::Uno::Float2__New1(0.0f)));
}

// public float2 get_MinScroll() [instance]
::g::Uno::Float2 ScrollViewBase::MinScroll()
{
    ::g::Uno::Float4 ind10;

    if (Element() == nullptr)
        return ::g::Uno::Float2__New1(0.0f);

    return ConstrainDown(::g::Uno::Math::Min3(::g::Uno::Float2__New1(0.0f), ::g::Uno::Float2__op_Subtraction2(uPtr(Element())->ActualPosition(), (ind10 = Padding(), ::g::Uno::Float2__New2(ind10.X, ind10.Y)))));
}

// public Fuse.Motion.MotionConfig get_Motion() [instance]
::g::Fuse::Motion::MotionConfig* ScrollViewBase::Motion()
{
    if (_motion == nullptr)
        _motion = ::g::Fuse::Motion::ScrollViewMotion::New2();

    return _motion;
}

// public void set_Motion(Fuse.Motion.MotionConfig value) [instance]
void ScrollViewBase::Motion(::g::Fuse::Motion::MotionConfig* value)
{
    _motion = value;

    if (IsRootingCompleted())
        ::g::Fuse::Diagnostics::UserError(::STRINGS[91/*"Motion shou...*/], this, ::STRINGS[92/*"/Users/mort...*/], 201, ::STRINGS[93/*"set_Motion"*/], nullptr);
}

// private Fuse.Controls.Native.IScrollView get_NativeScrollView() [instance]
uObject* ScrollViewBase::NativeScrollView()
{
    return uAs<uObject*>(NativeView(), ::TYPES[59/*Fuse.Controls.Native.IScrollView*/]);
}

// private void OnScrollPositionChanged(float2 arrangeOffset, bool adjustment, Uno.UX.IPropertyListener origin) [instance]
void ScrollViewBase::OnScrollPositionChanged(::g::Uno::Float2 arrangeOffset, bool adjustment, uObject* origin)
{
    OnPropertyChanged1(ScrollViewBase::ScrollPositionName_, origin);
    uDelegate* handler = ScrollPositionChanged1;

    if (::g::Uno::Delegate::op_Inequality(handler, nullptr))
        uPtr(handler)->Invoke(2, this, (::g::Fuse::Controls::ScrollPositionChangedArgs*)::g::Fuse::Controls::ScrollPositionChangedArgs::New3(ScrollPosition(), arrangeOffset, adjustment, origin, RelativeScrollPosition()));
}

// private void OnScrollPropertyChanged(Uno.UX.Selector name, Uno.UX.IPropertyListener origin) [instance]
void ScrollViewBase::OnScrollPropertyChanged(::g::Uno::UX::Selector name, uObject* origin)
{
    InvalidateLayout(2);
    OnPropertyChanged1(name, origin);
}

// public float2 get_RelativeScrollPosition() [instance]
::g::Uno::Float2 ScrollViewBase::RelativeScrollPosition()
{
    ::g::Uno::Float2 r = ::g::Uno::Float2__op_Subtraction2(MaxScroll(), MinScroll());
    ::g::Uno::Float2 q = ::g::Uno::Float2__op_Division2(::g::Uno::Float2__op_Subtraction2(ScrollPosition(), MinScroll()), ::g::Uno::Float2__op_Subtraction2(MaxScroll(), MinScroll()));

    if (r.X < 1e-05f)
        q.X = ((Element() == nullptr) ? 0.5f : ::g::Fuse::Elements::AlignmentHelpers::GetAnchor(uPtr(Element())->Alignment()).X);

    if (r.Y < 1e-05f)
        q.Y = ((Element() == nullptr) ? 0.5f : ::g::Fuse::Elements::AlignmentHelpers::GetAnchor(uPtr(Element())->Alignment()).Y);

    return q;
}

// public void set_RelativeScrollPosition(float2 value) [instance]
void ScrollViewBase::RelativeScrollPosition(::g::Uno::Float2 value)
{
    ScrollPosition(::g::Uno::Float2__op_Addition2(::g::Uno::Float2__op_Multiply2(value, ::g::Uno::Float2__op_Subtraction2(MaxScroll(), MinScroll())), MinScroll()));
}

// internal float2 RelativeToAbsolutePosition(float2 pos) [instance]
::g::Uno::Float2 ScrollViewBase::RelativeToAbsolutePosition(::g::Uno::Float2 pos)
{
    return ::g::Uno::Float2__op_Addition2(MinScroll(), ::g::Uno::Float2__op_Multiply2(::g::Uno::Float2__op_Subtraction2(MaxScroll(), MinScroll()), pos));
}

// public float2 get_ScrollPosition() [instance]
::g::Uno::Float2 ScrollViewBase::ScrollPosition()
{
    return _scrollPosition;
}

// public void set_ScrollPosition(float2 value) [instance]
void ScrollViewBase::ScrollPosition(::g::Uno::Float2 value)
{
    SetScrollPosition1(value, (uObject*)this);
}

// public generated void add_ScrollPositionChanged(Fuse.Controls.ScrollPositionChangedHandler value) [instance]
void ScrollViewBase::add_ScrollPositionChanged(uDelegate* value)
{
    ScrollPositionChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(ScrollPositionChanged1, value), ::TYPES[60/*Fuse.Controls.ScrollPositionChangedHandler*/]);
}

// public generated void remove_ScrollPositionChanged(Fuse.Controls.ScrollPositionChangedHandler value) [instance]
void ScrollViewBase::remove_ScrollPositionChanged(uDelegate* value)
{
    ScrollPositionChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(ScrollPositionChanged1, value), ::TYPES[60/*Fuse.Controls.ScrollPositionChangedHandler*/]);
}

// private void SetScrollPosition(float2 position, float2 arrangeOffset, Uno.UX.IPropertyListener origin) [instance]
void ScrollViewBase::SetScrollPosition(::g::Uno::Float2 position, ::g::Uno::Float2 arrangeOffset, uObject* origin)
{
    SetScrollPositionImpl(position, arrangeOffset, true, origin);
}

// public void SetScrollPosition(float2 position, Uno.UX.IPropertyListener origin) [instance]
void ScrollViewBase::SetScrollPosition1(::g::Uno::Float2 position, uObject* origin)
{
    SetScrollPositionImpl(position, ::g::Uno::Float2__New1(0.0f), false, origin);
}

// private void SetScrollPositionImpl(float2 position, float2 arrangeOffset, bool adjustment, Uno.UX.IPropertyListener origin) [instance]
void ScrollViewBase::SetScrollPositionImpl(::g::Uno::Float2 position, ::g::Uno::Float2 arrangeOffset, bool adjustment, uObject* origin)
{
    bool changed = false;
    position = Constrain(position);

    if (::g::Uno::Vector::LengthSquared(::g::Uno::Float2__op_Subtraction2(position, _scrollPosition)) > 1e-05f)
    {
        _scrollPosition = position;
        changed = true;
    }

    if (!SnapMinTransform())
        position = ::g::Uno::Math::Max3(MinScroll(), position);

    if (!SnapMaxTransform())
        position = ::g::Uno::Math::Min3(MaxScroll(), position);

    ::g::Uno::Float3 nv = ::g::Uno::Float3__New4(::g::Uno::Float2__op_UnaryNegation(position), 0.0f);

    if (::g::Uno::Vector::LengthSquared1(::g::Uno::Float3__op_Subtraction2(nv, uPtr(_scrollTranslation)->Vector())) > 1e-05f)
    {
        uPtr(_scrollTranslation)->Vector(nv);
        changed = true;
    }

    ::g::Uno::Float2 nRel = RelativeScrollPosition();

    if (::g::Uno::Vector::LengthSquared(::g::Uno::Float2__op_Subtraction2(nRel, _previousRelative)) > 1e-05f)
    {
        _previousRelative = nRel;
        changed = true;
    }

    if (origin != nullptr)
    {
        uObject* sv = NativeScrollView();

        if (sv != nullptr)
            ::g::Fuse::Controls::Native::IScrollView::ScrollPosition(uInterface(uPtr(sv), ::TYPES[59/*Fuse.Controls.Native.IScrollView*/]), position);
    }

    if (changed)
        OnScrollPositionChanged(arrangeOffset, adjustment, origin);
}

// public bool get_SnapMaxTransform() [instance]
bool ScrollViewBase::SnapMaxTransform()
{
    return _snapMaxTransform;
}

// public void set_SnapMaxTransform(bool value) [instance]
void ScrollViewBase::SnapMaxTransform(bool value)
{
    _snapMaxTransform = value;
}

// public bool get_SnapMinTransform() [instance]
bool ScrollViewBase::SnapMinTransform()
{
    return _snapMinTransform;
}

// public void set_SnapMinTransform(bool value) [instance]
void ScrollViewBase::SnapMinTransform(bool value)
{
    _snapMinTransform = value;
}

// internal float ToScalarPosition(float2 value) [instance]
float ScrollViewBase::ToScalarPosition(::g::Uno::Float2 value)
{
    if (AllowedScrollDirections() == 3)
        return value.X;
    else if (AllowedScrollDirections() == 12)
        return value.Y;

    return (value.X + value.Y) / 2.0f;
}

// private void UpdateScrollPosition() [instance]
void ScrollViewBase::UpdateScrollPosition()
{
    if (_placeAnchor != nullptr)
    {
        ::g::Uno::Float2 relAnchor = ::g::Fuse::Elements::AlignmentHelpers::GetAnchor(_contentAlignment);
        ::g::Uno::Float2 oldAnchor = ::g::Uno::Float2__op_Multiply2(relAnchor, _oldActualSize);
        ::g::Uno::Float2 oldOffset = ::g::Uno::Float2__op_Subtraction2(_placePosition, oldAnchor);
        ::g::Uno::Float2 newAnchor = ::g::Uno::Float2__op_Multiply2(relAnchor, ActualSize());
        ::g::Uno::Float2 newOffset = ::g::Uno::Float2__op_Subtraction2(::g::Uno::Float2__op_Addition2(uPtr(Content())->ActualPosition(), uPtr(_placeAnchor)->ActualPosition()), newAnchor);
        ::g::Uno::Float2 diff = ::g::Uno::Float2__op_Subtraction2(newOffset, oldOffset);
        ::g::Uno::Float2 nsp = ::g::Uno::Float2__op_Addition2(ScrollPosition(), diff);
        ::g::Uno::Float2 ndiff = ::g::Uno::Float2__op_Subtraction2(nsp, ScrollPosition());
        SetScrollPosition(nsp, ndiff, (uObject*)this);
    }

    if ((_scroller != nullptr) && IsRootingCompleted())
        ::g::Fuse::UpdateManager::AddDeferredAction3(uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)::g::Fuse::Gestures::Scroller__CheckLimits_fn, uPtr(_scroller)), 4);
    else
    {
        ScrollPosition(::g::Uno::Math::Min3(MaxScroll(), ::g::Uno::Math::Max3(MinScroll(), ScrollPosition())));
        OnScrollPositionChanged(::g::Uno::Float2__New1(0.0f), false, (uObject*)this);
    }

    OnPropertyChanged(ScrollViewBase::SizingChanged_);
}

// public bool get_UserScroll() [instance]
bool ScrollViewBase::UserScroll()
{
    return _userScroll;
}

// public void set_UserScroll(bool value) [instance]
void ScrollViewBase::UserScroll(bool value)
{
    if (_userScroll == value)
        return;

    _userScroll = value;
    OnScrollPropertyChanged(ScrollViewBase::UserScrollName_, (uObject*)this);
}

// private static bool getParams(Fuse.Controls.ScrollViewBase s, object[] args, string func, float2& pos) [static]
bool ScrollViewBase::getParams(ScrollViewBase* s, uArray* args, uString* func, ::g::Uno::Float2* pos)
{
    ScrollViewBase_typeof()->Init();

    if ((uPtr(args)->Length() == 0) || (uPtr(args)->Length() > 2))
    {
        ::g::Fuse::Diagnostics::UserError(::g::Uno::String::op_Addition2(::g::Uno::String::op_Addition2(::STRINGS[85/*"ScrollViewB...*/], func), ::STRINGS[86/*" requires 1...*/]), s, ::STRINGS[87/*"/Users/mort...*/], 23, ::STRINGS[88/*"getParams"*/], nullptr);
        *pos = ::g::Uno::Float2__New1(0.0f);
        return false;
    }

    *pos = (uPtr(args)->Length() == 1) ? uPtr(s)->FromScalarPosition(::g::Fuse::Marshal::ToFloat(uPtr(args)->Strong<uObject*>(0))) : ::g::Uno::Float2__New2(::g::Fuse::Marshal::ToFloat(uPtr(args)->Strong<uObject*>(0)), ::g::Fuse::Marshal::ToFloat(uPtr(args)->Strong<uObject*>(1)));
    return true;
}

// private static void goto_(Fuse.Controls.ScrollViewBase s, object[] args) [static]
void ScrollViewBase::goto_(ScrollViewBase* s, uArray* args)
{
    ScrollViewBase_typeof()->Init();
    ::g::Uno::Float2 pos;

    if (!ScrollViewBase::getParams(s, args, ::STRINGS[52/*"goto"*/], &pos))
        return;

    uPtr(s)->Goto(pos);
}

// private static void gotoRelative(Fuse.Controls.ScrollViewBase s, object[] args) [static]
void ScrollViewBase::gotoRelative(ScrollViewBase* s, uArray* args)
{
    ScrollViewBase_typeof()->Init();
    ::g::Uno::Float2 pos;

    if (!ScrollViewBase::getParams(s, args, ::STRINGS[89/*"gotoToRelat...*/], &pos))
        return;

    uPtr(s)->GotoRelative(pos);
}

// private static void seekTo(Fuse.Controls.ScrollViewBase s, object[] args) [static]
void ScrollViewBase::seekTo(ScrollViewBase* s, uArray* args)
{
    ScrollViewBase_typeof()->Init();
    ::g::Uno::Float2 pos;

    if (!ScrollViewBase::getParams(s, args, ::STRINGS[80/*"seekTo"*/], &pos))
        return;

    uPtr(s)->ScrollPosition(pos);
}

// private static void seekToRelative(Fuse.Controls.ScrollViewBase s, object[] args) [static]
void ScrollViewBase::seekToRelative(ScrollViewBase* s, uArray* args)
{
    ScrollViewBase_typeof()->Init();
    ::g::Uno::Float2 pos;

    if (!ScrollViewBase::getParams(s, args, ::STRINGS[81/*"seekToRelat...*/], &pos))
        return;

    uPtr(s)->RelativeScrollPosition(pos);
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.ScrollView/ScrollView.Layout.uno
// --------------------------------------------------------------------------------------

// public enum ScrollViewLayoutMode
uEnumType* ScrollViewLayoutMode_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.ScrollViewLayoutMode", ::g::Uno::Int_typeof(), 2);
    type->SetLiterals(
        "PreserveScrollPosition", 0LL,
        "PreserveVisual", 1LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.ScrollView/ScrollViewPager.ScriptClass.uno
// ------------------------------------------------------------------------------------------------

// public partial sealed class ScrollViewPager
// {
// static ScrollViewPager()
static void ScrollViewPager__cctor_1_fn(uType* __type)
{
    ::g::Fuse::Scripting::ScriptClass_typeof()->Init();
    ::g::Fuse::Scripting::ScriptClass::Register(__type, uArray::Init< ::g::Fuse::Scripting::ScriptMember*>(::TYPES[19/*Fuse.Scripting.ScriptMember[]*/], 1, (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New2(::g::Fuse::Scripting::ScriptMethod1_typeof()->MakeType(__type, nullptr), uString::Const("check"), uDelegate::New(::g::Uno::Action1_typeof()->MakeType(__type, nullptr), (void*)ScrollViewPager__check_fn))));
}

static void ScrollViewPager_build(uType* type)
{
    type->SetDependencies(
        ::g::Fuse::Controls::ScrollViewBase_typeof(),
        ::g::Fuse::UpdateManager_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(ScrollViewPager_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(ScrollViewPager_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(ScrollViewPager_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(ScrollViewPager_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(ScrollViewPager_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(ScrollViewPager_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(ScrollViewPager_type, interface6),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(ScrollViewPager_type, interface7));
    type->SetFields(17,
        ::g::Uno::Int_typeof(), offsetof(ScrollViewPager, _retain), 0,
        ::g::Uno::Float_typeof(), offsetof(ScrollViewPager, _endRange), 0,
        ::g::Fuse::Reactive::Each_typeof(), offsetof(ScrollViewPager, _each), 0,
        ::g::Fuse::Controls::ScrollViewBase_typeof(), offsetof(ScrollViewPager, _scrollable), 0,
        ::g::Uno::Bool_typeof(), offsetof(ScrollViewPager, _pendingPosition), 0,
        ::g::Uno::Bool_typeof(), offsetof(ScrollViewPager, _pendingSizing), 0,
        ::g::Uno::Int_typeof(), offsetof(ScrollViewPager, _lastActivityPosition), 0,
        ::g::Uno::Int_typeof(), offsetof(ScrollViewPager, _lastActivitySizing), 0,
        ::g::Uno::Bool_typeof(), offsetof(ScrollViewPager, _nearTrueEnd), 0,
        ::g::Uno::Bool_typeof(), offsetof(ScrollViewPager, _nearTrueStart), 0,
        ::g::Uno::Float2_typeof(), offsetof(ScrollViewPager, _prevActualSize), 0,
        ScrollViewPager__ScrollViewPagerHandler_typeof(), offsetof(ScrollViewPager, ReachedEnd1), 0,
        ScrollViewPager__ScrollViewPagerHandler_typeof(), offsetof(ScrollViewPager, ReachedStart1), 0);
}

ScrollViewPager_type* ScrollViewPager_typeof()
{
    static uSStrong<ScrollViewPager_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Behavior_typeof();
    options.FieldCount = 30;
    options.InterfaceCount = 8;
    options.DependencyCount = 2;
    options.ObjectSize = sizeof(ScrollViewPager);
    options.TypeSize = sizeof(ScrollViewPager_type);
    type = (ScrollViewPager_type*)uClassType::New("Fuse.Controls.ScrollViewPager", options);
    type->fp_build_ = ScrollViewPager_build;
    type->fp_cctor_ = ScrollViewPager__cctor_1_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))ScrollViewPager__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))ScrollViewPager__OnUnrooted_fn;
    type->interface7.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))ScrollViewPager__UnoUXIPropertyListenerOnPropertyChanged_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// private static void check(Fuse.Controls.ScrollViewPager s)
void ScrollViewPager__check_fn(ScrollViewPager* s)
{
    ScrollViewPager::check(s);
}

// public void Check()
void ScrollViewPager__Check_fn(ScrollViewPager* __this)
{
    __this->Check();
}

// private void CheckPosition()
void ScrollViewPager__CheckPosition_fn(ScrollViewPager* __this)
{
    __this->CheckPosition();
}

// private void CheckSizing()
void ScrollViewPager__CheckSizing_fn(ScrollViewPager* __this)
{
    __this->CheckSizing();
}

// public Fuse.Reactive.Each get_Each()
void ScrollViewPager__get_Each_fn(ScrollViewPager* __this, ::g::Fuse::Reactive::Each** __retval)
{
    *__retval = __this->Each();
}

// public void set_Each(Fuse.Reactive.Each value)
void ScrollViewPager__set_Each_fn(ScrollViewPager* __this, ::g::Fuse::Reactive::Each* value)
{
    __this->Each(value);
}

// public float get_EndRange()
void ScrollViewPager__get_EndRange_fn(ScrollViewPager* __this, float* __retval)
{
    *__retval = __this->EndRange();
}

// public void set_EndRange(float value)
void ScrollViewPager__set_EndRange_fn(ScrollViewPager* __this, float* value)
{
    __this->EndRange(*value);
}

// protected override sealed void OnRooted()
void ScrollViewPager__OnRooted_fn(ScrollViewPager* __this)
{
    ::g::Fuse::Node__OnRooted_fn(__this);

    if (__this->Each() == nullptr)
    {
        ::g::Fuse::Diagnostics::UserError(uString::Const("Require an Each"), __this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.ScrollView/ScrollViewPager.uno"), 90, ::STRINGS[49/*"OnRooted"*/], nullptr);
        return;
    }

    if (!uPtr(__this->Each())->HasLimit())
        uPtr(__this->Each())->Limit1(1);

    __this->_scrollable = ((::g::Fuse::Controls::ScrollViewBase*)uPtr(__this->Parent())->FindByType(::g::Fuse::Node_typeof()->MakeMethod(1/*FindByType<Fuse.Controls.ScrollViewBase>*/, ::g::Fuse::Controls::ScrollViewBase_typeof(), nullptr)));

    if (__this->_scrollable == nullptr)
    {
        ::g::Fuse::Diagnostics::UserError(uString::Const("Could not find a Scrollable control."), __this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.ScrollView/ScrollViewPager.uno"), 100, ::STRINGS[49/*"OnRooted"*/], nullptr);
        return;
    }

    if (uPtr(__this->_scrollable)->LayoutMode() == 0)
    {
        ::g::Fuse::Diagnostics::UserError(uString::Const("The ScrollView should have `LayoutMode=\"PreserveVisual\"` for paging to work correctly"), __this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.ScrollView/ScrollViewPager.uno"), 107, ::STRINGS[49/*"OnRooted"*/], nullptr);
        return;
    }

    uPtr(__this->_scrollable)->AddPropertyListener((uObject*)__this);
    __this->_prevActualSize = ::g::Uno::Float2__New1(0.0f);
    __this->_lastActivityPosition = ::g::Fuse::UpdateManager::FrameIndex();
    __this->_lastActivitySizing = ::g::Fuse::UpdateManager::FrameIndex();
}

// protected override sealed void OnUnrooted()
void ScrollViewPager__OnUnrooted_fn(ScrollViewPager* __this)
{
    if (__this->_scrollable != nullptr)
    {
        uPtr(__this->_scrollable)->RemovePropertyListener((uObject*)__this);
        __this->_scrollable = nullptr;
    }

    ::g::Fuse::Node__OnUnrooted_fn(__this);
}

// public generated void add_ReachedEnd(Fuse.Controls.ScrollViewPager.ScrollViewPagerHandler value)
void ScrollViewPager__add_ReachedEnd_fn(ScrollViewPager* __this, uDelegate* value)
{
    __this->add_ReachedEnd(value);
}

// public generated void remove_ReachedEnd(Fuse.Controls.ScrollViewPager.ScrollViewPagerHandler value)
void ScrollViewPager__remove_ReachedEnd_fn(ScrollViewPager* __this, uDelegate* value)
{
    __this->remove_ReachedEnd(value);
}

// public generated void add_ReachedStart(Fuse.Controls.ScrollViewPager.ScrollViewPagerHandler value)
void ScrollViewPager__add_ReachedStart_fn(ScrollViewPager* __this, uDelegate* value)
{
    __this->add_ReachedStart(value);
}

// public generated void remove_ReachedStart(Fuse.Controls.ScrollViewPager.ScrollViewPagerHandler value)
void ScrollViewPager__remove_ReachedStart_fn(ScrollViewPager* __this, uDelegate* value)
{
    __this->remove_ReachedStart(value);
}

// private void RequestCheckPosition()
void ScrollViewPager__RequestCheckPosition_fn(ScrollViewPager* __this)
{
    __this->RequestCheckPosition();
}

// private void RequestCheckSizing()
void ScrollViewPager__RequestCheckSizing_fn(ScrollViewPager* __this)
{
    __this->RequestCheckSizing();
}

// public int get_Retain()
void ScrollViewPager__get_Retain_fn(ScrollViewPager* __this, int32_t* __retval)
{
    *__retval = __this->Retain();
}

// public void set_Retain(int value)
void ScrollViewPager__set_Retain_fn(ScrollViewPager* __this, int32_t* value)
{
    __this->Retain(*value);
}

// private void Uno.UX.IPropertyListener.OnPropertyChanged(Uno.UX.PropertyObject obj, Uno.UX.Selector prop)
void ScrollViewPager__UnoUXIPropertyListenerOnPropertyChanged_fn(ScrollViewPager* __this, ::g::Uno::UX::PropertyObject* obj, ::g::Uno::UX::Selector* prop)
{
    ::g::Uno::UX::Selector prop_ = *prop;

    if (obj != __this->_scrollable)
        return;

    if (::g::Uno::UX::Selector__op_Equality(prop_, ::g::Fuse::Controls::ScrollViewBase::ScrollPositionName()))
    {
        __this->RequestCheckPosition();
        __this->_lastActivityPosition = ::g::Fuse::UpdateManager::FrameIndex();
    }
    else if (::g::Uno::UX::Selector__op_Equality(prop_, ::g::Fuse::Controls::ScrollViewBase::SizingChanged()))
    {
        __this->RequestCheckSizing();
        __this->_lastActivitySizing = ::g::Fuse::UpdateManager::FrameIndex();
    }
}

// public void Check() [instance]
void ScrollViewPager::Check()
{
    _nearTrueEnd = false;
    _nearTrueStart = false;
    ::g::Fuse::UpdateManager::AddDeferredAction2(uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)ScrollViewPager__CheckSizing_fn, this), -1, 2);
}

// private void CheckPosition() [instance]
void ScrollViewPager::CheckPosition()
{
    if (_pendingSizing || (_scrollable == nullptr))
        return;

    _lastActivityPosition = ::g::Fuse::UpdateManager::FrameIndex();
    _pendingPosition = false;
    bool nearEnd = uPtr(_scrollable)->ToScalarPosition(::g::Uno::Float2__op_Division2(::g::Uno::Float2__op_Subtraction2(uPtr(_scrollable)->MaxScroll(), uPtr(_scrollable)->ScrollPosition()), uPtr(_scrollable)->ActualSize())) < EndRange();
    bool nearStart = uPtr(_scrollable)->ToScalarPosition(::g::Uno::Float2__op_Division2(::g::Uno::Float2__op_Subtraction2(uPtr(_scrollable)->ScrollPosition(), uPtr(_scrollable)->MinScroll()), uPtr(_scrollable)->ActualSize())) < EndRange();
    bool nearTrueEnd = false;
    bool nearTrueStart = false;

    if (nearEnd && nearStart)
    {
        nearTrueEnd = true;
        nearTrueStart = true;
    }
    else if (nearEnd)
    {
        int32_t offset = uPtr(Each())->Offset1();
        int32_t limit = uPtr(Each())->Limit1();
        int32_t count = uPtr(Each())->DataCount();

        if ((offset + limit) < count)
            uPtr(Each())->Offset1(offset + 1);
        else
            nearTrueEnd = true;
    }
    else if (nearStart)
    {
        int32_t offset1 = uPtr(Each())->Offset1();

        if (offset1 > 0)
            uPtr(Each())->Offset1(offset1 - 1);
        else
            nearTrueStart = true;
    }

    if ((nearTrueStart != _nearTrueStart) && nearTrueStart)
    {
        if (::g::Uno::Delegate::op_Inequality(ReachedStart1, nullptr))
            uPtr(ReachedStart1)->Invoke(2, this, (::g::Fuse::Controls::ScrollViewPagerArgs*)::g::Fuse::Controls::ScrollViewPagerArgs::New2());
    }

    _nearTrueStart = nearTrueStart;

    if ((nearTrueEnd != _nearTrueEnd) && nearTrueEnd)
    {
        if (::g::Uno::Delegate::op_Inequality(ReachedEnd1, nullptr))
            uPtr(ReachedEnd1)->Invoke(2, this, (::g::Fuse::Controls::ScrollViewPagerArgs*)::g::Fuse::Controls::ScrollViewPagerArgs::New2());
    }

    _nearTrueEnd = nearTrueEnd;
}

// private void CheckSizing() [instance]
void ScrollViewPager::CheckSizing()
{
    if (_scrollable == nullptr)
        return;

    _lastActivitySizing = ::g::Fuse::UpdateManager::FrameIndex();
    _pendingSizing = false;
    ::g::Uno::Float2 pages = ::g::Uno::Float2__op_Division2(uPtr(_scrollable)->ContentMarginSize(), uPtr(_scrollable)->ActualSize());
    float scalarPages = uPtr(_scrollable)->ToScalarPosition(pages);
    bool changed = false;

    if (scalarPages < (float)Retain())
    {
        int32_t count = uPtr(Each())->DataCount();
        int32_t offset = uPtr(Each())->Offset1();
        int32_t limit = uPtr(Each())->Limit1();

        if ((offset + limit) < count)
        {
            uPtr(Each())->Limit1(limit + 1);
            changed = true;
        }
    }
    else if ((scalarPages > (float)Retain()) && (uPtr(_scrollable)->ToScalarPosition(uPtr(_scrollable)->ActualSize()) < uPtr(_scrollable)->ToScalarPosition(_prevActualSize)))
    {
        int32_t limit1 = uPtr(Each())->Limit1();

        if (limit1 > 1)
        {
            uPtr(Each())->Limit1(limit1 - 1);
            changed = true;
        }
    }

    if (!changed)
    {
        CheckPosition();
        return;
    }

    _pendingSizing = true;
    ::g::Fuse::UpdateManager::PerformNextFrame(uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)ScrollViewPager__CheckSizing_fn, this), 0, 1);
}

// public Fuse.Reactive.Each get_Each() [instance]
::g::Fuse::Reactive::Each* ScrollViewPager::Each()
{
    return _each;
}

// public void set_Each(Fuse.Reactive.Each value) [instance]
void ScrollViewPager::Each(::g::Fuse::Reactive::Each* value)
{
    _each = value;
}

// public float get_EndRange() [instance]
float ScrollViewPager::EndRange()
{
    return _endRange;
}

// public void set_EndRange(float value) [instance]
void ScrollViewPager::EndRange(float value)
{
    if (_endRange == value)
        return;

    _endRange = value;
}

// public generated void add_ReachedEnd(Fuse.Controls.ScrollViewPager.ScrollViewPagerHandler value) [instance]
void ScrollViewPager::add_ReachedEnd(uDelegate* value)
{
    ReachedEnd1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(ReachedEnd1, value), ScrollViewPager__ScrollViewPagerHandler_typeof());
}

// public generated void remove_ReachedEnd(Fuse.Controls.ScrollViewPager.ScrollViewPagerHandler value) [instance]
void ScrollViewPager::remove_ReachedEnd(uDelegate* value)
{
    ReachedEnd1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(ReachedEnd1, value), ScrollViewPager__ScrollViewPagerHandler_typeof());
}

// public generated void add_ReachedStart(Fuse.Controls.ScrollViewPager.ScrollViewPagerHandler value) [instance]
void ScrollViewPager::add_ReachedStart(uDelegate* value)
{
    ReachedStart1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(ReachedStart1, value), ScrollViewPager__ScrollViewPagerHandler_typeof());
}

// public generated void remove_ReachedStart(Fuse.Controls.ScrollViewPager.ScrollViewPagerHandler value) [instance]
void ScrollViewPager::remove_ReachedStart(uDelegate* value)
{
    ReachedStart1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(ReachedStart1, value), ScrollViewPager__ScrollViewPagerHandler_typeof());
}

// private void RequestCheckPosition() [instance]
void ScrollViewPager::RequestCheckPosition()
{
    if (!_pendingPosition && !_pendingSizing)
    {
        ::g::Fuse::UpdateManager::AddDeferredAction2(uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)ScrollViewPager__CheckPosition_fn, this), -1, 2);
        _pendingPosition = true;
    }
}

// private void RequestCheckSizing() [instance]
void ScrollViewPager::RequestCheckSizing()
{
    if (!_pendingSizing)
    {
        ::g::Fuse::UpdateManager::AddDeferredAction2(uDelegate::New(::TYPES[16/*Uno.Action*/], (void*)ScrollViewPager__CheckSizing_fn, this), -1, 2);
        _pendingSizing = true;
    }
}

// public int get_Retain() [instance]
int32_t ScrollViewPager::Retain()
{
    return _retain;
}

// public void set_Retain(int value) [instance]
void ScrollViewPager::Retain(int32_t value)
{
    if (_retain == value)
        return;

    _retain = value;
}

// private static void check(Fuse.Controls.ScrollViewPager s) [static]
void ScrollViewPager::check(ScrollViewPager* s)
{
    ScrollViewPager_typeof()->Init();
    uPtr(s)->Check();
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.ScrollView/ScrollViewPager.uno
// ------------------------------------------------------------------------------------

// public sealed class ScrollViewPagerArgs
// {
static void ScrollViewPagerArgs_build(uType* type)
{
}

uType* ScrollViewPagerArgs_typeof()
{
    static uSStrong<uType*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Uno::EventArgs_typeof();
    options.ObjectSize = sizeof(ScrollViewPagerArgs);
    options.TypeSize = sizeof(uType);
    type = uClassType::New("Fuse.Controls.ScrollViewPagerArgs", options);
    type->fp_build_ = ScrollViewPagerArgs_build;
    type->fp_ctor_ = (void*)ScrollViewPagerArgs__New2_fn;
    return type;
}

// public generated ScrollViewPagerArgs()
void ScrollViewPagerArgs__ctor_1_fn(ScrollViewPagerArgs* __this)
{
    __this->ctor_1();
}

// public generated ScrollViewPagerArgs New()
void ScrollViewPagerArgs__New2_fn(ScrollViewPagerArgs** __retval)
{
    *__retval = ScrollViewPagerArgs::New2();
}

// public generated ScrollViewPagerArgs() [instance]
void ScrollViewPagerArgs::ctor_1()
{
    ctor_();
}

// public generated ScrollViewPagerArgs New() [static]
ScrollViewPagerArgs* ScrollViewPagerArgs::New2()
{
    ScrollViewPagerArgs* obj1 = (ScrollViewPagerArgs*)uNew(ScrollViewPagerArgs_typeof());
    obj1->ctor_1();
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.ScrollView/ScrollViewPager.uno
// ------------------------------------------------------------------------------------

// public delegate void ScrollViewPager.ScrollViewPagerHandler(object s, Fuse.Controls.ScrollViewPagerArgs args)
uDelegateType* ScrollViewPager__ScrollViewPagerHandler_typeof()
{
    static uSStrong<uDelegateType*> type;
    if (type != nullptr) return type;

    type = uDelegateType::New("Fuse.Controls.ScrollViewPager.ScrollViewPagerHandler", 2, 0);
    type->SetSignature(uVoid_typeof(),
        uObject_typeof(),
        ::g::Fuse::Controls::ScrollViewPagerArgs_typeof());
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/SegmentedShape.uno
// ------------------------------------------------------------------------------------------

// public abstract class SegmentedShape
// {
// static generated SegmentedShape()
static void SegmentedShape__cctor_4_fn(uType* __type)
{
    SegmentedShape::NamePathStart_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[94/*"PathStart"*/]);
    SegmentedShape::NamePathEnd_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[95/*"PathEnd"*/]);
    SegmentedShape::NamePathLength_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[96/*"PathLength"*/]);
}

static void SegmentedShape_build(uType* type)
{
    ::STRINGS[94] = uString::Const("PathStart");
    ::STRINGS[95] = uString::Const("PathEnd");
    ::STRINGS[96] = uString::Const("PathLength");
    ::STRINGS[97] = uString::Const("Unsupported Path start=");
    ::STRINGS[98] = uString::Const(", end=");
    ::STRINGS[99] = uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/SegmentedShape.uno");
    ::STRINGS[100] = uString::Const("CreatePartialSurfacePath");
    ::TYPES[53] = ::g::Uno::Collections::List_typeof()->MakeType(::g::Fuse::Drawing::LineSegment_typeof(), nullptr);
    ::TYPES[16] = ::g::Uno::Action_typeof();
    type->SetDependencies(
        ::g::Uno::Math_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(SegmentedShape_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(SegmentedShape_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(SegmentedShape_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(SegmentedShape_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(SegmentedShape_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(SegmentedShape_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(SegmentedShape_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(SegmentedShape_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(SegmentedShape_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(SegmentedShape_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(SegmentedShape_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(SegmentedShape_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(SegmentedShape_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(SegmentedShape_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(SegmentedShape_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(SegmentedShape_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(SegmentedShape_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(SegmentedShape_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(SegmentedShape_type, interface18),
        ::g::Fuse::Drawing::IDrawObjectWatcherFeedback_typeof(), offsetof(SegmentedShape_type, interface19));
    type->SetFields(116,
        ::g::Uno::Float_typeof(), offsetof(SegmentedShape, _pathStart), 0,
        ::g::Uno::Float_typeof(), offsetof(SegmentedShape, _pathEnd), 0,
        ::g::Uno::Float_typeof(), offsetof(SegmentedShape, _pathLength), 0,
        ::g::Uno::Bool_typeof(), offsetof(SegmentedShape, _hasPathLength), 0,
        ::g::Fuse::Controls::PathMeasureMode_typeof(), offsetof(SegmentedShape, _pathMeasureMode), 0,
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Drawing::LineSegment_typeof(), nullptr), offsetof(SegmentedShape, _segments), 0,
        ::g::Fuse::Drawing::LineSplitter_typeof(), offsetof(SegmentedShape, _splitter), 0,
        ::TYPES[16/*Uno.Action*/], offsetof(SegmentedShape, SegmentsChanged1), 0,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&SegmentedShape::NamePathStart_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&SegmentedShape::NamePathEnd_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&SegmentedShape::NamePathLength_, uFieldFlagsStatic);
}

SegmentedShape_type* SegmentedShape_typeof()
{
    static uSStrong<SegmentedShape_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::Shape_typeof();
    options.FieldCount = 127;
    options.InterfaceCount = 20;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(SegmentedShape);
    options.TypeSize = sizeof(SegmentedShape_type);
    type = (SegmentedShape_type*)uClassType::New("Fuse.Controls.SegmentedShape", options);
    type->fp_build_ = SegmentedShape_build;
    type->fp_cctor_ = SegmentedShape__cctor_4_fn;
    type->fp_CreateSurfacePath = (void(*)(::g::Fuse::Controls::Shape*, ::g::Fuse::Drawing::Surface*, ::g::Fuse::Drawing::SurfacePath**))SegmentedShape__CreateSurfacePath_fn;
    type->fp_InvalidateSurfacePath = (void(*)(::g::Fuse::Controls::Shape*))SegmentedShape__InvalidateSurfacePath_fn;
    type->interface19.fp_Changed = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackChanged_fn;
    type->interface19.fp_Prepare = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackPrepare_fn;
    type->interface19.fp_Unprepare = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackUnprepare_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Shape__OnPropertyChanged2_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// private Fuse.Drawing.SurfacePath CreatePartialSurfacePath(Fuse.Drawing.Surface surface)
void SegmentedShape__CreatePartialSurfacePath_fn(SegmentedShape* __this, ::g::Fuse::Drawing::Surface* surface, ::g::Fuse::Drawing::SurfacePath** __retval)
{
    *__retval = __this->CreatePartialSurfacePath(surface);
}

// protected override sealed Fuse.Drawing.SurfacePath CreateSurfacePath(Fuse.Drawing.Surface surface)
void SegmentedShape__CreateSurfacePath_fn(SegmentedShape* __this, ::g::Fuse::Drawing::Surface* surface, ::g::Fuse::Drawing::SurfacePath** __retval)
{
    if (((__this->PathStart() != 0.0f) || (__this->PathEnd() != 1.0f)) || __this->_hasPathLength)
        return *__retval = __this->CreatePartialSurfacePath(surface), void();

    return *__retval = uPtr(surface)->CreatePath(__this->Segments(), 0), void();
}

// private float get_EffectivePathEnd()
void SegmentedShape__get_EffectivePathEnd_fn(SegmentedShape* __this, float* __retval)
{
    *__retval = __this->EffectivePathEnd();
}

// protected override void InvalidateSurfacePath()
void SegmentedShape__InvalidateSurfacePath_fn(SegmentedShape* __this)
{
    ::g::Fuse::Controls::Shape__InvalidateSurfacePath_fn(__this);
    __this->_splitter = nullptr;
    __this->_segments = nullptr;
    __this->InvalidateVisual();

    if (::g::Uno::Delegate::op_Inequality(__this->SegmentsChanged1, nullptr))
        uPtr(__this->SegmentsChanged1)->InvokeVoid();
}

// public float get_PathEnd()
void SegmentedShape__get_PathEnd_fn(SegmentedShape* __this, float* __retval)
{
    *__retval = __this->PathEnd();
}

// public void set_PathEnd(float value)
void SegmentedShape__set_PathEnd_fn(SegmentedShape* __this, float* value)
{
    __this->PathEnd(*value);
}

// public Fuse.Controls.PathMeasureMode get_PathMeasureMode()
void SegmentedShape__get_PathMeasureMode_fn(SegmentedShape* __this, int32_t* __retval)
{
    *__retval = __this->PathMeasureMode();
}

// public void set_PathMeasureMode(Fuse.Controls.PathMeasureMode value)
void SegmentedShape__set_PathMeasureMode_fn(SegmentedShape* __this, int32_t* value)
{
    __this->PathMeasureMode(*value);
}

// public float get_PathStart()
void SegmentedShape__get_PathStart_fn(SegmentedShape* __this, float* __retval)
{
    *__retval = __this->PathStart();
}

// public void set_PathStart(float value)
void SegmentedShape__set_PathStart_fn(SegmentedShape* __this, float* value)
{
    __this->PathStart(*value);
}

// internal float2 PointAtDistance(float distance)
void SegmentedShape__PointAtDistance_fn(SegmentedShape* __this, float* distance, ::g::Uno::Float2* __retval)
{
    *__retval = __this->PointAtDistance(*distance);
}

// internal float2 PointAtTime(float time)
void SegmentedShape__PointAtTime_fn(SegmentedShape* __this, float* time, ::g::Uno::Float2* __retval)
{
    *__retval = __this->PointAtTime(*time);
}

// private Uno.Collections.IList<Fuse.Drawing.LineSegment> get_Segments()
void SegmentedShape__get_Segments_fn(SegmentedShape* __this, uObject** __retval)
{
    *__retval = __this->Segments();
}

// internal generated void add_SegmentsChanged(Uno.Action value)
void SegmentedShape__add_SegmentsChanged_fn(SegmentedShape* __this, uDelegate* value)
{
    __this->add_SegmentsChanged(value);
}

// internal generated void remove_SegmentsChanged(Uno.Action value)
void SegmentedShape__remove_SegmentsChanged_fn(SegmentedShape* __this, uDelegate* value)
{
    __this->remove_SegmentsChanged(value);
}

// private Fuse.Drawing.LineSplitter get_Splitter()
void SegmentedShape__get_Splitter_fn(SegmentedShape* __this, ::g::Fuse::Drawing::LineSplitter** __retval)
{
    *__retval = __this->Splitter();
}

// internal float2 TangentAtDistance(float distance)
void SegmentedShape__TangentAtDistance_fn(SegmentedShape* __this, float* distance, ::g::Uno::Float2* __retval)
{
    *__retval = __this->TangentAtDistance(*distance);
}

// internal float2 TangentAtTime(float time)
void SegmentedShape__TangentAtTime_fn(SegmentedShape* __this, float* time, ::g::Uno::Float2* __retval)
{
    *__retval = __this->TangentAtTime(*time);
}

::g::Uno::UX::Selector SegmentedShape::NamePathStart_;
::g::Uno::UX::Selector SegmentedShape::NamePathEnd_;
::g::Uno::UX::Selector SegmentedShape::NamePathLength_;

// private Fuse.Drawing.SurfacePath CreatePartialSurfacePath(Fuse.Drawing.Surface surface) [instance]
::g::Fuse::Drawing::SurfacePath* SegmentedShape::CreatePartialSurfacePath(::g::Fuse::Drawing::Surface* surface)
{
    ::g::Uno::Collections::List* list = (::g::Uno::Collections::List*)::g::Uno::Collections::List::New1(::TYPES[53/*Uno.Collections.List<Fuse.Drawing.LineSegment>*/]);
    float start = PathStart();
    float end = EffectivePathEnd();

    if ((start < 0.0f) || (start > 1.0f))
    {
        float inc = -::g::Uno::Math::Floor1(start);
        start = start + inc;
        end = end + inc;
    }

    if ((end < start) || ((end - start) > 1.0f))
    {
        ::g::Fuse::Diagnostics::UserError(::g::Uno::String::op_Addition1(::g::Uno::String::op_Addition2(::g::Uno::String::op_Addition1(::STRINGS[97/*"Unsupported...*/], uBox(::g::Uno::Float_typeof(), start)), ::STRINGS[98/*", end="*/]), uBox(::g::Uno::Float_typeof(), end)), this, ::STRINGS[99/*"/Users/mort...*/], 192, ::STRINGS[100/*"CreateParti...*/], nullptr);
        return uPtr(surface)->CreatePath((uObject*)list, 0);
    }

    float startT = start;
    float endT = end;

    if (PathMeasureMode() == 1)
    {
        startT = uPtr(Splitter())->DistanceToTime(startT);
        endT = uPtr(Splitter())->DistanceToTime(endT);
    }

    uPtr(Splitter())->SplitTime(startT, endT, (uObject*)list);
    return uPtr(surface)->CreatePath((uObject*)list, 0);
}

// private float get_EffectivePathEnd() [instance]
float SegmentedShape::EffectivePathEnd()
{
    return _hasPathLength ? _pathStart + _pathLength : _pathEnd;
}

// public float get_PathEnd() [instance]
float SegmentedShape::PathEnd()
{
    return _pathEnd;
}

// public void set_PathEnd(float value) [instance]
void SegmentedShape::PathEnd(float value)
{
    if ((_pathEnd == value) && !_hasPathLength)
        return;

    _pathEnd = value;
    _hasPathLength = false;
    OnPropertyChanged(SegmentedShape::NamePathEnd_);
    InvalidateSurfacePath();
}

// public Fuse.Controls.PathMeasureMode get_PathMeasureMode() [instance]
int32_t SegmentedShape::PathMeasureMode()
{
    return _pathMeasureMode;
}

// public void set_PathMeasureMode(Fuse.Controls.PathMeasureMode value) [instance]
void SegmentedShape::PathMeasureMode(int32_t value)
{
    if (value == _pathMeasureMode)
        return;

    _pathMeasureMode = value;
    InvalidateSurfacePath();
}

// public float get_PathStart() [instance]
float SegmentedShape::PathStart()
{
    return _pathStart;
}

// public void set_PathStart(float value) [instance]
void SegmentedShape::PathStart(float value)
{
    if (_pathStart == value)
        return;

    _pathStart = value;
    OnPropertyChanged(SegmentedShape::NamePathStart_);
    InvalidateSurfacePath();
}

// internal float2 PointAtDistance(float distance) [instance]
::g::Uno::Float2 SegmentedShape::PointAtDistance(float distance)
{
    float t = uPtr(Splitter())->DistanceToTime(distance);
    return uPtr(Splitter())->PointAtTime(t);
}

// internal float2 PointAtTime(float time) [instance]
::g::Uno::Float2 SegmentedShape::PointAtTime(float time)
{
    return uPtr(Splitter())->PointAtTime(time);
}

// private Uno.Collections.IList<Fuse.Drawing.LineSegment> get_Segments() [instance]
uObject* SegmentedShape::Segments()
{
    if (_segments == nullptr)
        _segments = GetSegments();

    return _segments;
}

// internal generated void add_SegmentsChanged(Uno.Action value) [instance]
void SegmentedShape::add_SegmentsChanged(uDelegate* value)
{
    SegmentsChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(SegmentsChanged1, value), ::TYPES[16/*Uno.Action*/]);
}

// internal generated void remove_SegmentsChanged(Uno.Action value) [instance]
void SegmentedShape::remove_SegmentsChanged(uDelegate* value)
{
    SegmentsChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(SegmentsChanged1, value), ::TYPES[16/*Uno.Action*/]);
}

// private Fuse.Drawing.LineSplitter get_Splitter() [instance]
::g::Fuse::Drawing::LineSplitter* SegmentedShape::Splitter()
{
    if (_splitter == nullptr)
        _splitter = ::g::Fuse::Drawing::LineSplitter::New1(Segments());

    return _splitter;
}

// internal float2 TangentAtDistance(float distance) [instance]
::g::Uno::Float2 SegmentedShape::TangentAtDistance(float distance)
{
    float t = uPtr(Splitter())->DistanceToTime(distance);
    return ::g::Uno::Vector::Normalize(uPtr(Splitter())->DirectionAtTime(t));
}

// internal float2 TangentAtTime(float time) [instance]
::g::Uno::Float2 SegmentedShape::TangentAtTime(float time)
{
    return ::g::Uno::Vector::Normalize(uPtr(Splitter())->DirectionAtTime(time));
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Shape.Resources.uno
// -------------------------------------------------------------------------------------------

// public interfacemodifiers class Shape
// {
// static generated Shape()
static void Shape__cctor_3_fn(uType* __type)
{
    ::g::Fuse::Properties_typeof()->Init();
    Shape::_loadingResourcesHandle_ = ::g::Fuse::Properties::CreateHandle();
    Shape::ColorPropertyName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[56/*"Color"*/]);
    Shape::_widthName_ = ::g::Uno::UX::Selector__op_Implicit(uString::Const("Width"));
    Shape::_offsetName_ = ::g::Uno::UX::Selector__op_Implicit(uString::Const("Offset"));
}

static void Shape_build(uType* type)
{
    type->SetDependencies(
        ::g::Fuse::Triggers::BusyTask_typeof(),
        ::g::Fuse::ILoadingStatic_typeof(),
        ::g::Uno::Math_typeof(),
        ::g::Fuse::Drawing::SurfaceManager_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(Shape_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(Shape_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(Shape_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(Shape_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(Shape_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(Shape_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(Shape_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(Shape_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(Shape_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(Shape_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(Shape_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(Shape_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(Shape_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(Shape_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(Shape_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(Shape_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(Shape_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(Shape_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(Shape_type, interface18),
        ::g::Fuse::Drawing::IDrawObjectWatcherFeedback_typeof(), offsetof(Shape_type, interface19));
    type->SetFields(108,
        ::g::Fuse::Triggers::BusyTask_typeof(), offsetof(Shape, _loadingResourceTask), 0,
        ::g::Uno::Bool_typeof(), offsetof(Shape, _surfacePathDirty), 0,
        ::g::Fuse::Drawing::SurfacePath_typeof(), offsetof(Shape, _surfacePath), 0,
        ::g::Uno::Collections::RootableList_typeof()->MakeType(::g::Fuse::Drawing::Brush_typeof(), nullptr), offsetof(Shape, _fills), 0,
        ::g::Uno::Collections::RootableList_typeof()->MakeType(::g::Fuse::Drawing::Stroke_typeof(), nullptr), offsetof(Shape, _strokes), 0,
        ::g::Uno::Float_typeof(), offsetof(Shape, _smoothness), 0,
        ::g::Fuse::Drawing::Surface_typeof(), offsetof(Shape, _surface1), 0,
        ::g::Fuse::Drawing::DrawObjectWatcher_typeof(), offsetof(Shape, _watcher), 0,
        ::g::Fuse::PropertyHandle_typeof(), (uintptr_t)&Shape::_loadingResourcesHandle_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&Shape::ColorPropertyName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&Shape::_widthName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&Shape::_offsetName_, uFieldFlagsStatic);
}

Shape_type* Shape_typeof()
{
    static uSStrong<Shape_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::LayoutControl_typeof();
    options.FieldCount = 120;
    options.InterfaceCount = 20;
    options.DependencyCount = 4;
    options.ObjectSize = sizeof(Shape);
    options.TypeSize = sizeof(Shape_type);
    type = (Shape_type*)uClassType::New("Fuse.Controls.Shape", options);
    type->fp_build_ = Shape_build;
    type->fp_cctor_ = Shape__cctor_3_fn;
    type->fp_ArrangePaddingBox = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::LayoutParams*))Shape__ArrangePaddingBox_fn;
    type->fp_CalcRenderBounds = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::VisualBounds**))Shape__CalcRenderBounds_fn;
    type->fp_CalcShapeExtents = Shape__CalcShapeExtents_fn;
    type->fp_DrawFill = Shape__DrawFill_fn;
    type->fp_DrawStroke = Shape__DrawStroke_fn;
    type->fp_DrawVisual = (void(*)(::g::Fuse::Controls::Control*, ::g::Fuse::DrawContext*))Shape__DrawVisual_fn;
    type->fp_FastTrackDrawWithOpacity = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::DrawContext*, bool*))Shape__FastTrackDrawWithOpacity_fn;
    type->fp_get_HitTestLocalVisualBounds = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::VisualBounds**))Shape__get_HitTestLocalVisualBounds_fn;
    type->fp_InvalidateSurfacePath = Shape__InvalidateSurfacePath_fn;
    type->fp_get_NeedSurface = Shape__get_NeedSurface_fn;
    type->fp_OnPropertyChanged2 = (void(*)(::g::Fuse::Visual*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))Shape__OnPropertyChanged2_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))Shape__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))Shape__OnUnrooted_fn;
    type->fp_PushPropertiesToNativeView = (void(*)(::g::Fuse::Controls::Control*))Shape__PushPropertiesToNativeView_fn;
    type->interface19.fp_Changed = (void(*)(uObject*, uObject*))Shape__FuseDrawingIDrawObjectWatcherFeedbackChanged_fn;
    type->interface19.fp_Prepare = (void(*)(uObject*, uObject*))Shape__FuseDrawingIDrawObjectWatcherFeedbackPrepare_fn;
    type->interface19.fp_Unprepare = (void(*)(uObject*, uObject*))Shape__FuseDrawingIDrawObjectWatcherFeedbackUnprepare_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))Shape__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))Shape__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))Shape__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))Shape__OnPropertyChanged2_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// protected generated Shape()
void Shape__ctor_6_fn(Shape* __this)
{
    __this->ctor_6();
}

// internal void AddLoadingResource(Uno.UX.PropertyObject res)
void Shape__AddLoadingResource_fn(Shape* __this, ::g::Uno::UX::PropertyObject* res)
{
    __this->AddLoadingResource(res);
}

// protected override sealed void ArrangePaddingBox(Fuse.LayoutParams lp)
void Shape__ArrangePaddingBox_fn(Shape* __this, ::g::Fuse::LayoutParams* lp)
{
    ::g::Fuse::LayoutParams lp_ = *lp;
    ::g::Fuse::Controls::LayoutControl__ArrangePaddingBox_fn(__this, uCRef(lp_));
    __this->InvalidateSurfacePath();
}

// protected override sealed Fuse.VisualBounds CalcRenderBounds()
void Shape__CalcRenderBounds_fn(Shape* __this, ::g::Fuse::VisualBounds** __retval)
{
    ::g::Fuse::VisualBounds* ret16;
    ::g::Fuse::Drawing::Stroke* ret17;
    ::g::Fuse::VisualBounds* r = (::g::Fuse::Controls::Control__CalcRenderBounds_fn(__this, &ret16), ret16);

    if (!(__this->HasStrokes() || __this->HasFills()))
        return *__retval = r, void();

    ::g::Uno::Rect extents = __this->CalcShapeExtents();
    float adjust = 0.0f;

    if (__this->HasStrokes())
    {
        uObject* enum10 = (uObject*)::g::Uno::Collections::IEnumerable::GetEnumerator(uInterface(uPtr(__this->Strokes()), ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::TYPES[40/*Fuse.Drawing.Stroke*/], nullptr)));

        {
            try
            {
                {
                    while (::g::Uno::Collections::IEnumerator::MoveNext(uInterface(uPtr(enum10), ::g::Uno::Collections::IEnumerator_typeof())))
                    {
                        ::g::Fuse::Drawing::Stroke* stroke = (::g::Uno::Collections::IEnumerator1::get_Current_ex(uInterface(uPtr(enum10), ::g::Uno::Collections::IEnumerator1_typeof()->MakeType(::TYPES[40/*Fuse.Drawing.Stroke*/], nullptr)), &ret17), ret17);
                        ::g::Uno::Float2 extent = uPtr(stroke)->GetDeviceAdjusted(::g::Fuse::ICommonViewport::PixelsPerPoint(uInterface(uPtr(__this->Viewport()), ::TYPES[36/*Fuse.ICommonViewport*/])));
                        float m = extent.Item(1) + ::g::Uno::Math::Max1(extent.Item(0) * uPtr(__this->Stroke())->LineJoinMiterLimit(), ::g::Uno::Vector::Length(::g::Uno::Float2__New1(extent.Item(0))));
                        adjust = ::g::Uno::Math::Max1(adjust, m);
                    }
                }
            }

            catch (const uThrowable& __t)
            {
                {
                    ::g::Uno::IDisposable::Dispose(uInterface(uPtr(enum10), ::g::Uno::IDisposable_typeof()));
                }
                                throw __t;
                goto __after_finally_0;
            }

            {
                ::g::Uno::IDisposable::Dispose(uInterface(uPtr(enum10), ::g::Uno::IDisposable_typeof()));
            }
            __after_finally_0:;
        }
    }

    adjust = adjust + (__this->Smoothness() - 1.0f);
    extents.Minimum(::g::Uno::Float2__op_Subtraction1(extents.Minimum(), adjust));
    extents.Maximum(::g::Uno::Float2__op_Addition1(extents.Maximum(), adjust));
    r = uPtr(r)->AddRect1(extents);
    return *__retval = r, void();
}

// protected virtual Uno.Rect CalcShapeExtents()
void Shape__CalcShapeExtents_fn(Shape* __this, ::g::Uno::Rect* __retval)
{
    return *__retval = ::g::Uno::Rect__New2(::g::Uno::Float2__New1(0.0f), __this->ActualSize()), void();
}

// private void CheckStatus()
void Shape__CheckStatus_fn(Shape* __this)
{
    __this->CheckStatus();
}

// public float4 get_Color()
void Shape__get_Color_fn(Shape* __this, ::g::Uno::Float4* __retval)
{
    *__retval = __this->Color();
}

// public void set_Color(float4 value)
void Shape__set_Color_fn(Shape* __this, ::g::Uno::Float4* value)
{
    __this->Color(*value);
}

// protected virtual void DrawFill(Fuse.DrawContext dc, Fuse.Drawing.Brush fill)
void Shape__DrawFill_fn(Shape* __this, ::g::Fuse::DrawContext* dc, ::g::Fuse::Drawing::Brush* fill)
{
}

// protected virtual void DrawStroke(Fuse.DrawContext dc, Fuse.Drawing.Stroke stroke)
void Shape__DrawStroke_fn(Shape* __this, ::g::Fuse::DrawContext* dc, ::g::Fuse::Drawing::Stroke* stroke)
{
}

// protected override sealed void DrawVisual(Fuse.DrawContext dc)
void Shape__DrawVisual_fn(Shape* __this, ::g::Fuse::DrawContext* dc)
{
    ::g::Fuse::Drawing::Brush* ret19;
    ::g::Fuse::Drawing::Stroke* ret20;

    if (__this->_surface1 != nullptr)
    {
        uPtr(__this->_surface1)->Draw(dc, __this, (uObject*)__this);
        return;
    }

    __this->PrepareDraw(dc, __this->ActualSize());

    if (__this->HasFills())
    {
        uObject* enum8 = (uObject*)::g::Uno::Collections::IEnumerable::GetEnumerator(uInterface(uPtr(__this->Fills()), ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::TYPES[41/*Fuse.Drawing.Brush*/], nullptr)));

        {
            try
            {
                {
                    while (::g::Uno::Collections::IEnumerator::MoveNext(uInterface(uPtr(enum8), ::g::Uno::Collections::IEnumerator_typeof())))
                    {
                        ::g::Fuse::Drawing::Brush* fill = (::g::Uno::Collections::IEnumerator1::get_Current_ex(uInterface(uPtr(enum8), ::g::Uno::Collections::IEnumerator1_typeof()->MakeType(::TYPES[41/*Fuse.Drawing.Brush*/], nullptr)), &ret19), ret19);
                        __this->DrawFill(dc, fill);
                    }
                }
            }

            catch (const uThrowable& __t)
            {
                {
                    ::g::Uno::IDisposable::Dispose(uInterface(uPtr(enum8), ::g::Uno::IDisposable_typeof()));
                }
                                throw __t;
                goto __after_finally_1;
            }

            {
                ::g::Uno::IDisposable::Dispose(uInterface(uPtr(enum8), ::g::Uno::IDisposable_typeof()));
            }
            __after_finally_1:;
        }
    }

    if (__this->HasStrokes())
    {
        uObject* enum9 = (uObject*)::g::Uno::Collections::IEnumerable::GetEnumerator(uInterface(uPtr(__this->Strokes()), ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::TYPES[40/*Fuse.Drawing.Stroke*/], nullptr)));

        {
            try
            {
                {
                    while (::g::Uno::Collections::IEnumerator::MoveNext(uInterface(uPtr(enum9), ::g::Uno::Collections::IEnumerator_typeof())))
                    {
                        ::g::Fuse::Drawing::Stroke* stroke = (::g::Uno::Collections::IEnumerator1::get_Current_ex(uInterface(uPtr(enum9), ::g::Uno::Collections::IEnumerator1_typeof()->MakeType(::TYPES[40/*Fuse.Drawing.Stroke*/], nullptr)), &ret20), ret20);
                        __this->DrawStroke(dc, stroke);
                    }
                }
            }

            catch (const uThrowable& __t)
            {
                {
                    ::g::Uno::IDisposable::Dispose(uInterface(uPtr(enum9), ::g::Uno::IDisposable_typeof()));
                }
                                throw __t;
                goto __after_finally_2;
            }

            {
                ::g::Uno::IDisposable::Dispose(uInterface(uPtr(enum9), ::g::Uno::IDisposable_typeof()));
            }
            __after_finally_2:;
        }
    }
}

// protected override sealed bool FastTrackDrawWithOpacity(Fuse.DrawContext dc)
void Shape__FastTrackDrawWithOpacity_fn(Shape* __this, ::g::Fuse::DrawContext* dc, bool* __retval)
{
    return *__retval = false, void();
}

// public Fuse.Drawing.Brush get_Fill()
void Shape__get_Fill_fn(Shape* __this, ::g::Fuse::Drawing::Brush** __retval)
{
    *__retval = __this->Fill();
}

// public void set_Fill(Fuse.Drawing.Brush value)
void Shape__set_Fill_fn(Shape* __this, ::g::Fuse::Drawing::Brush* value)
{
    __this->Fill(value);
}

// public Uno.Collections.IList<Fuse.Drawing.Brush> get_Fills()
void Shape__get_Fills_fn(Shape* __this, uObject** __retval)
{
    *__retval = __this->Fills();
}

// private void Fuse.Drawing.IDrawObjectWatcherFeedback.Changed(object obj)
void Shape__FuseDrawingIDrawObjectWatcherFeedbackChanged_fn(Shape* __this, uObject* obj)
{
    if (uIs(obj, ::TYPES[40/*Fuse.Drawing.Stroke*/]))
        __this->InvalidateLayout(2);

    __this->InvalidateVisual();
}

// private void Fuse.Drawing.IDrawObjectWatcherFeedback.Prepare(object obj)
void Shape__FuseDrawingIDrawObjectWatcherFeedbackPrepare_fn(Shape* __this, uObject* obj)
{
    if (__this->_surface1 == nullptr)
    {
        ::g::Fuse::Diagnostics::InternalError(::STRINGS[44/*"Prepare wit...*/], __this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Shape.Surface.uno"), 57, ::STRINGS[45/*"Fuse.Drawin...*/]);
        return;
    }

    ::g::Fuse::Drawing::Brush* b = uAs< ::g::Fuse::Drawing::Brush*>(obj, ::TYPES[41/*Fuse.Drawing.Brush*/]);

    if (b != nullptr)
        uPtr(__this->_surface1)->Prepare(b);
}

// private void Fuse.Drawing.IDrawObjectWatcherFeedback.Unprepare(object obj)
void Shape__FuseDrawingIDrawObjectWatcherFeedbackUnprepare_fn(Shape* __this, uObject* obj)
{
    if (__this->_surface1 == nullptr)
    {
        ::g::Fuse::Diagnostics::InternalError(::STRINGS[44/*"Prepare wit...*/], __this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Shape.Surface.uno"), 70, ::STRINGS[46/*"Fuse.Drawin...*/]);
        return;
    }

    ::g::Fuse::Drawing::Brush* b = uAs< ::g::Fuse::Drawing::Brush*>(obj, ::TYPES[41/*Fuse.Drawing.Brush*/]);

    if (b != nullptr)
        uPtr(__this->_surface1)->Unprepare(b);
}

// private void Fuse.Drawing.ISurfaceDrawable.Draw(Fuse.Drawing.Surface surface)
void Shape__FuseDrawingISurfaceDrawableDraw_fn(Shape* __this, ::g::Fuse::Drawing::Surface* surface)
{
    ::g::Fuse::Drawing::Brush* ret21;
    ::g::Fuse::Drawing::Stroke* ret22;
    ::g::Fuse::Drawing::Brush* ret23;
    ::g::Fuse::Drawing::Stroke* ret24;
    uPtr(__this->Watcher())->Reset();

    if (__this->HasFills())
    {
        uObject* enum4 = (uObject*)::g::Uno::Collections::IEnumerable::GetEnumerator(uInterface(uPtr(__this->Fills()), ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::TYPES[41/*Fuse.Drawing.Brush*/], nullptr)));

        {
            try
            {
                {
                    while (::g::Uno::Collections::IEnumerator::MoveNext(uInterface(uPtr(enum4), ::g::Uno::Collections::IEnumerator_typeof())))
                    {
                        ::g::Fuse::Drawing::Brush* fill = (::g::Uno::Collections::IEnumerator1::get_Current_ex(uInterface(uPtr(enum4), ::g::Uno::Collections::IEnumerator1_typeof()->MakeType(::TYPES[41/*Fuse.Drawing.Brush*/], nullptr)), &ret21), ret21);
                        uPtr(__this->Watcher())->Add(fill);
                    }
                }
            }

            catch (const uThrowable& __t)
            {
                {
                    ::g::Uno::IDisposable::Dispose(uInterface(uPtr(enum4), ::g::Uno::IDisposable_typeof()));
                }
                                throw __t;
                goto __after_finally_3;
            }

            {
                ::g::Uno::IDisposable::Dispose(uInterface(uPtr(enum4), ::g::Uno::IDisposable_typeof()));
            }
            __after_finally_3:;
        }
    }

    if (__this->HasStrokes())
    {
        uObject* enum5 = (uObject*)::g::Uno::Collections::IEnumerable::GetEnumerator(uInterface(uPtr(__this->Strokes()), ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::TYPES[40/*Fuse.Drawing.Stroke*/], nullptr)));

        {
            try
            {
                {
                    while (::g::Uno::Collections::IEnumerator::MoveNext(uInterface(uPtr(enum5), ::g::Uno::Collections::IEnumerator_typeof())))
                    {
                        ::g::Fuse::Drawing::Stroke* stroke = (::g::Uno::Collections::IEnumerator1::get_Current_ex(uInterface(uPtr(enum5), ::g::Uno::Collections::IEnumerator1_typeof()->MakeType(::TYPES[40/*Fuse.Drawing.Stroke*/], nullptr)), &ret22), ret22);
                        uPtr(__this->Watcher())->Add1(stroke);
                    }
                }
            }

            catch (const uThrowable& __t)
            {
                {
                    ::g::Uno::IDisposable::Dispose(uInterface(uPtr(enum5), ::g::Uno::IDisposable_typeof()));
                }
                                throw __t;
                goto __after_finally_4;
            }

            {
                ::g::Uno::IDisposable::Dispose(uInterface(uPtr(enum5), ::g::Uno::IDisposable_typeof()));
            }
            __after_finally_4:;
        }
    }

    uPtr(__this->Watcher())->Sync();
    ::g::Fuse::Drawing::SurfacePath* path = __this->GetSurfacePath(surface);

    if (__this->HasFills())
    {
        uObject* enum6 = (uObject*)::g::Uno::Collections::IEnumerable::GetEnumerator(uInterface(uPtr(__this->Fills()), ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::TYPES[41/*Fuse.Drawing.Brush*/], nullptr)));

        {
            try
            {
                {
                    while (::g::Uno::Collections::IEnumerator::MoveNext(uInterface(uPtr(enum6), ::g::Uno::Collections::IEnumerator_typeof())))
                    {
                        ::g::Fuse::Drawing::Brush* fill1 = (::g::Uno::Collections::IEnumerator1::get_Current_ex(uInterface(uPtr(enum6), ::g::Uno::Collections::IEnumerator1_typeof()->MakeType(::TYPES[41/*Fuse.Drawing.Brush*/], nullptr)), &ret23), ret23);
                        uPtr(surface)->FillPath(path, fill1);
                    }
                }
            }

            catch (const uThrowable& __t)
            {
                {
                    ::g::Uno::IDisposable::Dispose(uInterface(uPtr(enum6), ::g::Uno::IDisposable_typeof()));
                }
                                throw __t;
                goto __after_finally_5;
            }

            {
                ::g::Uno::IDisposable::Dispose(uInterface(uPtr(enum6), ::g::Uno::IDisposable_typeof()));
            }
            __after_finally_5:;
        }
    }

    if (__this->HasStrokes())
    {
        uObject* enum7 = (uObject*)::g::Uno::Collections::IEnumerable::GetEnumerator(uInterface(uPtr(__this->Strokes()), ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::TYPES[40/*Fuse.Drawing.Stroke*/], nullptr)));

        {
            try
            {
                {
                    while (::g::Uno::Collections::IEnumerator::MoveNext(uInterface(uPtr(enum7), ::g::Uno::Collections::IEnumerator_typeof())))
                    {
                        ::g::Fuse::Drawing::Stroke* stroke1 = (::g::Uno::Collections::IEnumerator1::get_Current_ex(uInterface(uPtr(enum7), ::g::Uno::Collections::IEnumerator1_typeof()->MakeType(::TYPES[40/*Fuse.Drawing.Stroke*/], nullptr)), &ret24), ret24);
                        uPtr(surface)->StrokePath(path, stroke1);
                    }
                }
            }

            catch (const uThrowable& __t)
            {
                {
                    ::g::Uno::IDisposable::Dispose(uInterface(uPtr(enum7), ::g::Uno::IDisposable_typeof()));
                }
                                throw __t;
                goto __after_finally_6;
            }

            {
                ::g::Uno::IDisposable::Dispose(uInterface(uPtr(enum7), ::g::Uno::IDisposable_typeof()));
            }
            __after_finally_6:;
        }
    }
}

// private float2 Fuse.Drawing.ISurfaceDrawable.get_ElementSize()
void Shape__FuseDrawingISurfaceDrawableget_ElementSize_fn(Shape* __this, ::g::Uno::Float2* __retval)
{
    return *__retval = __this->ActualSize(), void();
}

// private bool Fuse.Drawing.ISurfaceDrawable.get_IsPrimary()
void Shape__FuseDrawingISurfaceDrawableget_IsPrimary_fn(Shape* __this, bool* __retval)
{
    return *__retval = __this->NeedSurface(), void();
}

// protected Fuse.Drawing.SurfacePath GetSurfacePath(Fuse.Drawing.Surface surface)
void Shape__GetSurfacePath_fn(Shape* __this, ::g::Fuse::Drawing::Surface* surface, ::g::Fuse::Drawing::SurfacePath** __retval)
{
    *__retval = __this->GetSurfacePath(surface);
}

// public bool get_HasFills()
void Shape__get_HasFills_fn(Shape* __this, bool* __retval)
{
    *__retval = __this->HasFills();
}

// private bool get_HasLoadingResources()
void Shape__get_HasLoadingResources_fn(Shape* __this, bool* __retval)
{
    *__retval = __this->HasLoadingResources();
}

// public bool get_HasStrokes()
void Shape__get_HasStrokes_fn(Shape* __this, bool* __retval)
{
    *__retval = __this->HasStrokes();
}

// protected override sealed Fuse.VisualBounds get_HitTestLocalVisualBounds()
void Shape__get_HitTestLocalVisualBounds_fn(Shape* __this, ::g::Fuse::VisualBounds** __retval)
{
    ::g::Fuse::VisualBounds* ret38;
    ::g::Fuse::VisualBounds* b = (::g::Fuse::Controls::Control__get_HitTestLocalVisualBounds_fn(__this, &ret38), ret38);
    b = uPtr(b)->AddRect(::g::Uno::Float2__New1(0.0f), __this->ActualSize());
    return *__retval = b, void();
}

// protected virtual void InvalidateSurfacePath()
void Shape__InvalidateSurfacePath_fn(Shape* __this)
{
    __this->_surfacePathDirty = true;
    __this->InvalidateVisual();
}

// private Uno.Collections.Dictionary<Uno.UX.PropertyObject, Fuse.Controls.Shape.ResourceWatcher> get_LoadingResources()
void Shape__get_LoadingResources_fn(Shape* __this, ::g::Uno::Collections::Dictionary** __retval)
{
    *__retval = __this->LoadingResources();
}

// private Fuse.Controls.Native.IShapeView get_NativeShape()
void Shape__get_NativeShape_fn(Shape* __this, uObject** __retval)
{
    *__retval = __this->NativeShape();
}

// protected virtual bool get_NeedSurface()
void Shape__get_NeedSurface_fn(Shape* __this, bool* __retval)
{
    return *__retval = true, void();
}

// private void OnColorChanged(float4 value, Uno.UX.IPropertyListener origin)
void Shape__OnColorChanged_fn(Shape* __this, ::g::Uno::Float4* value, uObject* origin)
{
    __this->OnColorChanged(*value, origin);
}

// private void OnFillAdded(Fuse.Drawing.Brush f)
void Shape__OnFillAdded_fn(Shape* __this, ::g::Fuse::Drawing::Brush* f)
{
    __this->OnFillAdded(f);
}

// private void OnFillRemoved(Fuse.Drawing.Brush f)
void Shape__OnFillRemoved_fn(Shape* __this, ::g::Fuse::Drawing::Brush* f)
{
    __this->OnFillRemoved(f);
}

// internal void OnLoadingResourcePropertyChanged(Uno.UX.PropertyObject sender, Uno.UX.Selector property)
void Shape__OnLoadingResourcePropertyChanged_fn(Shape* __this, ::g::Uno::UX::PropertyObject* sender, ::g::Uno::UX::Selector* property)
{
    __this->OnLoadingResourcePropertyChanged(sender, *property);
}

// internal void OnLoadingResourceRooted()
void Shape__OnLoadingResourceRooted_fn(Shape* __this)
{
    __this->OnLoadingResourceRooted();
}

// internal void OnLoadingResourceUnrooted()
void Shape__OnLoadingResourceUnrooted_fn(Shape* __this)
{
    __this->OnLoadingResourceUnrooted();
}

// public override sealed void OnPropertyChanged(Uno.UX.PropertyObject sender, Uno.UX.Selector property)
void Shape__OnPropertyChanged2_fn(Shape* __this, ::g::Uno::UX::PropertyObject* sender, ::g::Uno::UX::Selector* property)
{
    ::g::Uno::UX::Selector property_ = *property;
    __this->OnLoadingResourcePropertyChanged(sender, property_);

    if (uIs(sender, ::TYPES[41/*Fuse.Drawing.Brush*/]))
        __this->InvalidateVisual();
    else if (uIs(sender, ::TYPES[40/*Fuse.Drawing.Stroke*/]))
    {
        __this->InvalidateVisual();

        if (::g::Uno::UX::Selector__op_Equality(property_, Shape::_widthName_) || ::g::Uno::UX::Selector__op_Equality(property_, Shape::_offsetName_))
            __this->InvalidateRenderBounds();
    }
    else
        ::g::Fuse::Controls::Control__OnPropertyChanged2_fn(__this, sender, uCRef(property_));

    __this->UpdateNativeShape();
}

// protected override void OnRooted()
void Shape__OnRooted_fn(Shape* __this)
{
    ::g::Fuse::Drawing::Stroke* ret27;
    ::g::Fuse::Drawing::Brush* ret28;
    ::g::Fuse::Controls::LayoutControl__OnRooted_fn(__this);

    if (__this->_strokes != nullptr)
    {
        for (int32_t i = 0; i < uPtr(__this->_strokes)->Count(); ++i)
            __this->OnStrokeAdded((::g::Uno::Collections::RootableList__get_Item_fn(uPtr(__this->_strokes), uCRef<int32_t>(i), &ret27), ret27));

        uPtr(__this->_strokes)->Subscribe(uDelegate::New(::g::Uno::Action1_typeof()->MakeType(::TYPES[40/*Fuse.Drawing.Stroke*/], nullptr), (void*)Shape__OnStrokeAdded_fn, __this), uDelegate::New(::g::Uno::Action1_typeof()->MakeType(::TYPES[40/*Fuse.Drawing.Stroke*/], nullptr), (void*)Shape__OnStrokeRemoved_fn, __this));
    }

    if (__this->_fills != nullptr)
    {
        for (int32_t i1 = 0; i1 < uPtr(__this->_fills)->Count(); ++i1)
            __this->OnFillAdded((::g::Uno::Collections::RootableList__get_Item_fn(uPtr(__this->_fills), uCRef<int32_t>(i1), &ret28), ret28));

        uPtr(__this->_fills)->Subscribe(uDelegate::New(::g::Uno::Action1_typeof()->MakeType(::TYPES[41/*Fuse.Drawing.Brush*/], nullptr), (void*)Shape__OnFillAdded_fn, __this), uDelegate::New(::g::Uno::Action1_typeof()->MakeType(::TYPES[41/*Fuse.Drawing.Brush*/], nullptr), (void*)Shape__OnFillRemoved_fn, __this));
    }

    __this->OnLoadingResourceRooted();
    __this->_surface1 = (__this->NeedSurface() ? (::g::Fuse::Drawing::Surface*)::g::Fuse::Drawing::SurfaceManager::FindOrCreate(__this) : (::g::Fuse::Drawing::Surface*)::g::Fuse::Drawing::SurfaceManager::Find(__this));

    if (__this->_surface1 != nullptr)
        __this->OnSurfaceRooted();
}

// private void OnStrokeAdded(Fuse.Drawing.Stroke s)
void Shape__OnStrokeAdded_fn(Shape* __this, ::g::Fuse::Drawing::Stroke* s)
{
    __this->OnStrokeAdded(s);
}

// private void OnStrokeRemoved(Fuse.Drawing.Stroke s)
void Shape__OnStrokeRemoved_fn(Shape* __this, ::g::Fuse::Drawing::Stroke* s)
{
    __this->OnStrokeRemoved(s);
}

// protected void OnSurfaceRooted()
void Shape__OnSurfaceRooted_fn(Shape* __this)
{
    __this->OnSurfaceRooted();
}

// protected void OnSurfaceUnrooted()
void Shape__OnSurfaceUnrooted_fn(Shape* __this)
{
    __this->OnSurfaceUnrooted();
}

// protected override void OnUnrooted()
void Shape__OnUnrooted_fn(Shape* __this)
{
    ::g::Fuse::Drawing::Stroke* ret29;
    ::g::Fuse::Drawing::Brush* ret30;
    ::g::Fuse::Controls::LayoutControl__OnUnrooted_fn(__this);

    if (__this->_strokes != nullptr)
    {
        for (int32_t i = 0; i < uPtr(__this->_strokes)->Count(); ++i)
            __this->OnStrokeRemoved((::g::Uno::Collections::RootableList__get_Item_fn(uPtr(__this->_strokes), uCRef<int32_t>(i), &ret29), ret29));

        uPtr(__this->_strokes)->Unsubscribe();
    }

    if (__this->_fills != nullptr)
    {
        for (int32_t i1 = 0; i1 < uPtr(__this->_fills)->Count(); ++i1)
            __this->OnFillRemoved((::g::Uno::Collections::RootableList__get_Item_fn(uPtr(__this->_fills), uCRef<int32_t>(i1), &ret30), ret30));

        uPtr(__this->_fills)->Unsubscribe();
    }

    __this->OnLoadingResourceUnrooted();

    if (__this->_surface1 != nullptr)
        __this->OnSurfaceUnrooted();
}

// internal void PrepareDraw(Fuse.DrawContext dc, float2 canvasSize)
void Shape__PrepareDraw_fn(Shape* __this, ::g::Fuse::DrawContext* dc, ::g::Uno::Float2* canvasSize)
{
    __this->PrepareDraw(dc, *canvasSize);
}

// protected override sealed void PushPropertiesToNativeView()
void Shape__PushPropertiesToNativeView_fn(Shape* __this)
{
    ::g::Fuse::Controls::Control__PushPropertiesToNativeView_fn(__this);
    __this->UpdateNativeShape();
}

// internal void RemoveLoadingResource(Uno.UX.PropertyObject res)
void Shape__RemoveLoadingResource_fn(Shape* __this, ::g::Uno::UX::PropertyObject* res)
{
    __this->RemoveLoadingResource(res);
}

// public void SetColor(float4 value, Uno.UX.IPropertyListener origin)
void Shape__SetColor_fn(Shape* __this, ::g::Uno::Float4* value, uObject* origin)
{
    __this->SetColor(*value, origin);
}

// public float get_Smoothness()
void Shape__get_Smoothness_fn(Shape* __this, float* __retval)
{
    *__retval = __this->Smoothness();
}

// public void set_Smoothness(float value)
void Shape__set_Smoothness_fn(Shape* __this, float* value)
{
    __this->Smoothness(*value);
}

// public Fuse.Drawing.Stroke get_Stroke()
void Shape__get_Stroke_fn(Shape* __this, ::g::Fuse::Drawing::Stroke** __retval)
{
    *__retval = __this->Stroke();
}

// public void set_Stroke(Fuse.Drawing.Stroke value)
void Shape__set_Stroke_fn(Shape* __this, ::g::Fuse::Drawing::Stroke* value)
{
    __this->Stroke(value);
}

// public Uno.Collections.IList<Fuse.Drawing.Stroke> get_Strokes()
void Shape__get_Strokes_fn(Shape* __this, uObject** __retval)
{
    *__retval = __this->Strokes();
}

// protected Fuse.Drawing.Surface get_Surface()
void Shape__get_Surface_fn(Shape* __this, ::g::Fuse::Drawing::Surface** __retval)
{
    *__retval = __this->Surface();
}

// private void UpdateNativeShape()
void Shape__UpdateNativeShape_fn(Shape* __this)
{
    __this->UpdateNativeShape();
}

// internal Fuse.Drawing.DrawObjectWatcher get_Watcher()
void Shape__get_Watcher_fn(Shape* __this, ::g::Fuse::Drawing::DrawObjectWatcher** __retval)
{
    *__retval = __this->Watcher();
}

uSStrong< ::g::Fuse::PropertyHandle*> Shape::_loadingResourcesHandle_;
::g::Uno::UX::Selector Shape::ColorPropertyName_;
::g::Uno::UX::Selector Shape::_widthName_;
::g::Uno::UX::Selector Shape::_offsetName_;

// protected generated Shape() [instance]
void Shape::ctor_6()
{
    _smoothness = 1.0f;
    ctor_5();
}

// internal void AddLoadingResource(Uno.UX.PropertyObject res) [instance]
void Shape::AddLoadingResource(::g::Uno::UX::PropertyObject* res)
{
    bool ret15;

    if (!uIs(res, ::g::Fuse::ILoading_typeof()))
        return;

    ::g::Uno::Collections::Dictionary* all = LoadingResources();
    Shape__ResourceWatcher* watcher;

    if (!(::g::Uno::Collections::Dictionary__TryGetValue_fn(uPtr(all), res, (void**)(&watcher), &ret15), ret15))
    {
        watcher = Shape__ResourceWatcher::New1();
        ::g::Uno::Collections::Dictionary__set_Item_fn(uPtr(all), res, watcher);
    }

    if (IsRootingStarted() && !uPtr(watcher)->IsWatching)
    {
        uPtr(res)->AddPropertyListener((uObject*)this);
        uPtr(watcher)->IsWatching = true;
    }
}

// private void CheckStatus() [instance]
void Shape::CheckStatus()
{
    ::g::Uno::Collections::Dictionary__Enumerator<uStrong< ::g::Uno::UX::PropertyObject*>, uStrong<Shape__ResourceWatcher*> > ret18;
    bool loading = false;

    if (HasLoadingResources())
    {
        ::g::Uno::Collections::Dictionary__Enumerator<uStrong< ::g::Uno::UX::PropertyObject*>, uStrong<Shape__ResourceWatcher*> > enum3 = (::g::Uno::Collections::Dictionary__GetEnumerator_fn(uPtr(LoadingResources()), &ret18), ret18);

        {
            try
            {
                {
                    while (enum3.MoveNext(::g::Uno::Collections::Dictionary__Enumerator_typeof()->MakeType(::g::Uno::UX::PropertyObject_typeof(), Shape__ResourceWatcher_typeof(), nullptr)))
                    {
                        ::g::Uno::Collections::KeyValuePair<uStrong< ::g::Uno::UX::PropertyObject*>, uStrong<Shape__ResourceWatcher*> > item = enum3.Current(::g::Uno::Collections::Dictionary__Enumerator_typeof()->MakeType(::g::Uno::UX::PropertyObject_typeof(), Shape__ResourceWatcher_typeof(), nullptr));

                        if (::g::Fuse::ILoading::IsLoading(uInterface(uPtr(uAs<uObject*>(item.Key(::g::Uno::Collections::KeyValuePair_typeof()->MakeType(::g::Uno::UX::PropertyObject_typeof(), Shape__ResourceWatcher_typeof(), nullptr)), ::g::Fuse::ILoading_typeof())), ::g::Fuse::ILoading_typeof())))
                        {
                            loading = true;
                            break;
                        }
                    }
                }
            }

            catch (const uThrowable& __t)
            {
                {
                    enum3.Dispose(::g::Uno::Collections::Dictionary__Enumerator_typeof()->MakeType(::g::Uno::UX::PropertyObject_typeof(), Shape__ResourceWatcher_typeof(), nullptr));
                }
                                throw __t;
                goto __after_finally_7;
            }

            {
                enum3.Dispose(::g::Uno::Collections::Dictionary__Enumerator_typeof()->MakeType(::g::Uno::UX::PropertyObject_typeof(), Shape__ResourceWatcher_typeof(), nullptr));
            }
            __after_finally_7:;
        }
    }

    ::g::Fuse::Triggers::BusyTask::SetBusy(this, &_loadingResourceTask, loading ? 1 : 0, ::STRINGS[5/*""*/]);
}

// public float4 get_Color() [instance]
::g::Uno::Float4 Shape::Color()
{
    uObject* f = uAs<uObject*>(Fill(), ::TYPES[9/*Fuse.Drawing.ISolidColor*/]);

    if (f != nullptr)
        return ::g::Fuse::Drawing::ISolidColor::Color(uInterface(uPtr(f), ::TYPES[9/*Fuse.Drawing.ISolidColor*/]));

    return ::g::Uno::Float4__New1(0.0f);
}

// public void set_Color(float4 value) [instance]
void Shape::Color(::g::Uno::Float4 value)
{
    SetColor(value, (uObject*)this);
}

// public Fuse.Drawing.Brush get_Fill() [instance]
::g::Fuse::Drawing::Brush* Shape::Fill()
{
    ::g::Fuse::Drawing::Brush* ret37;

    if ((_fills == nullptr) || (uPtr(_fills)->Count() == 0))
        return nullptr;
    else
        return (::g::Uno::Collections::RootableList__get_Item_fn(uPtr(_fills), uCRef<int32_t>(0), &ret37), ret37);
}

// public void set_Fill(Fuse.Drawing.Brush value) [instance]
void Shape::Fill(::g::Fuse::Drawing::Brush* value)
{
    ::g::Uno::Collections::ICollection::Clear(uInterface(uPtr(Fills()), ::g::Uno::Collections::ICollection_typeof()->MakeType(::TYPES[41/*Fuse.Drawing.Brush*/], nullptr)));

    if (value != nullptr)
        ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(Fills()), ::g::Uno::Collections::ICollection_typeof()->MakeType(::TYPES[41/*Fuse.Drawing.Brush*/], nullptr)), value);
}

// public Uno.Collections.IList<Fuse.Drawing.Brush> get_Fills() [instance]
uObject* Shape::Fills()
{
    if (_fills == nullptr)
    {
        _fills = ((::g::Uno::Collections::RootableList*)::g::Uno::Collections::RootableList::New1(::g::Uno::Collections::RootableList_typeof()->MakeType(::TYPES[41/*Fuse.Drawing.Brush*/], nullptr)));

        if (IsRootingCompleted())
            uPtr(_fills)->Subscribe(uDelegate::New(::g::Uno::Action1_typeof()->MakeType(::TYPES[41/*Fuse.Drawing.Brush*/], nullptr), (void*)Shape__OnFillAdded_fn, this), uDelegate::New(::g::Uno::Action1_typeof()->MakeType(::TYPES[41/*Fuse.Drawing.Brush*/], nullptr), (void*)Shape__OnFillRemoved_fn, this));
    }

    return (uObject*)_fills;
}

// protected Fuse.Drawing.SurfacePath GetSurfacePath(Fuse.Drawing.Surface surface) [instance]
::g::Fuse::Drawing::SurfacePath* Shape::GetSurfacePath(::g::Fuse::Drawing::Surface* surface)
{
    if (!_surfacePathDirty && (_surfacePath != nullptr))
        return _surfacePath;

    if (_surfacePath != nullptr)
        uPtr(surface)->DisposePath(_surfacePath);

    _surfacePath = CreateSurfacePath(surface);
    _surfacePathDirty = false;
    return _surfacePath;
}

// public bool get_HasFills() [instance]
bool Shape::HasFills()
{
    return (_fills != nullptr) && (uPtr(_fills)->Count() > 0);
}

// private bool get_HasLoadingResources() [instance]
bool Shape::HasLoadingResources()
{
    return uPtr(Properties())->Has(Shape::_loadingResourcesHandle_);
}

// public bool get_HasStrokes() [instance]
bool Shape::HasStrokes()
{
    return (_strokes != nullptr) && (uPtr(_strokes)->Count() > 0);
}

// private Uno.Collections.Dictionary<Uno.UX.PropertyObject, Fuse.Controls.Shape.ResourceWatcher> get_LoadingResources() [instance]
::g::Uno::Collections::Dictionary* Shape::LoadingResources()
{
    uObject* val;
    ::g::Uno::Collections::Dictionary* loading;

    if (uPtr(Properties())->TryGet(Shape::_loadingResourcesHandle_, &val))
        loading = uCast< ::g::Uno::Collections::Dictionary*>(val, ::g::Uno::Collections::Dictionary_typeof()->MakeType(::g::Uno::UX::PropertyObject_typeof(), Shape__ResourceWatcher_typeof(), nullptr));
    else
    {
        loading = (::g::Uno::Collections::Dictionary*)::g::Uno::Collections::Dictionary::New1(::g::Uno::Collections::Dictionary_typeof()->MakeType(::g::Uno::UX::PropertyObject_typeof(), Shape__ResourceWatcher_typeof(), nullptr));
        uPtr(Properties())->Set(Shape::_loadingResourcesHandle_, loading);
    }

    return loading;
}

// private Fuse.Controls.Native.IShapeView get_NativeShape() [instance]
uObject* Shape::NativeShape()
{
    return uAs<uObject*>(NativeView(), ::g::Fuse::Controls::Native::IShapeView_typeof());
}

// private void OnColorChanged(float4 value, Uno.UX.IPropertyListener origin) [instance]
void Shape::OnColorChanged(::g::Uno::Float4 value, uObject* origin)
{
    if (!uIs((::g::Fuse::Drawing::Brush*)Fill(), ::TYPES[25/*Fuse.Drawing.SolidColor*/]))
        Fill(::g::Fuse::Drawing::SolidColor::New3(value));
    else
        uPtr(uCast< ::g::Fuse::Drawing::SolidColor*>(Fill(), ::TYPES[25/*Fuse.Drawing.SolidColor*/]))->Color(value);

    OnPropertyChanged1(Shape::ColorPropertyName_, uAs<uObject*>(origin, ::g::Uno::UX::IPropertyListener_typeof()));
}

// private void OnFillAdded(Fuse.Drawing.Brush f) [instance]
void Shape::OnFillAdded(::g::Fuse::Drawing::Brush* f)
{
    if (f == nullptr)
    {
        ::g::Fuse::Diagnostics::InternalError(uString::Const("Unexpected null brush"), this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Shape.uno"), 131, uString::Const("OnFillAdded"));
        return;
    }

    uPtr(f)->Pin();
    AddDrawCost(1.0);

    if (uIs(f, ::TYPES[8/*Fuse.Drawing.DynamicBrush*/]))
        uPtr(uCast< ::g::Fuse::Drawing::DynamicBrush*>(f, ::TYPES[8/*Fuse.Drawing.DynamicBrush*/]))->AddPropertyListener((uObject*)this);

    AddLoadingResource(f);
    InvalidateRenderBounds();
    UpdateNativeShape();
}

// private void OnFillRemoved(Fuse.Drawing.Brush f) [instance]
void Shape::OnFillRemoved(::g::Fuse::Drawing::Brush* f)
{
    if (f == nullptr)
    {
        ::g::Fuse::Diagnostics::InternalError(uString::Const("Unexpected null brush"), this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Shape.uno"), 154, uString::Const("OnFillRemoved"));
        return;
    }

    uPtr(f)->Unpin();
    RemoveDrawCost(1.0);

    if (uIs(f, ::TYPES[8/*Fuse.Drawing.DynamicBrush*/]))
        uPtr(uCast< ::g::Fuse::Drawing::DynamicBrush*>(f, ::TYPES[8/*Fuse.Drawing.DynamicBrush*/]))->RemovePropertyListener((uObject*)this);

    RemoveLoadingResource(f);
    InvalidateRenderBounds();
    UpdateNativeShape();
}

// internal void OnLoadingResourcePropertyChanged(Uno.UX.PropertyObject sender, Uno.UX.Selector property) [instance]
void Shape::OnLoadingResourcePropertyChanged(::g::Uno::UX::PropertyObject* sender, ::g::Uno::UX::Selector property)
{
    uObject* loading = uAs<uObject*>(sender, ::g::Fuse::ILoading_typeof());

    if (!HasLoadingResources() || (loading == nullptr))
        return;

    if (::g::Uno::UX::Selector__op_Inequality(property, ::g::Fuse::ILoadingStatic::IsLoadingName()))
        return;

    CheckStatus();
}

// internal void OnLoadingResourceRooted() [instance]
void Shape::OnLoadingResourceRooted()
{
    ::g::Uno::Collections::Dictionary__Enumerator<uStrong< ::g::Uno::UX::PropertyObject*>, uStrong<Shape__ResourceWatcher*> > ret25;

    if (HasLoadingResources())
    {
        ::g::Uno::Collections::Dictionary__Enumerator<uStrong< ::g::Uno::UX::PropertyObject*>, uStrong<Shape__ResourceWatcher*> > enum1 = (::g::Uno::Collections::Dictionary__GetEnumerator_fn(uPtr(LoadingResources()), &ret25), ret25);

        {
            try
            {
                {
                    while (enum1.MoveNext(::g::Uno::Collections::Dictionary__Enumerator_typeof()->MakeType(::g::Uno::UX::PropertyObject_typeof(), Shape__ResourceWatcher_typeof(), nullptr)))
                    {
                        ::g::Uno::Collections::KeyValuePair<uStrong< ::g::Uno::UX::PropertyObject*>, uStrong<Shape__ResourceWatcher*> > item = enum1.Current(::g::Uno::Collections::Dictionary__Enumerator_typeof()->MakeType(::g::Uno::UX::PropertyObject_typeof(), Shape__ResourceWatcher_typeof(), nullptr));

                        if (uPtr(item.Value(::g::Uno::Collections::KeyValuePair_typeof()->MakeType(::g::Uno::UX::PropertyObject_typeof(), Shape__ResourceWatcher_typeof(), nullptr)))->IsWatching)
                            continue;

                        uPtr(item.Key(::g::Uno::Collections::KeyValuePair_typeof()->MakeType(::g::Uno::UX::PropertyObject_typeof(), Shape__ResourceWatcher_typeof(), nullptr)))->AddPropertyListener((uObject*)this);
                        uPtr(item.Value(::g::Uno::Collections::KeyValuePair_typeof()->MakeType(::g::Uno::UX::PropertyObject_typeof(), Shape__ResourceWatcher_typeof(), nullptr)))->IsWatching = true;
                    }
                }
            }

            catch (const uThrowable& __t)
            {
                {
                    enum1.Dispose(::g::Uno::Collections::Dictionary__Enumerator_typeof()->MakeType(::g::Uno::UX::PropertyObject_typeof(), Shape__ResourceWatcher_typeof(), nullptr));
                }
                                throw __t;
                goto __after_finally_8;
            }

            {
                enum1.Dispose(::g::Uno::Collections::Dictionary__Enumerator_typeof()->MakeType(::g::Uno::UX::PropertyObject_typeof(), Shape__ResourceWatcher_typeof(), nullptr));
            }
            __after_finally_8:;
        }
    }

    CheckStatus();
}

// internal void OnLoadingResourceUnrooted() [instance]
void Shape::OnLoadingResourceUnrooted()
{
    ::g::Uno::Collections::Dictionary__Enumerator<uStrong< ::g::Uno::UX::PropertyObject*>, uStrong<Shape__ResourceWatcher*> > ret26;

    if (!HasLoadingResources())
        return;

    ::g::Uno::Collections::Dictionary__Enumerator<uStrong< ::g::Uno::UX::PropertyObject*>, uStrong<Shape__ResourceWatcher*> > enum2 = (::g::Uno::Collections::Dictionary__GetEnumerator_fn(uPtr(LoadingResources()), &ret26), ret26);

    {
        try
        {
            {
                while (enum2.MoveNext(::g::Uno::Collections::Dictionary__Enumerator_typeof()->MakeType(::g::Uno::UX::PropertyObject_typeof(), Shape__ResourceWatcher_typeof(), nullptr)))
                {
                    ::g::Uno::Collections::KeyValuePair<uStrong< ::g::Uno::UX::PropertyObject*>, uStrong<Shape__ResourceWatcher*> > item = enum2.Current(::g::Uno::Collections::Dictionary__Enumerator_typeof()->MakeType(::g::Uno::UX::PropertyObject_typeof(), Shape__ResourceWatcher_typeof(), nullptr));

                    if (uPtr(item.Value(::g::Uno::Collections::KeyValuePair_typeof()->MakeType(::g::Uno::UX::PropertyObject_typeof(), Shape__ResourceWatcher_typeof(), nullptr)))->IsWatching)
                        uPtr(item.Key(::g::Uno::Collections::KeyValuePair_typeof()->MakeType(::g::Uno::UX::PropertyObject_typeof(), Shape__ResourceWatcher_typeof(), nullptr)))->RemovePropertyListener((uObject*)this);

                    uPtr(item.Value(::g::Uno::Collections::KeyValuePair_typeof()->MakeType(::g::Uno::UX::PropertyObject_typeof(), Shape__ResourceWatcher_typeof(), nullptr)))->IsWatching = false;
                }
            }
        }

        catch (const uThrowable& __t)
        {
            {
                enum2.Dispose(::g::Uno::Collections::Dictionary__Enumerator_typeof()->MakeType(::g::Uno::UX::PropertyObject_typeof(), Shape__ResourceWatcher_typeof(), nullptr));
            }
                        throw __t;
            goto __after_finally_9;
        }

        {
            enum2.Dispose(::g::Uno::Collections::Dictionary__Enumerator_typeof()->MakeType(::g::Uno::UX::PropertyObject_typeof(), Shape__ResourceWatcher_typeof(), nullptr));
        }
        __after_finally_9:;
    }
}

// private void OnStrokeAdded(Fuse.Drawing.Stroke s) [instance]
void Shape::OnStrokeAdded(::g::Fuse::Drawing::Stroke* s)
{
    if (s == nullptr)
    {
        ::g::Fuse::Diagnostics::InternalError(uString::Const("Unexpected null stroke"), this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Shape.uno"), 295, uString::Const("OnStrokeAdded"));
        return;
    }

    uPtr(s)->Pin();
    AddDrawCost(1.0);
    s->AddPropertyListener((uObject*)this);
    InvalidateRenderBounds();
    UpdateNativeShape();
}

// private void OnStrokeRemoved(Fuse.Drawing.Stroke s) [instance]
void Shape::OnStrokeRemoved(::g::Fuse::Drawing::Stroke* s)
{
    if (s == nullptr)
    {
        ::g::Fuse::Diagnostics::InternalError(uString::Const("Unexpected null stroke"), this, uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Shape.uno"), 311, uString::Const("OnStrokeRemoved"));
        return;
    }

    uPtr(s)->Unpin();
    RemoveDrawCost(1.0);
    s->RemovePropertyListener((uObject*)this);
    InvalidateRenderBounds();
    UpdateNativeShape();
}

// protected void OnSurfaceRooted() [instance]
void Shape::OnSurfaceRooted()
{
    _watcher = ::g::Fuse::Drawing::DrawObjectWatcher::New1();
    uPtr(_watcher)->OnRooted((uObject*)this);
}

// protected void OnSurfaceUnrooted() [instance]
void Shape::OnSurfaceUnrooted()
{
    if (_surfacePath != nullptr)
    {
        uPtr(Surface())->DisposePath(_surfacePath);
        _surfacePath = nullptr;
    }

    uPtr(_watcher)->OnUnrooted();
    ::g::Fuse::Drawing::SurfaceManager::Release(this, _surface1);
    _surface1 = nullptr;
}

// internal void PrepareDraw(Fuse.DrawContext dc, float2 canvasSize) [instance]
void Shape::PrepareDraw(::g::Fuse::DrawContext* dc, ::g::Uno::Float2 canvasSize)
{
    ::g::Fuse::Drawing::Brush* ret31;
    ::g::Uno::Float2 canvasSize_ = canvasSize;
    ::g::Fuse::Drawing::Stroke* ret32;

    if (HasFills())

        for (int32_t i = 0; i < uPtr(_fills)->Count(); ++i)
            uPtr((::g::Uno::Collections::RootableList__get_Item_fn(uPtr(_fills), uCRef<int32_t>(i), &ret31), ret31))->Prepare(dc, canvasSize_);

    if (HasStrokes())

        for (int32_t i1 = 0; i1 < uPtr(_strokes)->Count(); ++i1)
            uPtr((::g::Uno::Collections::RootableList__get_Item_fn(uPtr(_strokes), uCRef<int32_t>(i1), &ret32), ret32))->Prepare(dc, canvasSize_);
}

// internal void RemoveLoadingResource(Uno.UX.PropertyObject res) [instance]
void Shape::RemoveLoadingResource(::g::Uno::UX::PropertyObject* res)
{
    bool ret33;
    bool ret34;

    if (!uIs(res, ::g::Fuse::ILoading_typeof()))
        return;

    ::g::Uno::Collections::Dictionary* all = LoadingResources();
    Shape__ResourceWatcher* watcher;

    if (!(::g::Uno::Collections::Dictionary__TryGetValue_fn(uPtr(all), res, (void**)(&watcher), &ret33), ret33))
        return;

    if (uPtr(watcher)->IsWatching)
    {
        uPtr(res)->RemovePropertyListener((uObject*)this);
        uPtr(watcher)->IsWatching = false;
    }

    ::g::Uno::Collections::Dictionary__Remove_fn(uPtr(all), res, &ret34);
}

// public void SetColor(float4 value, Uno.UX.IPropertyListener origin) [instance]
void Shape::SetColor(::g::Uno::Float4 value, uObject* origin)
{
    if (::g::Uno::Float4__op_Inequality(Color(), value))
        OnColorChanged(value, origin);
}

// public float get_Smoothness() [instance]
float Shape::Smoothness()
{
    return _smoothness;
}

// public void set_Smoothness(float value) [instance]
void Shape::Smoothness(float value)
{
    if (_smoothness != value)
    {
        _smoothness = value;
        InvalidateVisual();
        InvalidateRenderBounds();
    }
}

// public Fuse.Drawing.Stroke get_Stroke() [instance]
::g::Fuse::Drawing::Stroke* Shape::Stroke()
{
    ::g::Fuse::Drawing::Stroke* ret39;

    if ((_strokes == nullptr) || (uPtr(_strokes)->Count() == 0))
        return nullptr;

    return (::g::Uno::Collections::RootableList__get_Item_fn(uPtr(_strokes), uCRef<int32_t>(0), &ret39), ret39);
}

// public void set_Stroke(Fuse.Drawing.Stroke value) [instance]
void Shape::Stroke(::g::Fuse::Drawing::Stroke* value)
{
    ::g::Uno::Collections::ICollection::Clear(uInterface(uPtr(Strokes()), ::TYPES[61/*Uno.Collections.ICollection<Fuse.Drawing.Stroke>*/]));

    if (value != nullptr)
        ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(Strokes()), ::TYPES[61/*Uno.Collections.ICollection<Fuse.Drawing.Stroke>*/]), value);
}

// public Uno.Collections.IList<Fuse.Drawing.Stroke> get_Strokes() [instance]
uObject* Shape::Strokes()
{
    if (_strokes == nullptr)
    {
        _strokes = ((::g::Uno::Collections::RootableList*)::g::Uno::Collections::RootableList::New1(::g::Uno::Collections::RootableList_typeof()->MakeType(::TYPES[40/*Fuse.Drawing.Stroke*/], nullptr)));

        if (IsRootingCompleted())
            uPtr(_strokes)->Subscribe(uDelegate::New(::g::Uno::Action1_typeof()->MakeType(::TYPES[40/*Fuse.Drawing.Stroke*/], nullptr), (void*)Shape__OnStrokeAdded_fn, this), uDelegate::New(::g::Uno::Action1_typeof()->MakeType(::TYPES[40/*Fuse.Drawing.Stroke*/], nullptr), (void*)Shape__OnStrokeRemoved_fn, this));
    }

    return (uObject*)_strokes;
}

// protected Fuse.Drawing.Surface get_Surface() [instance]
::g::Fuse::Drawing::Surface* Shape::Surface()
{
    return _surface1;
}

// private void UpdateNativeShape() [instance]
void Shape::UpdateNativeShape()
{
    uObject* ns = NativeShape();

    if (ns != nullptr)
    {
        uArray* fills = HasFills() ? (uArray*)::g::Uno::Collections::EnumerableExtensions::ToArray(::g::Uno::Collections::EnumerableExtensions_typeof()->MakeMethod(5/*ToArray<Fuse.Drawing.Brush>*/, ::TYPES[41/*Fuse.Drawing.Brush*/], nullptr), Fills()) : uArray::New(::TYPES[41/*Fuse.Drawing.Brush*/]->Array(), 0);
        uArray* strokes = HasStrokes() ? (uArray*)::g::Uno::Collections::EnumerableExtensions::ToArray(::g::Uno::Collections::EnumerableExtensions_typeof()->MakeMethod(5/*ToArray<Fuse.Drawing.Stroke>*/, ::TYPES[40/*Fuse.Drawing.Stroke*/], nullptr), Strokes()) : uArray::New(::TYPES[40/*Fuse.Drawing.Stroke*/]->Array(), 0);
        ::g::Fuse::Controls::Native::IShapeView::Update(uInterface(uPtr(ns), ::g::Fuse::Controls::Native::IShapeView_typeof()), fills, strokes, ::g::Fuse::ICommonViewport::PixelsPerPoint(uInterface(uPtr(Viewport()), ::TYPES[36/*Fuse.ICommonViewport*/])));
    }
}

// internal Fuse.Drawing.DrawObjectWatcher get_Watcher() [instance]
::g::Fuse::Drawing::DrawObjectWatcher* Shape::Watcher()
{
    return _watcher;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/Shapes/Star.uno
// --------------------------------------------------------------------------------

// public partial sealed class Star
// {
static void Star_build(uType* type)
{
    ::STRINGS[101] = uString::Const("Points");
    ::STRINGS[102] = uString::Const("Ratio");
    ::STRINGS[103] = uString::Const("RoundRatio");
    ::TYPES[53] = ::g::Uno::Collections::List_typeof()->MakeType(::g::Fuse::Drawing::LineSegment_typeof(), nullptr);
    type->SetDependencies(
        ::g::Uno::Math_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Shape_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface18),
        ::g::Fuse::Drawing::IDrawObjectWatcherFeedback_typeof(), offsetof(::g::Fuse::Controls::Shape_type, interface19));
    type->SetFields(116,
        ::g::Uno::Int_typeof(), offsetof(Star, _points), 0,
        ::g::Uno::Float_typeof(), offsetof(Star, _ratio), 0,
        ::g::Uno::Float_typeof(), offsetof(Star, _roundRatio), 0,
        ::g::Uno::Float_typeof(), offsetof(Star, _degrees), 0);
}

::g::Fuse::Controls::Shape_type* Star_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Shape_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::Shape_typeof();
    options.FieldCount = 120;
    options.InterfaceCount = 20;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(Star);
    options.TypeSize = sizeof(::g::Fuse::Controls::Shape_type);
    type = (::g::Fuse::Controls::Shape_type*)uClassType::New("Fuse.Controls.Star", options);
    type->fp_build_ = Star_build;
    type->fp_CreateSurfacePath = (void(*)(::g::Fuse::Controls::Shape*, ::g::Fuse::Drawing::Surface*, ::g::Fuse::Drawing::SurfacePath**))Star__CreateSurfacePath_fn;
    type->interface19.fp_Changed = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackChanged_fn;
    type->interface19.fp_Prepare = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackPrepare_fn;
    type->interface19.fp_Unprepare = (void(*)(uObject*, uObject*))::g::Fuse::Controls::Shape__FuseDrawingIDrawObjectWatcherFeedbackUnprepare_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Shape__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Shape__OnPropertyChanged2_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// protected override sealed Fuse.Drawing.SurfacePath CreateSurfacePath(Fuse.Drawing.Surface surface)
void Star__CreateSurfacePath_fn(Star* __this, ::g::Fuse::Drawing::Surface* surface, ::g::Fuse::Drawing::SurfacePath** __retval)
{
    ::g::Fuse::Drawing::LineSegment collection1;
    ::g::Fuse::Drawing::LineSegment collection2;
    ::g::Fuse::Drawing::LineSegment collection3;
    ::g::Fuse::Drawing::LineSegment collection4;
    ::g::Uno::Collections::List* list = (::g::Uno::Collections::List*)::g::Uno::Collections::List::New1(::TYPES[53/*Uno.Collections.List<Fuse.Drawing.LineSegment>*/]);

    if (__this->Points() < 3)
        return *__retval = uPtr(surface)->CreatePath((uObject*)list, 0), void();

    float t = -6.28318548f / (float)(__this->Points() * 2);
    ::g::Uno::Float2 center = ::g::Uno::Float2__op_Division1(__this->ActualSize(), 2.0f);
    float radius = ::g::Uno::Math::Min1(__this->ActualSize().X, __this->ActualSize().Y) * 0.5f;
    float spokeRadius = radius * __this->Ratio();
    float rotation = __this->RotationRadians();
    float cornerRatio = __this->RoundRatio();
    int32_t count = __this->Points() * 2;

    for (int32_t i = 0; i < count; i++)
    {
        ::g::Uno::Float2 segRadius = ((i % 2) == 0) ? ::g::Uno::Float2__New2(radius, spokeRadius) : ::g::Uno::Float2__New2(spokeRadius, radius);
        ::g::Uno::Float2 pa = ::g::Uno::Float2__New2(center.X + (::g::Uno::Math::Sin1((t * (float)i) + rotation) * segRadius.Item(0)), center.Y - (::g::Uno::Math::Cos1((t * (float)i) + rotation) * segRadius.Item(0)));
        ::g::Uno::Float2 pb = ::g::Uno::Float2__New2(center.X + (::g::Uno::Math::Sin1((t * (float)(i + 1)) + rotation) * segRadius.Item(1)), center.Y - (::g::Uno::Math::Cos1((t * (float)(i + 1)) + rotation) * segRadius.Item(1)));

        if (i == 0)
            ::g::Uno::Collections::List__Add_fn(uPtr(list), uCRef((collection1 = uDefault< ::g::Fuse::Drawing::LineSegment>(), collection1.Type = 0, collection1.To = pa, collection1)));

        float zeroTolerance = 1e-05f;

        if (cornerRatio > 1e-05f)
        {
            ::g::Uno::Float2 na = ::g::Uno::Float2__New2(::g::Uno::Math::Cos1((t * (float)i) + rotation), ::g::Uno::Math::Sin1((t * (float)i) + rotation));
            ::g::Uno::Float2 nb = ::g::Uno::Float2__New2(::g::Uno::Math::Cos1((t * (float)(i + 1)) + rotation), ::g::Uno::Math::Sin1((t * (float)(i + 1)) + rotation));
            ::g::Uno::Collections::List__Add_fn(uPtr(list), uCRef((collection2 = uDefault< ::g::Fuse::Drawing::LineSegment>(), collection2.Type = 2, collection2.To = pb, collection2.A = ::g::Uno::Float2__op_Subtraction2(pa, ::g::Uno::Float2__op_Multiply1(::g::Uno::Float2__op_Multiply1(na, cornerRatio), segRadius.Item(0))), collection2.B = ::g::Uno::Float2__op_Addition2(pb, ::g::Uno::Float2__op_Multiply1(::g::Uno::Float2__op_Multiply1(nb, cornerRatio), segRadius.Item(1))), collection2)));
        }
        else
            ::g::Uno::Collections::List__Add_fn(uPtr(list), uCRef((collection3 = uDefault< ::g::Fuse::Drawing::LineSegment>(), collection3.Type = 1, collection3.To = pb, collection3)));
    }

    ::g::Uno::Collections::List__Add_fn(list, uCRef((collection4 = uDefault< ::g::Fuse::Drawing::LineSegment>(), collection4.Type = 4, collection4)));
    return *__retval = uPtr(__this->Surface())->CreatePath((uObject*)list, 0), void();
}

// public int get_Points()
void Star__get_Points_fn(Star* __this, int32_t* __retval)
{
    *__retval = __this->Points();
}

// public void set_Points(int value)
void Star__set_Points_fn(Star* __this, int32_t* value)
{
    __this->Points(*value);
}

// public float get_Ratio()
void Star__get_Ratio_fn(Star* __this, float* __retval)
{
    *__retval = __this->Ratio();
}

// public void set_Ratio(float value)
void Star__set_Ratio_fn(Star* __this, float* value)
{
    __this->Ratio(*value);
}

// internal float get_RotationRadians()
void Star__get_RotationRadians_fn(Star* __this, float* __retval)
{
    *__retval = __this->RotationRadians();
}

// public float get_RoundRatio()
void Star__get_RoundRatio_fn(Star* __this, float* __retval)
{
    *__retval = __this->RoundRatio();
}

// public void set_RoundRatio(float value)
void Star__set_RoundRatio_fn(Star* __this, float* value)
{
    __this->RoundRatio(*value);
}

// public int get_Points() [instance]
int32_t Star::Points()
{
    return _points;
}

// public void set_Points(int value) [instance]
void Star::Points(int32_t value)
{
    if (value == _points)
        return;

    _points = value;
    InvalidateSurfacePath();
    OnPropertyChanged(::g::Uno::UX::Selector__op_Implicit(::STRINGS[101/*"Points"*/]));
}

// public float get_Ratio() [instance]
float Star::Ratio()
{
    return _ratio;
}

// public void set_Ratio(float value) [instance]
void Star::Ratio(float value)
{
    if (value == _ratio)
        return;

    _ratio = value;
    InvalidateSurfacePath();
    OnPropertyChanged(::g::Uno::UX::Selector__op_Implicit(::STRINGS[102/*"Ratio"*/]));
}

// internal float get_RotationRadians() [instance]
float Star::RotationRadians()
{
    return (_degrees / 180.0f) * 3.14159274f;
}

// public float get_RoundRatio() [instance]
float Star::RoundRatio()
{
    return _roundRatio;
}

// public void set_RoundRatio(float value) [instance]
void Star::RoundRatio(float value)
{
    if (value == _roundRatio)
        return;

    _roundRatio = value;
    InvalidateSurfacePath();
    OnPropertyChanged(::g::Uno::UX::Selector__op_Implicit(::STRINGS[103/*"RoundRatio"*/]));
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/Backgrounds/TopFrameBackground.uno
// -----------------------------------------------------------------------------------------------

// public sealed class StatusBarBackground
// {
static void StatusBarBackground_build(uType* type)
{
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface17));
    type->SetFields(107);
}

::g::Fuse::Controls::Control_type* StatusBarBackground_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Control_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::TopFrameBackground_typeof();
    options.FieldCount = 107;
    options.InterfaceCount = 18;
    options.ObjectSize = sizeof(StatusBarBackground);
    options.TypeSize = sizeof(::g::Fuse::Controls::Control_type);
    type = (::g::Fuse::Controls::Control_type*)uClassType::New("Fuse.Controls.StatusBarBackground", options);
    type->fp_build_ = StatusBarBackground_build;
    type->fp_ctor_ = (void*)StatusBarBackground__New3_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::TopFrameBackground__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public generated StatusBarBackground()
void StatusBarBackground__ctor_6_fn(StatusBarBackground* __this)
{
    __this->ctor_6();
}

// public generated StatusBarBackground New()
void StatusBarBackground__New3_fn(StatusBarBackground** __retval)
{
    *__retval = StatusBarBackground::New3();
}

// public generated StatusBarBackground() [instance]
void StatusBarBackground::ctor_6()
{
    ctor_5();
}

// public generated StatusBarBackground New() [static]
StatusBarBackground* StatusBarBackground::New3()
{
    StatusBarBackground* obj1 = (StatusBarBackground*)uNew(StatusBarBackground_typeof());
    obj1->ctor_6();
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/.uno/ux15/Fuse.Controls.TextControl.g.uno
// ----------------------------------------------------------------------------------------------------------

// public partial sealed class TextControl.Template
// {
// static Template()
static void TextControl__Template__cctor__fn(uType* __type)
{
}

static void TextControl__Template_build(uType* type)
{
    ::STRINGS[104] = uString::Const("AndroidAppearance");
    type->SetFields(2,
        ::g::Fuse::Controls::TextControl_typeof(), offsetof(TextControl__Template, __parent1), uFieldFlagsWeak,
        ::g::Fuse::Controls::TextControl_typeof(), offsetof(TextControl__Template, __parentInstance1), uFieldFlagsWeak);
}

::g::Uno::UX::Template_type* TextControl__Template_typeof()
{
    static uSStrong< ::g::Uno::UX::Template_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Uno::UX::Template_typeof();
    options.FieldCount = 4;
    options.ObjectSize = sizeof(TextControl__Template);
    options.TypeSize = sizeof(::g::Uno::UX::Template_type);
    type = (::g::Uno::UX::Template_type*)uClassType::New("Fuse.Controls.TextControl.Template", options);
    type->fp_build_ = TextControl__Template_build;
    type->fp_cctor_ = TextControl__Template__cctor__fn;
    type->fp_New1 = (void(*)(::g::Uno::UX::Template*, uObject**))TextControl__Template__New1_fn;
    return type;
}

// public Template(Fuse.Controls.TextControl parent, Fuse.Controls.TextControl parentInstance)
void TextControl__Template__ctor_1_fn(TextControl__Template* __this, ::g::Fuse::Controls::TextControl* parent, ::g::Fuse::Controls::TextControl* parentInstance)
{
    __this->ctor_1(parent, parentInstance);
}

// public override sealed object New()
void TextControl__Template__New1_fn(TextControl__Template* __this, uObject** __retval)
{
    ::g::Fuse::Controls::Native::Android::TextView* __self1 = ::g::Fuse::Controls::Native::Android::TextView::New5();
    return *__retval = __self1, void();
}

// public Template New(Fuse.Controls.TextControl parent, Fuse.Controls.TextControl parentInstance)
void TextControl__Template__New2_fn(::g::Fuse::Controls::TextControl* parent, ::g::Fuse::Controls::TextControl* parentInstance, TextControl__Template** __retval)
{
    *__retval = TextControl__Template::New2(parent, parentInstance);
}

// public Template(Fuse.Controls.TextControl parent, Fuse.Controls.TextControl parentInstance) [instance]
void TextControl__Template::ctor_1(::g::Fuse::Controls::TextControl* parent, ::g::Fuse::Controls::TextControl* parentInstance)
{
    ctor_(::STRINGS[104/*"AndroidAppe...*/], false);
    __parent1 = parent;
    __parentInstance1 = parentInstance;
}

// public Template New(Fuse.Controls.TextControl parent, Fuse.Controls.TextControl parentInstance) [static]
TextControl__Template* TextControl__Template::New2(::g::Fuse::Controls::TextControl* parent, ::g::Fuse::Controls::TextControl* parentInstance)
{
    TextControl__Template* obj1 = (TextControl__Template*)uNew(TextControl__Template_typeof());
    obj1->ctor_1(parent, parentInstance);
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/.uno/ux15/Fuse.Controls.GraphicsView.g.uno
// -------------------------------------------------------------------------------------------------------

// public partial sealed class GraphicsView.Template
// {
// static Template()
static void GraphicsView__Template__cctor__fn(uType* __type)
{
}

static void GraphicsView__Template_build(uType* type)
{
    ::STRINGS[104] = uString::Const("AndroidAppearance");
    type->SetFields(2,
        ::g::Fuse::Controls::GraphicsView_typeof(), offsetof(GraphicsView__Template, __parent1), uFieldFlagsWeak,
        ::g::Fuse::Controls::GraphicsView_typeof(), offsetof(GraphicsView__Template, __parentInstance1), uFieldFlagsWeak);
}

::g::Uno::UX::Template_type* GraphicsView__Template_typeof()
{
    static uSStrong< ::g::Uno::UX::Template_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Uno::UX::Template_typeof();
    options.FieldCount = 4;
    options.ObjectSize = sizeof(GraphicsView__Template);
    options.TypeSize = sizeof(::g::Uno::UX::Template_type);
    type = (::g::Uno::UX::Template_type*)uClassType::New("Fuse.Controls.GraphicsView.Template", options);
    type->fp_build_ = GraphicsView__Template_build;
    type->fp_cctor_ = GraphicsView__Template__cctor__fn;
    type->fp_New1 = (void(*)(::g::Uno::UX::Template*, uObject**))GraphicsView__Template__New1_fn;
    return type;
}

// public Template(Fuse.Controls.GraphicsView parent, Fuse.Controls.GraphicsView parentInstance)
void GraphicsView__Template__ctor_1_fn(GraphicsView__Template* __this, ::g::Fuse::Controls::GraphicsView* parent, ::g::Fuse::Controls::GraphicsView* parentInstance)
{
    __this->ctor_1(parent, parentInstance);
}

// public override sealed object New()
void GraphicsView__Template__New1_fn(GraphicsView__Template* __this, uObject** __retval)
{
    ::g::Fuse::Controls::Native::Android::TextureView* __self1 = ::g::Fuse::Controls::Native::Android::TextureView::New5();
    return *__retval = __self1, void();
}

// public Template New(Fuse.Controls.GraphicsView parent, Fuse.Controls.GraphicsView parentInstance)
void GraphicsView__Template__New2_fn(::g::Fuse::Controls::GraphicsView* parent, ::g::Fuse::Controls::GraphicsView* parentInstance, GraphicsView__Template** __retval)
{
    *__retval = GraphicsView__Template::New2(parent, parentInstance);
}

// public Template(Fuse.Controls.GraphicsView parent, Fuse.Controls.GraphicsView parentInstance) [instance]
void GraphicsView__Template::ctor_1(::g::Fuse::Controls::GraphicsView* parent, ::g::Fuse::Controls::GraphicsView* parentInstance)
{
    ctor_(::STRINGS[104/*"AndroidAppe...*/], false);
    __parent1 = parent;
    __parentInstance1 = parentInstance;
}

// public Template New(Fuse.Controls.GraphicsView parent, Fuse.Controls.GraphicsView parentInstance) [static]
GraphicsView__Template* GraphicsView__Template::New2(::g::Fuse::Controls::GraphicsView* parent, ::g::Fuse::Controls::GraphicsView* parentInstance)
{
    GraphicsView__Template* obj1 = (GraphicsView__Template*)uNew(GraphicsView__Template_typeof());
    obj1->ctor_1(parent, parentInstance);
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.ScrollView/.uno/ux15/Fuse.Controls.ScrollView.g.uno
// ---------------------------------------------------------------------------------------------------------

// public partial sealed class ScrollView.Template
// {
// static Template()
static void ScrollView__Template__cctor__fn(uType* __type)
{
}

static void ScrollView__Template_build(uType* type)
{
    type->SetFields(2,
        ::g::Fuse::Controls::ScrollView_typeof(), offsetof(ScrollView__Template, __parent1), uFieldFlagsWeak);
}

::g::Uno::UX::Template_type* ScrollView__Template_typeof()
{
    static uSStrong< ::g::Uno::UX::Template_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Uno::UX::Template_typeof();
    options.FieldCount = 3;
    options.ObjectSize = sizeof(ScrollView__Template);
    options.TypeSize = sizeof(::g::Uno::UX::Template_type);
    type = (::g::Uno::UX::Template_type*)uClassType::New("Fuse.Controls.ScrollView.Template", options);
    type->fp_build_ = ScrollView__Template_build;
    type->fp_cctor_ = ScrollView__Template__cctor__fn;
    type->fp_New1 = (void(*)(::g::Uno::UX::Template*, uObject**))ScrollView__Template__New1_fn;
    return type;
}

// public override sealed object New()
void ScrollView__Template__New1_fn(ScrollView__Template* __this, uObject** __retval)
{
    ::g::Fuse::Controls::Native::Android::ScrollView* __self1 = ::g::Fuse::Controls::Native::Android::ScrollView::New5((uObject*)__this->__parent1);
    return *__retval = __self1, void();
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.TimePicker/.uno/ux15/Fuse.Controls.TimePicker.g.uno
// ---------------------------------------------------------------------------------------------------------

// public partial sealed class TimePicker.Template
// {
// static Template()
static void TimePicker__Template__cctor__fn(uType* __type)
{
    TimePicker__Template::__selector0_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[17/*"GraphicsApp...*/]);
}

static void TimePicker__Template_build(uType* type)
{
    ::STRINGS[17] = uString::Const("GraphicsAppearance");
    ::STRINGS[105] = uString::Const("TimePicker.ux");
    ::STRINGS[106] = uString::Const("GraphicsAppearance for TimePicker not implemented!");
    ::TYPES[61] = ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Drawing::Stroke_typeof(), nullptr);
    ::TYPES[6] = ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr);
    type->SetFields(2,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&TimePicker__Template::__selector0_, uFieldFlagsStatic);
}

::g::Uno::UX::Template_type* TimePicker__Template_typeof()
{
    static uSStrong< ::g::Uno::UX::Template_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Uno::UX::Template_typeof();
    options.FieldCount = 3;
    options.ObjectSize = sizeof(TimePicker__Template);
    options.TypeSize = sizeof(::g::Uno::UX::Template_type);
    type = (::g::Uno::UX::Template_type*)uClassType::New("Fuse.Controls.TimePicker.Template", options);
    type->fp_build_ = TimePicker__Template_build;
    type->fp_cctor_ = TimePicker__Template__cctor__fn;
    type->fp_New1 = (void(*)(::g::Uno::UX::Template*, uObject**))TimePicker__Template__New1_fn;
    return type;
}

// public override sealed object New()
void TimePicker__Template__New1_fn(TimePicker__Template* __this, uObject** __retval)
{
    ::g::Fuse::Controls::Panel* __self1 = ::g::Fuse::Controls::Panel::New3();
    ::g::Fuse::Controls::Text* temp = ::g::Fuse::Controls::Text::New3();
    ::g::Fuse::Controls::Rectangle* temp1 = ::g::Fuse::Controls::Rectangle::New3();
    ::g::Fuse::Drawing::Stroke* temp2 = ::g::Fuse::Drawing::Stroke::New2();
    ::g::Fuse::Drawing::StaticSolidColor* temp3 = ::g::Fuse::Drawing::StaticSolidColor::New2(::g::Uno::Float4__New2(0.9333333f, 0.9333333f, 0.9333333f, 1.0f));
    __self1->Margin(::g::Uno::Float4__New2(4.0f, 4.0f, 4.0f, 4.0f));
    __self1->Padding(::g::Uno::Float4__New2(30.0f, 30.0f, 30.0f, 30.0f));
    __self1->Name(TimePicker__Template::__selector0_);
    __self1->SourceLineNumber(2);
    __self1->SourceFileName(::STRINGS[105/*"TimePicker.ux"*/]);
    temp->Value(::STRINGS[106/*"GraphicsApp...*/]);
    temp->TextWrapping(1);
    temp->Alignment(10);
    temp->SourceLineNumber(3);
    temp->SourceFileName(::STRINGS[105/*"TimePicker.ux"*/]);
    temp1->Layer(1);
    temp1->SourceLineNumber(4);
    temp1->SourceFileName(::STRINGS[105/*"TimePicker.ux"*/]);
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(temp1->Strokes()), ::TYPES[61/*Uno.Collections.ICollection<Fuse.Drawing.Stroke>*/]), temp2);
    temp2->Color(::g::Uno::Float4__New2(0.0f, 0.0f, 0.0f, 1.0f));
    __self1->Background(temp3);
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(__self1->Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), temp);
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(__self1->Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), temp1);
    return *__retval = __self1, void();
}

::g::Uno::UX::Selector TimePicker__Template::__selector0_;
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.DatePicker/.uno/ux15/Fuse.Controls.DatePicker.g.uno
// ---------------------------------------------------------------------------------------------------------

// public partial sealed class DatePicker.Template
// {
// static Template()
static void DatePicker__Template__cctor__fn(uType* __type)
{
    DatePicker__Template::__selector0_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[17/*"GraphicsApp...*/]);
}

static void DatePicker__Template_build(uType* type)
{
    ::STRINGS[17] = uString::Const("GraphicsAppearance");
    ::STRINGS[107] = uString::Const("DatePicker.ux");
    ::STRINGS[108] = uString::Const("GraphicsAppearance for DatePicker not implemented!");
    ::TYPES[61] = ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Drawing::Stroke_typeof(), nullptr);
    ::TYPES[6] = ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr);
    type->SetFields(2,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&DatePicker__Template::__selector0_, uFieldFlagsStatic);
}

::g::Uno::UX::Template_type* DatePicker__Template_typeof()
{
    static uSStrong< ::g::Uno::UX::Template_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Uno::UX::Template_typeof();
    options.FieldCount = 3;
    options.ObjectSize = sizeof(DatePicker__Template);
    options.TypeSize = sizeof(::g::Uno::UX::Template_type);
    type = (::g::Uno::UX::Template_type*)uClassType::New("Fuse.Controls.DatePicker.Template", options);
    type->fp_build_ = DatePicker__Template_build;
    type->fp_cctor_ = DatePicker__Template__cctor__fn;
    type->fp_New1 = (void(*)(::g::Uno::UX::Template*, uObject**))DatePicker__Template__New1_fn;
    return type;
}

// public override sealed object New()
void DatePicker__Template__New1_fn(DatePicker__Template* __this, uObject** __retval)
{
    ::g::Fuse::Controls::Panel* __self1 = ::g::Fuse::Controls::Panel::New3();
    ::g::Fuse::Controls::Text* temp = ::g::Fuse::Controls::Text::New3();
    ::g::Fuse::Controls::Rectangle* temp1 = ::g::Fuse::Controls::Rectangle::New3();
    ::g::Fuse::Drawing::Stroke* temp2 = ::g::Fuse::Drawing::Stroke::New2();
    ::g::Fuse::Drawing::StaticSolidColor* temp3 = ::g::Fuse::Drawing::StaticSolidColor::New2(::g::Uno::Float4__New2(0.9333333f, 0.9333333f, 0.9333333f, 1.0f));
    __self1->Margin(::g::Uno::Float4__New2(4.0f, 4.0f, 4.0f, 4.0f));
    __self1->Padding(::g::Uno::Float4__New2(30.0f, 30.0f, 30.0f, 30.0f));
    __self1->Name(DatePicker__Template::__selector0_);
    __self1->SourceLineNumber(2);
    __self1->SourceFileName(::STRINGS[107/*"DatePicker.ux"*/]);
    temp->Value(::STRINGS[108/*"GraphicsApp...*/]);
    temp->TextWrapping(1);
    temp->Alignment(10);
    temp->SourceLineNumber(3);
    temp->SourceFileName(::STRINGS[107/*"DatePicker.ux"*/]);
    temp1->Layer(1);
    temp1->SourceLineNumber(4);
    temp1->SourceFileName(::STRINGS[107/*"DatePicker.ux"*/]);
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(temp1->Strokes()), ::TYPES[61/*Uno.Collections.ICollection<Fuse.Drawing.Stroke>*/]), temp2);
    temp2->Color(::g::Uno::Float4__New2(0.0f, 0.0f, 0.0f, 1.0f));
    __self1->Background(temp3);
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(__self1->Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), temp);
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(__self1->Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), temp1);
    return *__retval = __self1, void();
}

::g::Uno::UX::Selector DatePicker__Template::__selector0_;
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.TimePicker/.uno/ux15/Fuse.Controls.TimePicker.g.uno
// ---------------------------------------------------------------------------------------------------------

// public partial sealed class TimePicker.Template1
// {
// static Template1()
static void TimePicker__Template1__cctor__fn(uType* __type)
{
}

static void TimePicker__Template1_build(uType* type)
{
    type->SetFields(2,
        ::g::Fuse::Controls::TimePicker_typeof(), offsetof(TimePicker__Template1, __parent1), uFieldFlagsWeak);
}

::g::Uno::UX::Template_type* TimePicker__Template1_typeof()
{
    static uSStrong< ::g::Uno::UX::Template_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Uno::UX::Template_typeof();
    options.FieldCount = 3;
    options.ObjectSize = sizeof(TimePicker__Template1);
    options.TypeSize = sizeof(::g::Uno::UX::Template_type);
    type = (::g::Uno::UX::Template_type*)uClassType::New("Fuse.Controls.TimePicker.Template1", options);
    type->fp_build_ = TimePicker__Template1_build;
    type->fp_cctor_ = TimePicker__Template1__cctor__fn;
    type->fp_New1 = (void(*)(::g::Uno::UX::Template*, uObject**))TimePicker__Template1__New1_fn;
    return type;
}

// public override sealed object New()
void TimePicker__Template1__New1_fn(TimePicker__Template1* __this, uObject** __retval)
{
    ::g::Fuse::Controls::Native::iOS::TimePickerView* __self1 = ::g::Fuse::Controls::Native::iOS::TimePickerView::New1(__this->__parent1);
    return *__retval = __self1, void();
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/.uno/ux15/Fuse.Controls.TextControl.g.uno
// ----------------------------------------------------------------------------------------------------------

// public partial sealed class TextControl.Template1
// {
// static Template1()
static void TextControl__Template1__cctor__fn(uType* __type)
{
}

static void TextControl__Template1_build(uType* type)
{
    ::STRINGS[109] = uString::Const("iOSAppearance");
    type->SetFields(2,
        ::g::Fuse::Controls::TextControl_typeof(), offsetof(TextControl__Template1, __parent1), uFieldFlagsWeak,
        ::g::Fuse::Controls::TextControl_typeof(), offsetof(TextControl__Template1, __parentInstance1), uFieldFlagsWeak);
}

::g::Uno::UX::Template_type* TextControl__Template1_typeof()
{
    static uSStrong< ::g::Uno::UX::Template_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Uno::UX::Template_typeof();
    options.FieldCount = 4;
    options.ObjectSize = sizeof(TextControl__Template1);
    options.TypeSize = sizeof(::g::Uno::UX::Template_type);
    type = (::g::Uno::UX::Template_type*)uClassType::New("Fuse.Controls.TextControl.Template1", options);
    type->fp_build_ = TextControl__Template1_build;
    type->fp_cctor_ = TextControl__Template1__cctor__fn;
    type->fp_New1 = (void(*)(::g::Uno::UX::Template*, uObject**))TextControl__Template1__New1_fn;
    return type;
}

// public Template1(Fuse.Controls.TextControl parent, Fuse.Controls.TextControl parentInstance)
void TextControl__Template1__ctor_1_fn(TextControl__Template1* __this, ::g::Fuse::Controls::TextControl* parent, ::g::Fuse::Controls::TextControl* parentInstance)
{
    __this->ctor_1(parent, parentInstance);
}

// public override sealed object New()
void TextControl__Template1__New1_fn(TextControl__Template1* __this, uObject** __retval)
{
    ::g::Fuse::Controls::Native::iOS::TextView* __self1 = ::g::Fuse::Controls::Native::iOS::TextView::New1();
    return *__retval = __self1, void();
}

// public Template1 New(Fuse.Controls.TextControl parent, Fuse.Controls.TextControl parentInstance)
void TextControl__Template1__New2_fn(::g::Fuse::Controls::TextControl* parent, ::g::Fuse::Controls::TextControl* parentInstance, TextControl__Template1** __retval)
{
    *__retval = TextControl__Template1::New2(parent, parentInstance);
}

// public Template1(Fuse.Controls.TextControl parent, Fuse.Controls.TextControl parentInstance) [instance]
void TextControl__Template1::ctor_1(::g::Fuse::Controls::TextControl* parent, ::g::Fuse::Controls::TextControl* parentInstance)
{
    ctor_(::STRINGS[109/*"iOSAppearance"*/], false);
    __parent1 = parent;
    __parentInstance1 = parentInstance;
}

// public Template1 New(Fuse.Controls.TextControl parent, Fuse.Controls.TextControl parentInstance) [static]
TextControl__Template1* TextControl__Template1::New2(::g::Fuse::Controls::TextControl* parent, ::g::Fuse::Controls::TextControl* parentInstance)
{
    TextControl__Template1* obj1 = (TextControl__Template1*)uNew(TextControl__Template1_typeof());
    obj1->ctor_1(parent, parentInstance);
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.DatePicker/.uno/ux15/Fuse.Controls.DatePicker.g.uno
// ---------------------------------------------------------------------------------------------------------

// public partial sealed class DatePicker.Template1
// {
// static Template1()
static void DatePicker__Template1__cctor__fn(uType* __type)
{
}

static void DatePicker__Template1_build(uType* type)
{
    type->SetFields(2,
        ::g::Fuse::Controls::DatePicker_typeof(), offsetof(DatePicker__Template1, __parent1), uFieldFlagsWeak);
}

::g::Uno::UX::Template_type* DatePicker__Template1_typeof()
{
    static uSStrong< ::g::Uno::UX::Template_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Uno::UX::Template_typeof();
    options.FieldCount = 3;
    options.ObjectSize = sizeof(DatePicker__Template1);
    options.TypeSize = sizeof(::g::Uno::UX::Template_type);
    type = (::g::Uno::UX::Template_type*)uClassType::New("Fuse.Controls.DatePicker.Template1", options);
    type->fp_build_ = DatePicker__Template1_build;
    type->fp_cctor_ = DatePicker__Template1__cctor__fn;
    type->fp_New1 = (void(*)(::g::Uno::UX::Template*, uObject**))DatePicker__Template1__New1_fn;
    return type;
}

// public override sealed object New()
void DatePicker__Template1__New1_fn(DatePicker__Template1* __this, uObject** __retval)
{
    ::g::Fuse::Controls::Native::iOS::DatePickerView* __self1 = ::g::Fuse::Controls::Native::iOS::DatePickerView::New1(__this->__parent1);
    return *__retval = __self1, void();
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.ScrollView/.uno/ux15/Fuse.Controls.ScrollView.g.uno
// ---------------------------------------------------------------------------------------------------------

// public partial sealed class ScrollView.Template1
// {
// static Template1()
static void ScrollView__Template1__cctor__fn(uType* __type)
{
}

static void ScrollView__Template1_build(uType* type)
{
    type->SetFields(2,
        ::g::Fuse::Controls::ScrollView_typeof(), offsetof(ScrollView__Template1, __parent1), uFieldFlagsWeak);
}

::g::Uno::UX::Template_type* ScrollView__Template1_typeof()
{
    static uSStrong< ::g::Uno::UX::Template_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Uno::UX::Template_typeof();
    options.FieldCount = 3;
    options.ObjectSize = sizeof(ScrollView__Template1);
    options.TypeSize = sizeof(::g::Uno::UX::Template_type);
    type = (::g::Uno::UX::Template_type*)uClassType::New("Fuse.Controls.ScrollView.Template1", options);
    type->fp_build_ = ScrollView__Template1_build;
    type->fp_cctor_ = ScrollView__Template1__cctor__fn;
    type->fp_New1 = (void(*)(::g::Uno::UX::Template*, uObject**))ScrollView__Template1__New1_fn;
    return type;
}

// public override sealed object New()
void ScrollView__Template1__New1_fn(ScrollView__Template1* __this, uObject** __retval)
{
    ::g::Fuse::Controls::Native::iOS::ScrollView* __self1 = ::g::Fuse::Controls::Native::iOS::ScrollView::New1((uObject*)__this->__parent1);
    return *__retval = __self1, void();
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/.uno/ux15/Fuse.Controls.GraphicsView.g.uno
// -------------------------------------------------------------------------------------------------------

// public partial sealed class GraphicsView.Template1
// {
// static Template1()
static void GraphicsView__Template1__cctor__fn(uType* __type)
{
}

static void GraphicsView__Template1_build(uType* type)
{
    ::STRINGS[109] = uString::Const("iOSAppearance");
    type->SetFields(2,
        ::g::Fuse::Controls::GraphicsView_typeof(), offsetof(GraphicsView__Template1, __parent1), uFieldFlagsWeak,
        ::g::Fuse::Controls::GraphicsView_typeof(), offsetof(GraphicsView__Template1, __parentInstance1), uFieldFlagsWeak);
}

::g::Uno::UX::Template_type* GraphicsView__Template1_typeof()
{
    static uSStrong< ::g::Uno::UX::Template_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Uno::UX::Template_typeof();
    options.FieldCount = 4;
    options.ObjectSize = sizeof(GraphicsView__Template1);
    options.TypeSize = sizeof(::g::Uno::UX::Template_type);
    type = (::g::Uno::UX::Template_type*)uClassType::New("Fuse.Controls.GraphicsView.Template1", options);
    type->fp_build_ = GraphicsView__Template1_build;
    type->fp_cctor_ = GraphicsView__Template1__cctor__fn;
    type->fp_New1 = (void(*)(::g::Uno::UX::Template*, uObject**))GraphicsView__Template1__New1_fn;
    return type;
}

// public Template1(Fuse.Controls.GraphicsView parent, Fuse.Controls.GraphicsView parentInstance)
void GraphicsView__Template1__ctor_1_fn(GraphicsView__Template1* __this, ::g::Fuse::Controls::GraphicsView* parent, ::g::Fuse::Controls::GraphicsView* parentInstance)
{
    __this->ctor_1(parent, parentInstance);
}

// public override sealed object New()
void GraphicsView__Template1__New1_fn(GraphicsView__Template1* __this, uObject** __retval)
{
    ::g::Fuse::Controls::Native::iOS::GraphicsView* __self1 = ::g::Fuse::Controls::Native::iOS::GraphicsView::New1(__this->__parent1);
    return *__retval = __self1, void();
}

// public Template1 New(Fuse.Controls.GraphicsView parent, Fuse.Controls.GraphicsView parentInstance)
void GraphicsView__Template1__New2_fn(::g::Fuse::Controls::GraphicsView* parent, ::g::Fuse::Controls::GraphicsView* parentInstance, GraphicsView__Template1** __retval)
{
    *__retval = GraphicsView__Template1::New2(parent, parentInstance);
}

// public Template1(Fuse.Controls.GraphicsView parent, Fuse.Controls.GraphicsView parentInstance) [instance]
void GraphicsView__Template1::ctor_1(::g::Fuse::Controls::GraphicsView* parent, ::g::Fuse::Controls::GraphicsView* parentInstance)
{
    ctor_(::STRINGS[109/*"iOSAppearance"*/], false);
    __parent1 = parent;
    __parentInstance1 = parentInstance;
}

// public Template1 New(Fuse.Controls.GraphicsView parent, Fuse.Controls.GraphicsView parentInstance) [static]
GraphicsView__Template1* GraphicsView__Template1::New2(::g::Fuse::Controls::GraphicsView* parent, ::g::Fuse::Controls::GraphicsView* parentInstance)
{
    GraphicsView__Template1* obj1 = (GraphicsView__Template1*)uNew(GraphicsView__Template1_typeof());
    obj1->ctor_1(parent, parentInstance);
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.TimePicker/.uno/ux15/Fuse.Controls.TimePicker.g.uno
// ---------------------------------------------------------------------------------------------------------

// public partial sealed class TimePicker.Template2
// {
// static Template2()
static void TimePicker__Template2__cctor__fn(uType* __type)
{
}

static void TimePicker__Template2_build(uType* type)
{
    type->SetFields(2,
        ::g::Fuse::Controls::TimePicker_typeof(), offsetof(TimePicker__Template2, __parent1), uFieldFlagsWeak);
}

::g::Uno::UX::Template_type* TimePicker__Template2_typeof()
{
    static uSStrong< ::g::Uno::UX::Template_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Uno::UX::Template_typeof();
    options.FieldCount = 3;
    options.ObjectSize = sizeof(TimePicker__Template2);
    options.TypeSize = sizeof(::g::Uno::UX::Template_type);
    type = (::g::Uno::UX::Template_type*)uClassType::New("Fuse.Controls.TimePicker.Template2", options);
    type->fp_build_ = TimePicker__Template2_build;
    type->fp_cctor_ = TimePicker__Template2__cctor__fn;
    type->fp_New1 = (void(*)(::g::Uno::UX::Template*, uObject**))TimePicker__Template2__New1_fn;
    return type;
}

// public override sealed object New()
void TimePicker__Template2__New1_fn(TimePicker__Template2* __this, uObject** __retval)
{
    ::g::Fuse::Controls::Native::Android::TimePickerView* __self1 = ::g::Fuse::Controls::Native::Android::TimePickerView::New5(__this->__parent1);
    return *__retval = __self1, void();
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.DatePicker/.uno/ux15/Fuse.Controls.DatePicker.g.uno
// ---------------------------------------------------------------------------------------------------------

// public partial sealed class DatePicker.Template2
// {
// static Template2()
static void DatePicker__Template2__cctor__fn(uType* __type)
{
}

static void DatePicker__Template2_build(uType* type)
{
    type->SetFields(2,
        ::g::Fuse::Controls::DatePicker_typeof(), offsetof(DatePicker__Template2, __parent1), uFieldFlagsWeak);
}

::g::Uno::UX::Template_type* DatePicker__Template2_typeof()
{
    static uSStrong< ::g::Uno::UX::Template_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Uno::UX::Template_typeof();
    options.FieldCount = 3;
    options.ObjectSize = sizeof(DatePicker__Template2);
    options.TypeSize = sizeof(::g::Uno::UX::Template_type);
    type = (::g::Uno::UX::Template_type*)uClassType::New("Fuse.Controls.DatePicker.Template2", options);
    type->fp_build_ = DatePicker__Template2_build;
    type->fp_cctor_ = DatePicker__Template2__cctor__fn;
    type->fp_New1 = (void(*)(::g::Uno::UX::Template*, uObject**))DatePicker__Template2__New1_fn;
    return type;
}

// public override sealed object New()
void DatePicker__Template2__New1_fn(DatePicker__Template2* __this, uObject** __retval)
{
    ::g::Fuse::Controls::Native::Android::DatePickerView* __self1 = ::g::Fuse::Controls::Native::Android::DatePickerView::New5(__this->__parent1);
    return *__retval = __self1, void();
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/TextControls/Text.uno
// --------------------------------------------------------------------------------------

// public sealed class Text
// {
static void Text_build(uType* type)
{
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::TextControl_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::TextControl_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::TextControl_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::TextControl_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::TextControl_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::TextControl_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::TextControl_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::TextControl_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::TextControl_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::TextControl_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::TextControl_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::TextControl_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::TextControl_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::TextControl_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::TextControl_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::TextControl_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::TextControl_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::TextControl_type, interface17),
        ::g::Fuse::Triggers::IValue_typeof()->MakeType(::g::Uno::String_typeof(), nullptr), offsetof(::g::Fuse::Controls::TextControl_type, interface18));
    type->SetFields(117);
}

::g::Fuse::Controls::TextControl_type* Text_typeof()
{
    static uSStrong< ::g::Fuse::Controls::TextControl_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::TextControl_typeof();
    options.FieldCount = 117;
    options.InterfaceCount = 19;
    options.ObjectSize = sizeof(Text);
    options.TypeSize = sizeof(::g::Fuse::Controls::TextControl_type);
    type = (::g::Fuse::Controls::TextControl_type*)uClassType::New("Fuse.Controls.Text", options);
    type->fp_build_ = Text_build;
    type->fp_ctor_ = (void*)Text__New3_fn;
    type->interface18.fp_get_Value = (void(*)(uObject*, uTRef))::g::Fuse::Controls::TextControl__get_Value_fn;
    type->interface18.fp_set_Value = (void(*)(uObject*, void*))::g::Fuse::Controls::TextControl__set_Value_fn;
    type->interface18.fp_add_ValueChanged = (void(*)(uObject*, uDelegate*))::g::Fuse::Controls::TextControl__add_ValueChanged_fn;
    type->interface18.fp_remove_ValueChanged = (void(*)(uObject*, uDelegate*))::g::Fuse::Controls::TextControl__remove_ValueChanged_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public generated Text()
void Text__ctor_7_fn(Text* __this)
{
    __this->ctor_7();
}

// public generated Text New()
void Text__New3_fn(Text** __retval)
{
    *__retval = Text::New3();
}

// public generated Text() [instance]
void Text::ctor_7()
{
    ctor_6();
}

// public generated Text New() [static]
Text* Text::New3()
{
    Text* obj1 = (Text*)uNew(Text_typeof());
    obj1->ctor_7();
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Native/TextEnums.uno
// --------------------------------------------------------------------------

// public enum TextAlignment
uEnumType* TextAlignment_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.TextAlignment", ::g::Uno::Int_typeof(), 3);
    type->SetLiterals(
        "Left", 0LL,
        "Center", 1LL,
        "Right", 2LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/TextControls/TextControl.GraphicsText.uno
// ----------------------------------------------------------------------------------------------------------

// public interfacemodifiers class TextControl
// {
// static TextControl()
static void TextControl__cctor_3_fn(uType* __type)
{
    TextControl::ValuePropertyName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[14/*"Value"*/]);
    TextControl::MaxLengthPropertyName_ = ::g::Uno::UX::Selector__op_Implicit(uString::Const("MaxLength"));
    TextControl::TextWrappingPropertyName_ = ::g::Uno::UX::Selector__op_Implicit(uString::Const("TextWrapping"));
    TextControl::LineSpacingPropertyName_ = ::g::Uno::UX::Selector__op_Implicit(uString::Const("LineSpacing"));
    TextControl::MaxLinesPropertyName_ = ::g::Uno::UX::Selector__op_Implicit(uString::Const("MaxLines"));
    TextControl::FontSizePropertyName_ = ::g::Uno::UX::Selector__op_Implicit(uString::Const("FontSize"));
    TextControl::FontPropertyName_ = ::g::Uno::UX::Selector__op_Implicit(uString::Const("Font"));
    TextControl::TextAlignmentPropertyName_ = ::g::Uno::UX::Selector__op_Implicit(uString::Const("TextAlignment"));
    TextControl::ColorPropertyName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[56/*"Color"*/]);
    TextControl::TextColorPropertyName_ = ::g::Uno::UX::Selector__op_Implicit(uString::Const("TextColor"));
    TextControl::TextTruncationPropertyName_ = ::g::Uno::UX::Selector__op_Implicit(uString::Const("TextTruncation"));
    TextControl::LoadAsyncPropertyName_ = ::g::Uno::UX::Selector__op_Implicit(uString::Const("LoadAsync"));
}

static void TextControl_build(uType* type)
{
    type->SetDependencies(
        ::g::Fuse::Font_typeof(),
        ::g::Uno::Math_typeof(),
        ::g::Fuse::Platform::SystemUI_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(TextControl_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(TextControl_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(TextControl_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(TextControl_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(TextControl_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(TextControl_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(TextControl_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(TextControl_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(TextControl_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(TextControl_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(TextControl_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(TextControl_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(TextControl_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(TextControl_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(TextControl_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(TextControl_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(TextControl_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(TextControl_type, interface17),
        ::g::Fuse::Triggers::IValue_typeof()->MakeType(::g::Uno::String_typeof(), nullptr), offsetof(TextControl_type, interface18));
    type->SetFields(108,
        ::g::Fuse::Controls::ITextRenderer_typeof(), offsetof(TextControl, _textRenderer), 0,
        ::g::Uno::String_typeof(), offsetof(TextControl, _value), 0,
        ::g::Uno::Int_typeof(), offsetof(TextControl, _maxLength), 0,
        ::g::Uno::Float_typeof(), offsetof(TextControl, _fontSize), 0,
        ::g::Uno::Float_typeof(), offsetof(TextControl, _maxFontScale), 0,
        ::g::Uno::Float_typeof(), offsetof(TextControl, _minFontScale), 0,
        ::g::Fuse::Font_typeof(), offsetof(TextControl, _font), 0,
        ::g::Uno::Float4_typeof(), offsetof(TextControl, _color), 0,
        ::g::Uno::UX::ValueChangedHandler_typeof()->MakeType(::g::Uno::String_typeof(), nullptr), offsetof(TextControl, ValueChanged1), 0,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&TextControl::ValuePropertyName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&TextControl::MaxLengthPropertyName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&TextControl::TextWrappingPropertyName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&TextControl::LineSpacingPropertyName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&TextControl::MaxLinesPropertyName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&TextControl::FontSizePropertyName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&TextControl::FontPropertyName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&TextControl::TextAlignmentPropertyName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&TextControl::ColorPropertyName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&TextControl::TextColorPropertyName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&TextControl::TextTruncationPropertyName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&TextControl::LoadAsyncPropertyName_, uFieldFlagsStatic,
        ::g::Uno::Func1_typeof()->MakeType(type, ::g::Fuse::Controls::ITextRenderer_typeof(), nullptr), (uintptr_t)&TextControl::_TextRendererFactory_, uFieldFlagsStatic);
}

TextControl_type* TextControl_typeof()
{
    static uSStrong<TextControl_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::LayoutControl_typeof();
    options.FieldCount = 130;
    options.InterfaceCount = 19;
    options.DependencyCount = 3;
    options.ObjectSize = sizeof(TextControl);
    options.TypeSize = sizeof(TextControl_type);
    type = (TextControl_type*)uClassType::New("Fuse.Controls.TextControl", options);
    type->fp_build_ = TextControl_build;
    type->fp_cctor_ = TextControl__cctor_3_fn;
    type->fp_ArrangePaddingBox = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::LayoutParams*))TextControl__ArrangePaddingBox_fn;
    type->fp_CalcRenderBounds = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::VisualBounds**))TextControl__CalcRenderBounds_fn;
    type->fp_DrawVisual = (void(*)(::g::Fuse::Controls::Control*, ::g::Fuse::DrawContext*))TextControl__DrawVisual_fn;
    type->fp_FastTrackDrawWithOpacity = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::DrawContext*, bool*))TextControl__FastTrackDrawWithOpacity_fn;
    type->fp_GetContentSize = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::LayoutParams*, ::g::Uno::Float2*))TextControl__GetContentSize_fn;
    type->fp_get_HitTestLocalVisualBounds = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::VisualBounds**))TextControl__get_HitTestLocalVisualBounds_fn;
    type->fp_OnHitTestLocalVisual = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::HitTestContext*))TextControl__OnHitTestLocalVisual_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))TextControl__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))TextControl__OnUnrooted_fn;
    type->fp_PushPropertiesToNativeView = (void(*)(::g::Fuse::Controls::Control*))TextControl__PushPropertiesToNativeView_fn;
    type->fp_SoftDispose = (void(*)(::g::Fuse::Node*))TextControl__SoftDispose_fn;
    type->interface18.fp_get_Value = (void(*)(uObject*, uTRef))TextControl__get_Value_fn;
    type->interface18.fp_set_Value = (void(*)(uObject*, void*))TextControl__set_Value_fn;
    type->interface18.fp_add_ValueChanged = (void(*)(uObject*, uDelegate*))TextControl__add_ValueChanged_fn;
    type->interface18.fp_remove_ValueChanged = (void(*)(uObject*, uDelegate*))TextControl__remove_ValueChanged_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public TextControl()
void TextControl__ctor_6_fn(TextControl* __this)
{
    __this->ctor_6();
}

// protected override sealed void ArrangePaddingBox(Fuse.LayoutParams lp)
void TextControl__ArrangePaddingBox_fn(TextControl* __this, ::g::Fuse::LayoutParams* lp)
{
    ::g::Fuse::LayoutParams lp_ = *lp;
    ::g::Fuse::Controls::LayoutControl__ArrangePaddingBox_fn(__this, uCRef(lp_));

    if (__this->_textRenderer != nullptr)
        ::g::Fuse::Controls::ITextRenderer::Arrange(uInterface(uPtr(__this->_textRenderer), ::g::Fuse::Controls::ITextRenderer_typeof()), ::g::Uno::Float2__New1(0.0f), lp_.Size());
}

// protected override sealed Fuse.VisualBounds CalcRenderBounds()
void TextControl__CalcRenderBounds_fn(TextControl* __this, ::g::Fuse::VisualBounds** __retval)
{
    ::g::Fuse::VisualBounds* ret3;
    ::g::Fuse::VisualBounds* b = (::g::Fuse::Controls::Control__CalcRenderBounds_fn(__this, &ret3), ret3);

    if (__this->_textRenderer != nullptr)
        b = uPtr(b)->AddRect1(::g::Fuse::Controls::ITextRenderer::GetRenderBounds(uInterface(uPtr(__this->_textRenderer), ::g::Fuse::Controls::ITextRenderer_typeof())));

    return *__retval = b, void();
}

// public float4 get_Color()
void TextControl__get_Color_fn(TextControl* __this, ::g::Uno::Float4* __retval)
{
    *__retval = __this->Color();
}

// public void set_Color(float4 value)
void TextControl__set_Color_fn(TextControl* __this, ::g::Uno::Float4* value)
{
    __this->Color(*value);
}

// protected override sealed void DrawVisual(Fuse.DrawContext dc)
void TextControl__DrawVisual_fn(TextControl* __this, ::g::Fuse::DrawContext* dc)
{
    uString* str = __this->RenderValue();

    if ((__this->_textRenderer != nullptr) && !::g::Uno::String::IsNullOrEmpty(str))
        ::g::Fuse::Controls::ITextRenderer::Draw(uInterface(uPtr(__this->_textRenderer), ::g::Fuse::Controls::ITextRenderer_typeof()), dc, __this);
}

// private bool EnforceMaxLength(string& v)
void TextControl__EnforceMaxLength_fn(TextControl* __this, uString** v, bool* __retval)
{
    *__retval = __this->EnforceMaxLength(v);
}

// protected override sealed bool FastTrackDrawWithOpacity(Fuse.DrawContext dc)
void TextControl__FastTrackDrawWithOpacity_fn(TextControl* __this, ::g::Fuse::DrawContext* dc, bool* __retval)
{
    return *__retval = false, void();
}

// public Fuse.Font get_Font()
void TextControl__get_Font_fn(TextControl* __this, ::g::Fuse::Font** __retval)
{
    *__retval = __this->Font();
}

// public void set_Font(Fuse.Font value)
void TextControl__set_Font_fn(TextControl* __this, ::g::Fuse::Font* value)
{
    __this->Font(value);
}

// public float get_FontSize()
void TextControl__get_FontSize_fn(TextControl* __this, float* __retval)
{
    *__retval = __this->FontSize();
}

// public void set_FontSize(float value)
void TextControl__set_FontSize_fn(TextControl* __this, float* value)
{
    __this->FontSize(*value);
}

// public float get_FontSizeScaled()
void TextControl__get_FontSizeScaled_fn(TextControl* __this, float* __retval)
{
    *__retval = __this->FontSizeScaled();
}

// protected override sealed float2 GetContentSize(Fuse.LayoutParams lp)
void TextControl__GetContentSize_fn(TextControl* __this, ::g::Fuse::LayoutParams* lp, ::g::Uno::Float2* __retval)
{
    ::g::Uno::Float2 ret4;
    ::g::Fuse::LayoutParams lp_ = *lp;
    ::g::Uno::Float2 b = (::g::Fuse::Controls::LayoutControl__GetContentSize_fn(__this, uCRef(lp_), &ret4), ret4);

    if (__this->_textRenderer != nullptr)
    {
        ::g::Uno::Float2 t = ::g::Fuse::Controls::ITextRenderer::GetContentSize(uInterface(uPtr(__this->_textRenderer), ::g::Fuse::Controls::ITextRenderer_typeof()), lp_);
        b = ::g::Uno::Math::Max3(t, b);
    }

    return *__retval = b, void();
}

// protected Fuse.Controls.Native.ITextView GetITextView()
void TextControl__GetITextView_fn(TextControl* __this, uObject** __retval)
{
    *__retval = __this->GetITextView();
}

// protected override sealed Fuse.VisualBounds get_HitTestLocalVisualBounds()
void TextControl__get_HitTestLocalVisualBounds_fn(TextControl* __this, ::g::Fuse::VisualBounds** __retval)
{
    ::g::Fuse::VisualBounds* ret5;
    ::g::Fuse::VisualBounds* b = (::g::Fuse::Controls::Control__get_HitTestLocalVisualBounds_fn(__this, &ret5), ret5);
    b = uPtr(b)->AddRect(::g::Uno::Float2__New1(0.0f), __this->ActualSize());
    return *__retval = b, void();
}

// private void InitializeUX()
void TextControl__InitializeUX_fn(TextControl* __this)
{
    __this->InitializeUX();
}

// protected void InvalidateRenderer()
void TextControl__InvalidateRenderer_fn(TextControl* __this)
{
    __this->InvalidateRenderer();
}

// private void InvalidateTextRenderer()
void TextControl__InvalidateTextRenderer_fn(TextControl* __this)
{
    __this->InvalidateTextRenderer();
}

// public float get_LineSpacing()
void TextControl__get_LineSpacing_fn(TextControl* __this, float* __retval)
{
    *__retval = __this->LineSpacing();
}

// public void set_LineSpacing(float value)
void TextControl__set_LineSpacing_fn(TextControl* __this, float* value)
{
    __this->LineSpacing(*value);
}

// public int get_MaxLength()
void TextControl__get_MaxLength_fn(TextControl* __this, int32_t* __retval)
{
    *__retval = __this->MaxLength();
}

// public void set_MaxLength(int value)
void TextControl__set_MaxLength_fn(TextControl* __this, int32_t* value)
{
    __this->MaxLength(*value);
}

// public int get_MaxLines()
void TextControl__get_MaxLines_fn(TextControl* __this, int32_t* __retval)
{
    *__retval = __this->MaxLines();
}

// public void set_MaxLines(int value)
void TextControl__set_MaxLines_fn(TextControl* __this, int32_t* value)
{
    __this->MaxLines(*value);
}

// protected void OnColorChanged(Uno.UX.IPropertyListener origin)
void TextControl__OnColorChanged_fn(TextControl* __this, uObject* origin)
{
    __this->OnColorChanged(origin);
}

// protected void OnFontChanged()
void TextControl__OnFontChanged_fn(TextControl* __this)
{
    __this->OnFontChanged();
}

// protected void OnFontSizeChanged()
void TextControl__OnFontSizeChanged_fn(TextControl* __this)
{
    __this->OnFontSizeChanged();
}

// protected override sealed void OnHitTestLocalVisual(Fuse.HitTestContext htc)
void TextControl__OnHitTestLocalVisual_fn(TextControl* __this, ::g::Fuse::HitTestContext* htc)
{
    if (__this->IsPointInside(uPtr(htc)->LocalPoint()))
        uPtr(htc)->Hit(__this);

    ::g::Fuse::Controls::Control__OnHitTestLocalVisual_fn(__this, htc);
}

// protected void OnLineSpacingChanged()
void TextControl__OnLineSpacingChanged_fn(TextControl* __this)
{
    __this->OnLineSpacingChanged();
}

// protected void OnMaxLengthChanged()
void TextControl__OnMaxLengthChanged_fn(TextControl* __this)
{
    __this->OnMaxLengthChanged();
}

// protected void OnMaxLinesChanged()
void TextControl__OnMaxLinesChanged_fn(TextControl* __this)
{
    __this->OnMaxLinesChanged();
}

// protected override sealed void OnRooted()
void TextControl__OnRooted_fn(TextControl* __this)
{
    ::g::Fuse::Controls::LayoutControl__OnRooted_fn(__this);
    ::g::Fuse::Platform::SystemUI::add_TextScaleFactorChanged(uDelegate::New(::g::Uno::Action1_typeof()->MakeType(::g::Uno::Float_typeof(), nullptr), (void*)TextControl__TextScaleFactorChanged_fn, __this));

    if (__this->VisualContext() == 1)
    {
        if (::g::Uno::Delegate::op_Inequality(TextControl::TextRendererFactory(), nullptr))
            __this->_textRenderer = (uObject*)uPtr(TextControl::TextRendererFactory())->Invoke(1, __this);
        else
            __this->_textRenderer = (uObject*)::g::Fuse::Controls::FallbackTextRenderer::TextRenderer::New1(__this);

        __this->AddDrawCost(2.0);
    }
}

// protected void OnTextAlignmentChanged()
void TextControl__OnTextAlignmentChanged_fn(TextControl* __this)
{
    __this->OnTextAlignmentChanged();
}

// protected void OnTextTruncationChanged()
void TextControl__OnTextTruncationChanged_fn(TextControl* __this)
{
    __this->OnTextTruncationChanged();
}

// protected void OnTextWrappingChanged()
void TextControl__OnTextWrappingChanged_fn(TextControl* __this)
{
    __this->OnTextWrappingChanged();
}

// protected override sealed void OnUnrooted()
void TextControl__OnUnrooted_fn(TextControl* __this)
{
    if (__this->VisualContext() == 1)
    {
        __this->RemoveDrawCost(2.0);

        if (__this->_textRenderer != nullptr)
            ::g::Fuse::Controls::ITextRenderer::SoftDispose(uInterface(uPtr(__this->_textRenderer), ::g::Fuse::Controls::ITextRenderer_typeof()));

        __this->_textRenderer = nullptr;
    }

    ::g::Fuse::Platform::SystemUI::remove_TextScaleFactorChanged(uDelegate::New(::g::Uno::Action1_typeof()->MakeType(::g::Uno::Float_typeof(), nullptr), (void*)TextControl__TextScaleFactorChanged_fn, __this));
    ::g::Fuse::Controls::LayoutControl__OnUnrooted_fn(__this);
}

// protected void OnValueChanged(Uno.UX.IPropertyListener origin)
void TextControl__OnValueChanged_fn(TextControl* __this, uObject* origin)
{
    __this->OnValueChanged(origin);
}

// protected override sealed void PushPropertiesToNativeView()
void TextControl__PushPropertiesToNativeView_fn(TextControl* __this)
{
    ::g::Fuse::Controls::Control__PushPropertiesToNativeView_fn(__this);
    uObject* tv = uAs<uObject*>(__this->NativeView(), ::g::Fuse::Controls::Native::ITextView_typeof());
    ::g::Fuse::Controls::Native::ITextView::Value(uInterface(uPtr(tv), ::g::Fuse::Controls::Native::ITextView_typeof()), __this->Value());
    ::g::Fuse::Controls::Native::ITextView::MaxLength(uInterface(tv, ::g::Fuse::Controls::Native::ITextView_typeof()), __this->MaxLength());
    ::g::Fuse::Controls::Native::ITextView::TextTruncation(uInterface(tv, ::g::Fuse::Controls::Native::ITextView_typeof()), __this->TextTruncation());
    ::g::Fuse::Controls::Native::ITextView::TextWrapping(uInterface(tv, ::g::Fuse::Controls::Native::ITextView_typeof()), __this->TextWrapping());
    ::g::Fuse::Controls::Native::ITextView::LineSpacing(uInterface(tv, ::g::Fuse::Controls::Native::ITextView_typeof()), __this->LineSpacing());
    ::g::Fuse::Controls::Native::ITextView::FontSize(uInterface(tv, ::g::Fuse::Controls::Native::ITextView_typeof()), __this->FontSize());
    ::g::Fuse::Controls::Native::ITextView::Font(uInterface(tv, ::g::Fuse::Controls::Native::ITextView_typeof()), __this->Font());
    ::g::Fuse::Controls::Native::ITextView::TextAlignment(uInterface(tv, ::g::Fuse::Controls::Native::ITextView_typeof()), __this->TextAlignment());
    ::g::Fuse::Controls::Native::ITextView::TextColor(uInterface(tv, ::g::Fuse::Controls::Native::ITextView_typeof()), __this->Color());
    ::g::Fuse::Controls::Native::ITextView::MaxLines(uInterface(tv, ::g::Fuse::Controls::Native::ITextView_typeof()), __this->MaxLines());
}

// internal float4 get_RenderColor()
void TextControl__get_RenderColor_fn(TextControl* __this, ::g::Uno::Float4* __retval)
{
    *__retval = __this->RenderColor();
}

// internal string get_RenderValue()
void TextControl__get_RenderValue_fn(TextControl* __this, uString** __retval)
{
    *__retval = __this->RenderValue();
}

// public void SetColor(float4 color, Uno.UX.IPropertyListener origin)
void TextControl__SetColor_fn(TextControl* __this, ::g::Uno::Float4* color, uObject* origin)
{
    __this->SetColor(*color, origin);
}

// public void SetValue(string value, Uno.UX.IPropertyListener origin)
void TextControl__SetValue_fn(TextControl* __this, uString* value, uObject* origin)
{
    __this->SetValue(value, origin);
}

// protected override sealed void SoftDispose()
void TextControl__SoftDispose_fn(TextControl* __this)
{
    ::g::Fuse::Node__SoftDispose_fn(__this);

    if (__this->_textRenderer != nullptr)
        ::g::Fuse::Controls::ITextRenderer::SoftDispose(uInterface(uPtr(__this->_textRenderer), ::g::Fuse::Controls::ITextRenderer_typeof()));
}

// public Fuse.Controls.TextAlignment get_TextAlignment()
void TextControl__get_TextAlignment_fn(TextControl* __this, int32_t* __retval)
{
    *__retval = __this->TextAlignment();
}

// public void set_TextAlignment(Fuse.Controls.TextAlignment value)
void TextControl__set_TextAlignment_fn(TextControl* __this, int32_t* value)
{
    __this->TextAlignment(*value);
}

// public float4 get_TextColor()
void TextControl__get_TextColor_fn(TextControl* __this, ::g::Uno::Float4* __retval)
{
    *__retval = __this->TextColor();
}

// public void set_TextColor(float4 value)
void TextControl__set_TextColor_fn(TextControl* __this, ::g::Uno::Float4* value)
{
    __this->TextColor(*value);
}

// internal static generated extern Uno.Func<Fuse.Controls.TextControl, Fuse.Controls.ITextRenderer> get_TextRendererFactory()
void TextControl__get_TextRendererFactory_fn(uDelegate** __retval)
{
    *__retval = TextControl::TextRendererFactory();
}

// internal static generated extern void set_TextRendererFactory(Uno.Func<Fuse.Controls.TextControl, Fuse.Controls.ITextRenderer> value)
void TextControl__set_TextRendererFactory_fn(uDelegate* value)
{
    TextControl::TextRendererFactory(value);
}

// private void TextScaleFactorChanged(float textScaleFactor)
void TextControl__TextScaleFactorChanged_fn(TextControl* __this, float* textScaleFactor)
{
    __this->TextScaleFactorChanged(*textScaleFactor);
}

// public Fuse.Controls.TextTruncation get_TextTruncation()
void TextControl__get_TextTruncation_fn(TextControl* __this, int32_t* __retval)
{
    *__retval = __this->TextTruncation();
}

// public void set_TextTruncation(Fuse.Controls.TextTruncation value)
void TextControl__set_TextTruncation_fn(TextControl* __this, int32_t* value)
{
    __this->TextTruncation(*value);
}

// public Fuse.Controls.TextWrapping get_TextWrapping()
void TextControl__get_TextWrapping_fn(TextControl* __this, int32_t* __retval)
{
    *__retval = __this->TextWrapping();
}

// public void set_TextWrapping(Fuse.Controls.TextWrapping value)
void TextControl__set_TextWrapping_fn(TextControl* __this, int32_t* value)
{
    __this->TextWrapping(*value);
}

// public string get_Value()
void TextControl__get_Value_fn(TextControl* __this, uString** __retval)
{
    *__retval = __this->Value();
}

// public void set_Value(string value)
void TextControl__set_Value_fn(TextControl* __this, uString* value)
{
    __this->Value(value);
}

// public generated void add_ValueChanged(Uno.UX.ValueChangedHandler<string> value)
void TextControl__add_ValueChanged_fn(TextControl* __this, uDelegate* value)
{
    __this->add_ValueChanged(value);
}

// public generated void remove_ValueChanged(Uno.UX.ValueChangedHandler<string> value)
void TextControl__remove_ValueChanged_fn(TextControl* __this, uDelegate* value)
{
    __this->remove_ValueChanged(value);
}

::g::Uno::UX::Selector TextControl::ValuePropertyName_;
::g::Uno::UX::Selector TextControl::MaxLengthPropertyName_;
::g::Uno::UX::Selector TextControl::TextWrappingPropertyName_;
::g::Uno::UX::Selector TextControl::LineSpacingPropertyName_;
::g::Uno::UX::Selector TextControl::MaxLinesPropertyName_;
::g::Uno::UX::Selector TextControl::FontSizePropertyName_;
::g::Uno::UX::Selector TextControl::FontPropertyName_;
::g::Uno::UX::Selector TextControl::TextAlignmentPropertyName_;
::g::Uno::UX::Selector TextControl::ColorPropertyName_;
::g::Uno::UX::Selector TextControl::TextColorPropertyName_;
::g::Uno::UX::Selector TextControl::TextTruncationPropertyName_;
::g::Uno::UX::Selector TextControl::LoadAsyncPropertyName_;
uSStrong<uDelegate*> TextControl::_TextRendererFactory_;

// public TextControl() [instance]
void TextControl::ctor_6()
{
    _value = ::STRINGS[5/*""*/];
    _fontSize = ::g::Fuse::Font::PlatformDefaultSize();
    _color = ::g::Fuse::Font::PlatformDefaultTextColor();
    ctor_5();
    InitializeUX();
}

// public float4 get_Color() [instance]
::g::Uno::Float4 TextControl::Color()
{
    return _color;
}

// public void set_Color(float4 value) [instance]
void TextControl::Color(::g::Uno::Float4 value)
{
    SetColor(value, (uObject*)this);
}

// private bool EnforceMaxLength(string& v) [instance]
bool TextControl::EnforceMaxLength(uString** v)
{
    if ((MaxLength() > 0) && (uPtr(*v)->Length() > MaxLength()))
    {
        *v = ::g::Uno::String::Substring1(uPtr(*v), 0, MaxLength());
        return true;
    }

    return false;
}

// public Fuse.Font get_Font() [instance]
::g::Fuse::Font* TextControl::Font()
{
    ::g::Fuse::Font* ind2;
    ind2 = _font;
    return (ind2 != nullptr) ? ind2 : (::g::Fuse::Font*)::g::Fuse::Font::PlatformDefault();
}

// public void set_Font(Fuse.Font value) [instance]
void TextControl::Font(::g::Fuse::Font* value)
{
    if (_font != value)
    {
        _font = value;
        OnFontChanged();
    }
}

// public float get_FontSize() [instance]
float TextControl::FontSize()
{
    return _fontSize;
}

// public void set_FontSize(float value) [instance]
void TextControl::FontSize(float value)
{
    if (_fontSize != value)
    {
        _fontSize = value;
        OnFontSizeChanged();
        InvalidateVisual();
    }
}

// public float get_FontSizeScaled() [instance]
float TextControl::FontSizeScaled()
{
    if ((_minFontScale == 0.0f) && (_maxFontScale == 0.0f))
        return _fontSize * ::g::Fuse::Platform::SystemUI::TextScaleFactor();
    else
    {
        if ((_minFontScale == 1.0f) && (_maxFontScale == 1.0f))
            return _fontSize;
        else
            return _fontSize * ::g::Uno::Math::Max1(_minFontScale, ::g::Uno::Math::Min1(_maxFontScale, ::g::Fuse::Platform::SystemUI::TextScaleFactor()));
    }
}

// protected Fuse.Controls.Native.ITextView GetITextView() [instance]
uObject* TextControl::GetITextView()
{
    return uAs<uObject*>(NativeView(), ::g::Fuse::Controls::Native::ITextView_typeof());
}

// private void InitializeUX() [instance]
void TextControl::InitializeUX()
{
    TextControl__Template* AndroidAppearance = TextControl__Template::New2(this, this);
    TextControl__Template1* iOSAppearance = TextControl__Template1::New2(this, this);
    SourceLineNumber(1);
    SourceFileName(uString::Const("TextControls/TextControl.ux"));
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(Templates()), ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Uno::UX::Template_typeof(), nullptr)), AndroidAppearance);
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(Templates()), ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Uno::UX::Template_typeof(), nullptr)), iOSAppearance);
}

// protected void InvalidateRenderer() [instance]
void TextControl::InvalidateRenderer()
{
    InvalidateTextRenderer();
}

// private void InvalidateTextRenderer() [instance]
void TextControl::InvalidateTextRenderer()
{
    if (_textRenderer != nullptr)
        ::g::Fuse::Controls::ITextRenderer::Invalidate(uInterface(uPtr(_textRenderer), ::g::Fuse::Controls::ITextRenderer_typeof()));

    InvalidateRenderBounds();
}

// public float get_LineSpacing() [instance]
float TextControl::LineSpacing()
{
    float ret6;
    return (::g::Fuse::Visual__Get1_fn(this, ::TYPES[4/*Fuse.Visual*/]->MakeMethod(4/*Get<float>*/, ::g::Uno::Float_typeof(), nullptr), uCRef<int32_t>(512), uCRef(1.0f), &ret6), ret6);
}

// public void set_LineSpacing(float value) [instance]
void TextControl::LineSpacing(float value)
{
    if (LineSpacing() != value)
    {
        ::g::Fuse::Visual__Set1_fn(this, ::TYPES[4/*Fuse.Visual*/]->MakeMethod(10/*Set<float>*/, ::g::Uno::Float_typeof(), nullptr), uCRef<int32_t>(512), uCRef(value), uCRef(1.0f));
        OnLineSpacingChanged();
    }
}

// public int get_MaxLength() [instance]
int32_t TextControl::MaxLength()
{
    return _maxLength;
}

// public void set_MaxLength(int value) [instance]
void TextControl::MaxLength(int32_t value)
{
    if (_maxLength != value)
    {
        _maxLength = value;
        OnMaxLengthChanged();
        uString* v = Value();

        if (EnforceMaxLength(&v))
            Value(v);
    }
}

// public int get_MaxLines() [instance]
int32_t TextControl::MaxLines()
{
    int32_t ret7;
    return (::g::Fuse::Visual__Get1_fn(this, ::TYPES[4/*Fuse.Visual*/]->MakeMethod(4/*Get<int>*/, ::g::Uno::Int_typeof(), nullptr), uCRef<int32_t>(65536), uCRef<int32_t>(0), &ret7), ret7);
}

// public void set_MaxLines(int value) [instance]
void TextControl::MaxLines(int32_t value)
{
    if (MaxLines() != value)
    {
        ::g::Fuse::Visual__Set1_fn(this, ::TYPES[4/*Fuse.Visual*/]->MakeMethod(10/*Set<int>*/, ::g::Uno::Int_typeof(), nullptr), uCRef<int32_t>(65536), uCRef<int32_t>(value), uCRef<int32_t>(0));
        OnMaxLinesChanged();
    }
}

// protected void OnColorChanged(Uno.UX.IPropertyListener origin) [instance]
void TextControl::OnColorChanged(uObject* origin)
{
    OnPropertyChanged1(TextControl::ColorPropertyName_, origin);
    OnPropertyChanged1(TextControl::TextColorPropertyName_, origin);
    uObject* edit = GetITextView();

    if (edit != nullptr)
        ::g::Fuse::Controls::Native::ITextView::TextColor(uInterface(uPtr(edit), ::g::Fuse::Controls::Native::ITextView_typeof()), Color());

    InvalidateVisual();
    InvalidateRenderer();
}

// protected void OnFontChanged() [instance]
void TextControl::OnFontChanged()
{
    OnPropertyChanged(TextControl::FontPropertyName_);
    uObject* edit = GetITextView();

    if (edit != nullptr)
        ::g::Fuse::Controls::Native::ITextView::Font(uInterface(uPtr(edit), ::g::Fuse::Controls::Native::ITextView_typeof()), Font());

    InvalidateLayout(2);
    InvalidateVisual();
    InvalidateRenderer();
}

// protected void OnFontSizeChanged() [instance]
void TextControl::OnFontSizeChanged()
{
    OnPropertyChanged(TextControl::FontSizePropertyName_);
    uObject* edit = GetITextView();

    if (edit != nullptr)
        ::g::Fuse::Controls::Native::ITextView::FontSize(uInterface(uPtr(edit), ::g::Fuse::Controls::Native::ITextView_typeof()), FontSizeScaled());

    InvalidateLayout(2);
    InvalidateVisual();
    InvalidateRenderer();
}

// protected void OnLineSpacingChanged() [instance]
void TextControl::OnLineSpacingChanged()
{
    OnPropertyChanged(TextControl::LineSpacingPropertyName_);
    uObject* edit = GetITextView();

    if (edit != nullptr)
        ::g::Fuse::Controls::Native::ITextView::LineSpacing(uInterface(uPtr(edit), ::g::Fuse::Controls::Native::ITextView_typeof()), LineSpacing());

    InvalidateLayout(2);
    InvalidateVisual();
    InvalidateRenderer();
}

// protected void OnMaxLengthChanged() [instance]
void TextControl::OnMaxLengthChanged()
{
    OnPropertyChanged(TextControl::MaxLengthPropertyName_);
    uObject* edit = GetITextView();

    if (edit != nullptr)
        ::g::Fuse::Controls::Native::ITextView::MaxLength(uInterface(uPtr(edit), ::g::Fuse::Controls::Native::ITextView_typeof()), MaxLength());

    InvalidateLayout(2);
    InvalidateVisual();
    InvalidateRenderer();
}

// protected void OnMaxLinesChanged() [instance]
void TextControl::OnMaxLinesChanged()
{
    OnPropertyChanged(TextControl::MaxLinesPropertyName_);
    uObject* edit = GetITextView();

    if (edit != nullptr)
        ::g::Fuse::Controls::Native::ITextView::MaxLines(uInterface(uPtr(edit), ::g::Fuse::Controls::Native::ITextView_typeof()), MaxLines());

    InvalidateLayout(2);
    InvalidateVisual();
    InvalidateRenderer();
}

// protected void OnTextAlignmentChanged() [instance]
void TextControl::OnTextAlignmentChanged()
{
    OnPropertyChanged(TextControl::TextAlignmentPropertyName_);
    uObject* edit = GetITextView();

    if (edit != nullptr)
        ::g::Fuse::Controls::Native::ITextView::TextAlignment(uInterface(uPtr(edit), ::g::Fuse::Controls::Native::ITextView_typeof()), TextAlignment());

    InvalidateLayout(2);
    InvalidateVisual();
    InvalidateRenderer();
}

// protected void OnTextTruncationChanged() [instance]
void TextControl::OnTextTruncationChanged()
{
    OnPropertyChanged(TextControl::TextTruncationPropertyName_);
    uObject* edit = GetITextView();

    if (edit != nullptr)
        ::g::Fuse::Controls::Native::ITextView::TextTruncation(uInterface(uPtr(edit), ::g::Fuse::Controls::Native::ITextView_typeof()), TextTruncation());

    InvalidateLayout(2);
    InvalidateVisual();
    InvalidateRenderer();
}

// protected void OnTextWrappingChanged() [instance]
void TextControl::OnTextWrappingChanged()
{
    OnPropertyChanged(TextControl::TextWrappingPropertyName_);
    uObject* edit = GetITextView();

    if (edit != nullptr)
        ::g::Fuse::Controls::Native::ITextView::TextWrapping(uInterface(uPtr(edit), ::g::Fuse::Controls::Native::ITextView_typeof()), TextWrapping());

    InvalidateLayout(2);
    InvalidateVisual();
    InvalidateRenderer();
}

// protected void OnValueChanged(Uno.UX.IPropertyListener origin) [instance]
void TextControl::OnValueChanged(uObject* origin)
{
    OnPropertyChanged1(TextControl::ValuePropertyName_, origin);
    InvalidateLayout(2);
    InvalidateVisual();
    InvalidateRenderer();

    if (::g::Uno::Delegate::op_Inequality(ValueChanged1, nullptr))
    {
        ::g::Fuse::Scripting::StringChangedArgs* args = ::g::Fuse::Scripting::StringChangedArgs::New3(Value());
        uPtr(ValueChanged1)->Invoke(2, this, args);
    }
}

// internal float4 get_RenderColor() [instance]
::g::Uno::Float4 TextControl::RenderColor()
{
    return Color();
}

// internal string get_RenderValue() [instance]
uString* TextControl::RenderValue()
{
    uString* ind1;
    ind1 = Value();
    return (ind1 != nullptr) ? ind1 : ::STRINGS[5/*""*/];
}

// public void SetColor(float4 color, Uno.UX.IPropertyListener origin) [instance]
void TextControl::SetColor(::g::Uno::Float4 color, uObject* origin)
{
    if (::g::Uno::Float4__op_Inequality(_color, color))
    {
        _color = color;
        OnColorChanged(origin);
    }
}

// public void SetValue(string value, Uno.UX.IPropertyListener origin) [instance]
void TextControl::SetValue(uString* value, uObject* origin)
{
    uString* newValue = (value != nullptr) ? value : ::STRINGS[5/*""*/];
    bool forced = EnforceMaxLength(&newValue);

    if (forced || ::g::Uno::String::op_Inequality(_value, newValue))
    {
        _value = newValue;
        uObject* edit = GetITextView();

        if (edit != nullptr)
            ::g::Fuse::Controls::Native::ITextView::Value(uInterface(uPtr(edit), ::g::Fuse::Controls::Native::ITextView_typeof()), _value);

        OnValueChanged(origin);
        InvalidateTextRenderer();
    }
}

// public Fuse.Controls.TextAlignment get_TextAlignment() [instance]
int32_t TextControl::TextAlignment()
{
    int32_t ret8;
    return (::g::Fuse::Visual__Get1_fn(this, ::TYPES[4/*Fuse.Visual*/]->MakeMethod(4/*Get<Fuse.Controls.TextAlignment>*/, ::g::Fuse::Controls::TextAlignment_typeof(), nullptr), uCRef<int32_t>(1024), uCRef<int32_t>(0), &ret8), ret8);
}

// public void set_TextAlignment(Fuse.Controls.TextAlignment value) [instance]
void TextControl::TextAlignment(int32_t value)
{
    if (TextAlignment() != value)
    {
        ::g::Fuse::Visual__Set1_fn(this, ::TYPES[4/*Fuse.Visual*/]->MakeMethod(10/*Set<Fuse.Controls.TextAlignment>*/, ::g::Fuse::Controls::TextAlignment_typeof(), nullptr), uCRef<int32_t>(1024), uCRef<int32_t>(value), uCRef<int32_t>(0));
        OnTextAlignmentChanged();
    }
}

// public float4 get_TextColor() [instance]
::g::Uno::Float4 TextControl::TextColor()
{
    return Color();
}

// public void set_TextColor(float4 value) [instance]
void TextControl::TextColor(::g::Uno::Float4 value)
{
    Color(value);
}

// private void TextScaleFactorChanged(float textScaleFactor) [instance]
void TextControl::TextScaleFactorChanged(float textScaleFactor)
{
    OnFontSizeChanged();
    InvalidateVisual();
}

// public Fuse.Controls.TextTruncation get_TextTruncation() [instance]
int32_t TextControl::TextTruncation()
{
    int32_t ret9;
    return (::g::Fuse::Visual__Get1_fn(this, ::TYPES[4/*Fuse.Visual*/]->MakeMethod(4/*Get<Fuse.Controls.TextTruncation>*/, ::g::Fuse::Controls::TextTruncation_typeof(), nullptr), uCRef<int32_t>(2048), uCRef<int32_t>(0), &ret9), ret9);
}

// public void set_TextTruncation(Fuse.Controls.TextTruncation value) [instance]
void TextControl::TextTruncation(int32_t value)
{
    int32_t value_ = value;

    if (TextTruncation() != value_)
    {
        ::g::Fuse::Visual__Set1_fn(this, ::TYPES[4/*Fuse.Visual*/]->MakeMethod(10/*Set<Fuse.Controls.TextTruncation>*/, ::g::Fuse::Controls::TextTruncation_typeof(), nullptr), uCRef<int32_t>(2048), uCRef<int32_t>(value_), uCRef<int32_t>(0));
        OnTextTruncationChanged();
    }
}

// public Fuse.Controls.TextWrapping get_TextWrapping() [instance]
int32_t TextControl::TextWrapping()
{
    int32_t ret10;
    return (::g::Fuse::Visual__Get1_fn(this, ::TYPES[4/*Fuse.Visual*/]->MakeMethod(4/*Get<Fuse.Controls.TextWrapping>*/, ::g::Fuse::Controls::TextWrapping_typeof(), nullptr), uCRef<int32_t>(2), uCRef<int32_t>(0), &ret10), ret10);
}

// public void set_TextWrapping(Fuse.Controls.TextWrapping value) [instance]
void TextControl::TextWrapping(int32_t value)
{
    if (TextWrapping() != value)
    {
        ::g::Fuse::Visual__Set1_fn(this, ::TYPES[4/*Fuse.Visual*/]->MakeMethod(10/*Set<Fuse.Controls.TextWrapping>*/, ::g::Fuse::Controls::TextWrapping_typeof(), nullptr), uCRef<int32_t>(2), uCRef<int32_t>(value), uCRef<int32_t>(0));
        OnTextWrappingChanged();
    }
}

// public string get_Value() [instance]
uString* TextControl::Value()
{
    return _value;
}

// public void set_Value(string value) [instance]
void TextControl::Value(uString* value)
{
    SetValue(value, (uObject*)this);
}

// public generated void add_ValueChanged(Uno.UX.ValueChangedHandler<string> value) [instance]
void TextControl::add_ValueChanged(uDelegate* value)
{
    ValueChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(ValueChanged1, value), ::g::Uno::UX::ValueChangedHandler_typeof()->MakeType(::TYPES[81/*string*/], nullptr));
}

// public generated void remove_ValueChanged(Uno.UX.ValueChangedHandler<string> value) [instance]
void TextControl::remove_ValueChanged(uDelegate* value)
{
    ValueChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(ValueChanged1, value), ::g::Uno::UX::ValueChangedHandler_typeof()->MakeType(::TYPES[81/*string*/], nullptr));
}

// internal static generated extern Uno.Func<Fuse.Controls.TextControl, Fuse.Controls.ITextRenderer> get_TextRendererFactory() [static]
uDelegate* TextControl::TextRendererFactory()
{
    TextControl_typeof()->Init();
    return TextControl::_TextRendererFactory_;
}

// internal static generated extern void set_TextRendererFactory(Uno.Func<Fuse.Controls.TextControl, Fuse.Controls.ITextRenderer> value) [static]
void TextControl::TextRendererFactory(uDelegate* value)
{
    TextControl_typeof()->Init();
    TextControl::_TextRendererFactory_ = value;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Native/TextEnums.uno
// --------------------------------------------------------------------------

// public enum TextInputActionType
uEnumType* TextInputActionType_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.TextInputActionType", ::g::Uno::Int_typeof(), 1);
    type->SetLiterals(
        "Primary", 0LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Native/TextEnums.uno
// --------------------------------------------------------------------------

// public enum TextTruncation
uEnumType* TextTruncation_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.TextTruncation", ::g::Uno::Int_typeof(), 2);
    type->SetLiterals(
        "Standard", 0LL,
        "None", 1LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Native/TextEnums.uno
// --------------------------------------------------------------------------

// public enum TextWrapping
uEnumType* TextWrapping_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.TextWrapping", ::g::Uno::Int_typeof(), 2);
    type->SetLiterals(
        "NoWrap", 0LL,
        "Wrap", 1LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.TimePicker/TimePicker.Docs.uno
// ------------------------------------------------------------------------------------

// public partial sealed class TimePicker
// {
// static TimePicker()
static void TimePicker__cctor_5_fn(uType* __type)
{
    TimePicker::__selector0_ = ::g::Uno::UX::Selector__op_Implicit(uString::Const("self"));
}

static void TimePicker_build(uType* type)
{
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface18));
    type->SetFields(118,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&TimePicker::__selector0_, uFieldFlagsStatic);
}

::g::Fuse::Controls::Panel_type* TimePicker_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Panel_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::TimePickerBase_typeof();
    options.FieldCount = 119;
    options.InterfaceCount = 19;
    options.ObjectSize = sizeof(TimePicker);
    options.TypeSize = sizeof(::g::Fuse::Controls::Panel_type);
    type = (::g::Fuse::Controls::Panel_type*)uClassType::New("Fuse.Controls.TimePicker", options);
    type->fp_build_ = TimePicker_build;
    type->fp_cctor_ = TimePicker__cctor_5_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

::g::Uno::UX::Selector TimePicker::__selector0_;
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.TimePicker/TimePicker.uno
// -------------------------------------------------------------------------------

// public interfacemodifiers class TimePickerBase
// {
// static generated TimePickerBase()
static void TimePickerBase__cctor_4_fn(uType* __type)
{
    TimePickerBase::_styleName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[13/*"Style"*/]);
    TimePickerBase::_valueName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[14/*"Value"*/]);
    TimePickerBase::_is24HourViewName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[110/*"Is24HourView"*/]);
}

static void TimePickerBase_build(uType* type)
{
    ::STRINGS[13] = uString::Const("Style");
    ::STRINGS[14] = uString::Const("Value");
    ::STRINGS[110] = uString::Const("Is24HourView");
    ::TYPES[62] = ::g::Fuse::Controls::ITimePickerView_typeof();
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface18));
    type->SetFields(115,
        ::g::Fuse::Controls::TimePickerStyle_typeof(), offsetof(TimePickerBase, _style), 0,
        ::g::Uno::DateTime_typeof(), offsetof(TimePickerBase, _value), 0,
        ::g::Uno::Bool_typeof(), offsetof(TimePickerBase, _is24HourView), 0,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&TimePickerBase::_styleName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&TimePickerBase::_valueName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&TimePickerBase::_is24HourViewName_, uFieldFlagsStatic);
}

::g::Fuse::Controls::Panel_type* TimePickerBase_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Panel_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::Panel_typeof();
    options.FieldCount = 121;
    options.InterfaceCount = 19;
    options.ObjectSize = sizeof(TimePickerBase);
    options.TypeSize = sizeof(::g::Fuse::Controls::Panel_type);
    type = (::g::Fuse::Controls::Panel_type*)uClassType::New("Fuse.Controls.TimePickerBase", options);
    type->fp_build_ = TimePickerBase_build;
    type->fp_cctor_ = TimePickerBase__cctor_4_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))TimePickerBase__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))TimePickerBase__OnUnrooted_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public bool get_Is24HourView()
void TimePickerBase__get_Is24HourView_fn(TimePickerBase* __this, bool* __retval)
{
    *__retval = __this->Is24HourView();
}

// public void set_Is24HourView(bool value)
void TimePickerBase__set_Is24HourView_fn(TimePickerBase* __this, bool* value)
{
    __this->Is24HourView(*value);
}

// private void OnIs24HourViewChanged(Uno.UX.IPropertyListener origin)
void TimePickerBase__OnIs24HourViewChanged_fn(TimePickerBase* __this, uObject* origin)
{
    __this->OnIs24HourViewChanged(origin);
}

// internal void OnNativeViewValueChanged(Uno.DateTime newValue)
void TimePickerBase__OnNativeViewValueChanged_fn(TimePickerBase* __this, ::g::Uno::DateTime* newValue)
{
    __this->OnNativeViewValueChanged(*newValue);
}

// protected override sealed void OnRooted()
void TimePickerBase__OnRooted_fn(TimePickerBase* __this)
{
    ::g::Fuse::Controls::Panel__OnRooted_fn(__this);
    uObject* tpv = __this->TimePickerView();

    if (tpv != nullptr)
        ::g::Fuse::Controls::ITimePickerView::OnRooted(uInterface(uPtr(tpv), ::TYPES[62/*Fuse.Controls.ITimePickerView*/]));
}

// internal void OnStyleValueChanged(Uno.UX.IPropertyListener origin)
void TimePickerBase__OnStyleValueChanged_fn(TimePickerBase* __this, uObject* origin)
{
    __this->OnStyleValueChanged(origin);
}

// protected override sealed void OnUnrooted()
void TimePickerBase__OnUnrooted_fn(TimePickerBase* __this)
{
    uObject* tpv = __this->TimePickerView();

    if (tpv != nullptr)
        ::g::Fuse::Controls::ITimePickerView::OnUnrooted(uInterface(uPtr(tpv), ::TYPES[62/*Fuse.Controls.ITimePickerView*/]));

    ::g::Fuse::Controls::Panel__OnUnrooted_fn(__this);
}

// private void OnValueChanged(Uno.UX.IPropertyListener origin)
void TimePickerBase__OnValueChanged_fn(TimePickerBase* __this, uObject* origin)
{
    __this->OnValueChanged(origin);
}

// public void SetIs24HourView(bool value, Uno.UX.IPropertyListener origin)
void TimePickerBase__SetIs24HourView_fn(TimePickerBase* __this, bool* value, uObject* origin)
{
    __this->SetIs24HourView(*value, origin);
}

// public void SetStyle(Fuse.Controls.TimePickerStyle value, Uno.UX.IPropertyListener origin)
void TimePickerBase__SetStyle_fn(TimePickerBase* __this, int32_t* value, uObject* origin)
{
    __this->SetStyle(*value, origin);
}

// public void SetValue(Uno.DateTime value, Uno.UX.IPropertyListener origin)
void TimePickerBase__SetValue_fn(TimePickerBase* __this, ::g::Uno::DateTime* value, uObject* origin)
{
    __this->SetValue(*value, origin);
}

// public Fuse.Controls.TimePickerStyle get_Style()
void TimePickerBase__get_Style_fn(TimePickerBase* __this, int32_t* __retval)
{
    *__retval = __this->Style();
}

// public void set_Style(Fuse.Controls.TimePickerStyle value)
void TimePickerBase__set_Style_fn(TimePickerBase* __this, int32_t* value)
{
    __this->Style(*value);
}

// private Fuse.Controls.ITimePickerView get_TimePickerView()
void TimePickerBase__get_TimePickerView_fn(TimePickerBase* __this, uObject** __retval)
{
    *__retval = __this->TimePickerView();
}

// private void UpdateValue(Uno.DateTime value, Uno.UX.IPropertyListener origin)
void TimePickerBase__UpdateValue_fn(TimePickerBase* __this, ::g::Uno::DateTime* value, uObject* origin)
{
    __this->UpdateValue(*value, origin);
}

// public Uno.DateTime get_Value()
void TimePickerBase__get_Value_fn(TimePickerBase* __this, ::g::Uno::DateTime* __retval)
{
    *__retval = __this->Value();
}

// public void set_Value(Uno.DateTime value)
void TimePickerBase__set_Value_fn(TimePickerBase* __this, ::g::Uno::DateTime* value)
{
    __this->Value(*value);
}

::g::Uno::UX::Selector TimePickerBase::_styleName_;
::g::Uno::UX::Selector TimePickerBase::_valueName_;
::g::Uno::UX::Selector TimePickerBase::_is24HourViewName_;

// public bool get_Is24HourView() [instance]
bool TimePickerBase::Is24HourView()
{
    return _is24HourView;
}

// public void set_Is24HourView(bool value) [instance]
void TimePickerBase::Is24HourView(bool value)
{
    SetIs24HourView(value, (uObject*)this);
}

// private void OnIs24HourViewChanged(Uno.UX.IPropertyListener origin) [instance]
void TimePickerBase::OnIs24HourViewChanged(uObject* origin)
{
    OnPropertyChanged1(TimePickerBase::_is24HourViewName_, origin);
}

// internal void OnNativeViewValueChanged(Uno.DateTime newValue) [instance]
void TimePickerBase::OnNativeViewValueChanged(::g::Uno::DateTime newValue)
{
    UpdateValue(newValue, (uObject*)this);
}

// internal void OnStyleValueChanged(Uno.UX.IPropertyListener origin) [instance]
void TimePickerBase::OnStyleValueChanged(uObject* origin)
{
    OnPropertyChanged1(TimePickerBase::_styleName_, origin);
}

// private void OnValueChanged(Uno.UX.IPropertyListener origin) [instance]
void TimePickerBase::OnValueChanged(uObject* origin)
{
    OnPropertyChanged1(TimePickerBase::_valueName_, origin);
}

// public void SetIs24HourView(bool value, Uno.UX.IPropertyListener origin) [instance]
void TimePickerBase::SetIs24HourView(bool value, uObject* origin)
{
    if (value != _is24HourView)
    {
        _is24HourView = value;
        OnIs24HourViewChanged(origin);
    }

    uObject* tpv = TimePickerView();

    if (tpv != nullptr)
        ::g::Fuse::Controls::ITimePickerView::Is24HourView(uInterface(uPtr(tpv), ::TYPES[62/*Fuse.Controls.ITimePickerView*/]), value);
}

// public void SetStyle(Fuse.Controls.TimePickerStyle value, Uno.UX.IPropertyListener origin) [instance]
void TimePickerBase::SetStyle(int32_t value, uObject* origin)
{
    if (value != _style)
    {
        _style = value;
        OnStyleValueChanged(origin);
        InvalidateLayout(2);
    }

    uObject* dpv = TimePickerView();

    if (dpv != nullptr)
        ::g::Fuse::Controls::ITimePickerView::Style(uInterface(uPtr(dpv), ::TYPES[62/*Fuse.Controls.ITimePickerView*/]), value);
}

// public void SetValue(Uno.DateTime value, Uno.UX.IPropertyListener origin) [instance]
void TimePickerBase::SetValue(::g::Uno::DateTime value, uObject* origin)
{
    UpdateValue(value, origin);
    uObject* tpv = TimePickerView();

    if (tpv != nullptr)
        ::g::Fuse::Controls::ITimePickerView::Value(uInterface(uPtr(tpv), ::TYPES[62/*Fuse.Controls.ITimePickerView*/]), value);
}

// public Fuse.Controls.TimePickerStyle get_Style() [instance]
int32_t TimePickerBase::Style()
{
    return _style;
}

// public void set_Style(Fuse.Controls.TimePickerStyle value) [instance]
void TimePickerBase::Style(int32_t value)
{
    SetStyle(value, (uObject*)this);
}

// private Fuse.Controls.ITimePickerView get_TimePickerView() [instance]
uObject* TimePickerBase::TimePickerView()
{
    return NativeView();
}

// private void UpdateValue(Uno.DateTime value, Uno.UX.IPropertyListener origin) [instance]
void TimePickerBase::UpdateValue(::g::Uno::DateTime value, uObject* origin)
{
    if (::g::Uno::DateTime__op_Inequality(value, _value))
    {
        _value = value;
        OnValueChanged(origin);
    }
}

// public Uno.DateTime get_Value() [instance]
::g::Uno::DateTime TimePickerBase::Value()
{
    return _value;
}

// public void set_Value(Uno.DateTime value) [instance]
void TimePickerBase::Value(::g::Uno::DateTime value)
{
    SetValue(value, (uObject*)this);
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.TimePicker/TimePicker.uno
// -------------------------------------------------------------------------------

// public enum TimePickerStyle
uEnumType* TimePickerStyle_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.TimePickerStyle", ::g::Uno::Int_typeof(), 4);
    type->SetLiterals(
        "Default", 0LL,
        "Compact", 1LL,
        "Inline", 2LL,
        "Wheels", 3LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Primitives/ToggleControls/ToggleControl.uno
// -------------------------------------------------------------------------------------------------

// public sealed class ToggleControl
// {
// static generated ToggleControl()
static void ToggleControl__cctor_4_fn(uType* __type)
{
    ToggleControl::_valueName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[14/*"Value"*/]);
}

static void ToggleControl_build(uType* type)
{
    ::STRINGS[14] = uString::Const("Value");
    ::TYPES[63] = ::g::Fuse::Controls::Native::IToggleView_typeof();
    ::TYPES[64] = ::g::Uno::UX::ValueChangedHandler_typeof()->MakeType(::g::Uno::Bool_typeof(), nullptr);
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(ToggleControl_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(ToggleControl_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(ToggleControl_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(ToggleControl_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(ToggleControl_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(ToggleControl_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(ToggleControl_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(ToggleControl_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(ToggleControl_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(ToggleControl_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(ToggleControl_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(ToggleControl_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(ToggleControl_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(ToggleControl_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(ToggleControl_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(ToggleControl_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(ToggleControl_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(ToggleControl_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(ToggleControl_type, interface18),
        ::g::Fuse::Triggers::IValue_typeof()->MakeType(::g::Uno::Bool_typeof(), nullptr), offsetof(ToggleControl_type, interface19),
        ::g::Fuse::Controls::Native::IToggleViewHost_typeof(), offsetof(ToggleControl_type, interface20),
        ::g::Fuse::Triggers::Actions::IToggleable_typeof(), offsetof(ToggleControl_type, interface21));
    type->SetFields(115,
        ::g::Uno::Bool_typeof(), offsetof(ToggleControl, _value), 0,
        ::TYPES[64/*Uno.UX.ValueChangedHandler<bool>*/], offsetof(ToggleControl, ValueChanged1), 0,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&ToggleControl::_valueName_, uFieldFlagsStatic);
}

ToggleControl_type* ToggleControl_typeof()
{
    static uSStrong<ToggleControl_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::Panel_typeof();
    options.FieldCount = 118;
    options.InterfaceCount = 22;
    options.ObjectSize = sizeof(ToggleControl);
    options.TypeSize = sizeof(ToggleControl_type);
    type = (ToggleControl_type*)uClassType::New("Fuse.Controls.ToggleControl", options);
    type->fp_build_ = ToggleControl_build;
    type->fp_cctor_ = ToggleControl__cctor_4_fn;
    type->fp_PushPropertiesToNativeView = (void(*)(::g::Fuse::Controls::Control*))ToggleControl__PushPropertiesToNativeView_fn;
    type->interface20.fp_OnValueChanged = (void(*)(uObject*, bool*))ToggleControl__FuseControlsNativeIToggleViewHostOnValueChanged_fn;
    type->interface19.fp_get_Value = (void(*)(uObject*, uTRef))ToggleControl__get_Value_fn;
    type->interface19.fp_set_Value = (void(*)(uObject*, void*))ToggleControl__set_Value_fn;
    type->interface19.fp_add_ValueChanged = (void(*)(uObject*, uDelegate*))ToggleControl__add_ValueChanged_fn;
    type->interface19.fp_remove_ValueChanged = (void(*)(uObject*, uDelegate*))ToggleControl__remove_ValueChanged_fn;
    type->interface21.fp_Toggle = (void(*)(uObject*))ToggleControl__Toggle_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// private void Fuse.Controls.Native.IToggleViewHost.OnValueChanged(bool newValue)
void ToggleControl__FuseControlsNativeIToggleViewHostOnValueChanged_fn(ToggleControl* __this, bool* newValue)
{
    bool newValue_ = *newValue;
    __this->SetValue(newValue_, nullptr);
}

// protected void OnValueChanged(bool value, Uno.UX.IPropertyListener origin)
void ToggleControl__OnValueChanged_fn(ToggleControl* __this, bool* value, uObject* origin)
{
    __this->OnValueChanged(*value, origin);
}

// protected override sealed void PushPropertiesToNativeView()
void ToggleControl__PushPropertiesToNativeView_fn(ToggleControl* __this)
{
    uObject* tv = __this->ToggleView();

    if (tv != nullptr)
        ::g::Fuse::Controls::Native::IToggleView::Value(uInterface(uPtr(tv), ::TYPES[63/*Fuse.Controls.Native.IToggleView*/]), __this->Value());
}

// public void SetValue(bool value, Uno.UX.IPropertyListener origin)
void ToggleControl__SetValue_fn(ToggleControl* __this, bool* value, uObject* origin)
{
    __this->SetValue(*value, origin);
}

// public void Toggle()
void ToggleControl__Toggle_fn(ToggleControl* __this)
{
    __this->Toggle();
}

// private Fuse.Controls.Native.IToggleView get_ToggleView()
void ToggleControl__get_ToggleView_fn(ToggleControl* __this, uObject** __retval)
{
    *__retval = __this->ToggleView();
}

// public bool get_Value()
void ToggleControl__get_Value_fn(ToggleControl* __this, bool* __retval)
{
    *__retval = __this->Value();
}

// public void set_Value(bool value)
void ToggleControl__set_Value_fn(ToggleControl* __this, bool* value)
{
    __this->Value(*value);
}

// public generated void add_ValueChanged(Uno.UX.ValueChangedHandler<bool> value)
void ToggleControl__add_ValueChanged_fn(ToggleControl* __this, uDelegate* value)
{
    __this->add_ValueChanged(value);
}

// public generated void remove_ValueChanged(Uno.UX.ValueChangedHandler<bool> value)
void ToggleControl__remove_ValueChanged_fn(ToggleControl* __this, uDelegate* value)
{
    __this->remove_ValueChanged(value);
}

::g::Uno::UX::Selector ToggleControl::_valueName_;

// protected void OnValueChanged(bool value, Uno.UX.IPropertyListener origin) [instance]
void ToggleControl::OnValueChanged(bool value, uObject* origin)
{
    bool value_ = value;

    if (::g::Uno::Delegate::op_Inequality(ValueChanged1, nullptr))
        uPtr(ValueChanged1)->Invoke(2, this, (::g::Fuse::Scripting::BoolChangedArgs*)::g::Fuse::Scripting::BoolChangedArgs::New3(value_));
}

// public void SetValue(bool value, Uno.UX.IPropertyListener origin) [instance]
void ToggleControl::SetValue(bool value, uObject* origin)
{
    if (_value != value)
    {
        _value = value;
        OnValueChanged(value, origin);
        OnPropertyChanged1(ToggleControl::_valueName_, origin);

        if (origin != nullptr)
        {
            uObject* tv = ToggleView();

            if (tv != nullptr)
                ::g::Fuse::Controls::Native::IToggleView::Value(uInterface(uPtr(tv), ::TYPES[63/*Fuse.Controls.Native.IToggleView*/]), value);
        }
    }
}

// public void Toggle() [instance]
void ToggleControl::Toggle()
{
    Value(!Value());
}

// private Fuse.Controls.Native.IToggleView get_ToggleView() [instance]
uObject* ToggleControl::ToggleView()
{
    return uAs<uObject*>(NativeView(), ::TYPES[63/*Fuse.Controls.Native.IToggleView*/]);
}

// public bool get_Value() [instance]
bool ToggleControl::Value()
{
    return _value;
}

// public void set_Value(bool value) [instance]
void ToggleControl::Value(bool value)
{
    SetValue(value, (uObject*)this);
}

// public generated void add_ValueChanged(Uno.UX.ValueChangedHandler<bool> value) [instance]
void ToggleControl::add_ValueChanged(uDelegate* value)
{
    ValueChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(ValueChanged1, value), ::TYPES[64/*Uno.UX.ValueChangedHandler<bool>*/]);
}

// public generated void remove_ValueChanged(Uno.UX.ValueChangedHandler<bool> value) [instance]
void ToggleControl::remove_ValueChanged(uDelegate* value)
{
    ValueChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(ValueChanged1, value), ::TYPES[64/*Uno.UX.ValueChangedHandler<bool>*/]);
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/Backgrounds/TopFrameBackground.uno
// -----------------------------------------------------------------------------------------------

// public class TopFrameBackground
// {
static void TopFrameBackground_build(uType* type)
{
    ::TYPES[0] = ::g::Fuse::Marshal_typeof()->MakeMethod(1/*TryToType<float4>*/, ::g::Uno::Float4_typeof(), nullptr);
    type->SetDependencies(
        ::g::Fuse::Reactive::WindowCaps_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Control_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::Control_type, interface17));
    type->SetFields(106,
        ::g::Fuse::Reactive::WindowCaps_typeof(), offsetof(TopFrameBackground, _caps), 0);
}

::g::Fuse::Controls::Control_type* TopFrameBackground_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Control_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::Control_typeof();
    options.FieldCount = 107;
    options.InterfaceCount = 18;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(TopFrameBackground);
    options.TypeSize = sizeof(::g::Fuse::Controls::Control_type);
    type = (::g::Fuse::Controls::Control_type*)uClassType::New("Fuse.Controls.TopFrameBackground", options);
    type->fp_build_ = TopFrameBackground_build;
    type->fp_GetContentSize = (void(*)(::g::Fuse::Elements::Element*, ::g::Fuse::LayoutParams*, ::g::Uno::Float2*))TopFrameBackground__GetContentSize_fn;
    type->fp_OnPropertyChanged2 = (void(*)(::g::Fuse::Visual*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))TopFrameBackground__OnPropertyChanged2_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))TopFrameBackground__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))TopFrameBackground__OnUnrooted_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))TopFrameBackground__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public generated TopFrameBackground()
void TopFrameBackground__ctor_5_fn(TopFrameBackground* __this)
{
    __this->ctor_5();
}

// protected override sealed float2 GetContentSize(Fuse.LayoutParams lp)
void TopFrameBackground__GetContentSize_fn(TopFrameBackground* __this, ::g::Fuse::LayoutParams* lp, ::g::Uno::Float2* __retval)
{
    bool ret2;
    ::g::Uno::Float4 v = ::g::Uno::Float4__New1(0.0f);

    if (!(::g::Fuse::Marshal__TryToType_fn(::TYPES[0/*Fuse.Marshal.TryToType<float4>*/], uPtr(__this->_caps)->Item(::g::Uno::UX::Selector__op_Implicit1(::g::Fuse::Reactive::WindowCaps::NameSafeMargins())), &v, &ret2), ret2))
        return *__retval = ::g::Uno::Float2__New1(0.0f), void();

    return *__retval = ::g::Uno::Float2__New2(0.0f, v.Y), void();
}

// public override sealed void OnPropertyChanged(Uno.UX.PropertyObject sender, Uno.UX.Selector name)
void TopFrameBackground__OnPropertyChanged2_fn(TopFrameBackground* __this, ::g::Uno::UX::PropertyObject* sender, ::g::Uno::UX::Selector* name)
{
    ::g::Uno::UX::Selector name_ = *name;
    ::g::Fuse::Controls::Control__OnPropertyChanged2_fn(__this, sender, uCRef(name_));

    if ((sender == __this->_caps) && ::g::Uno::UX::Selector__op_Equality(name_, ::g::Fuse::Reactive::WindowCaps::NameSafeMargins()))
        __this->InvalidateLayout(2);
}

// protected override sealed void OnRooted()
void TopFrameBackground__OnRooted_fn(TopFrameBackground* __this)
{
    ::g::Fuse::Controls::Control__OnRooted_fn(__this);
    __this->_caps = ::g::Fuse::Reactive::WindowCaps::AttachFrom(__this);
    uPtr(__this->_caps)->AddPropertyListener((uObject*)__this);
}

// protected override sealed void OnUnrooted()
void TopFrameBackground__OnUnrooted_fn(TopFrameBackground* __this)
{
    ::g::Fuse::Controls::Control__OnUnrooted_fn(__this);
    uPtr(__this->_caps)->RemovePropertyListener((uObject*)__this);
    uPtr(__this->_caps)->Detach();
    __this->_caps = nullptr;
}

// public generated TopFrameBackground() [instance]
void TopFrameBackground::ctor_5()
{
    ctor_4();
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/TreeRenderer.Android.uno
// -------------------------------------------------------------------------------------

// internal sealed extern class TreeRenderer
// {
static void TreeRenderer_build(uType* type)
{
    type->SetDependencies(
        ::g::Fuse::Controls::Native::Android::InputDispatch_typeof());
    type->SetInterfaces(
        ::g::Fuse::Elements::ITreeRenderer_typeof(), offsetof(TreeRenderer_type, interface0));
    type->SetFields(0,
        ::g::Uno::Action1_typeof()->MakeType(::g::Fuse::Controls::Native::ViewHandle_typeof(), nullptr), offsetof(TreeRenderer, _setRoot), 0,
        ::g::Uno::Action1_typeof()->MakeType(::g::Fuse::Controls::Native::ViewHandle_typeof(), nullptr), offsetof(TreeRenderer, _clearRoot), 0,
        ::g::Uno::Collections::Dictionary_typeof()->MakeType(::g::Fuse::Elements::Element_typeof(), ::g::Fuse::Controls::Native::ViewHandle_typeof(), nullptr), offsetof(TreeRenderer, _elements), 0);
}

TreeRenderer_type* TreeRenderer_typeof()
{
    static uSStrong<TreeRenderer_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.FieldCount = 3;
    options.InterfaceCount = 1;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(TreeRenderer);
    options.TypeSize = sizeof(TreeRenderer_type);
    type = (TreeRenderer_type*)uClassType::New("Fuse.Controls.TreeRenderer", options);
    type->fp_build_ = TreeRenderer_build;
    type->interface0.fp_RootingStarted = (void(*)(uObject*, ::g::Fuse::Elements::Element*))TreeRenderer__FuseElementsITreeRendererRootingStarted_fn;
    type->interface0.fp_Rooted = (void(*)(uObject*, ::g::Fuse::Elements::Element*))TreeRenderer__FuseElementsITreeRendererRooted_fn;
    type->interface0.fp_Unrooted = (void(*)(uObject*, ::g::Fuse::Elements::Element*))TreeRenderer__FuseElementsITreeRendererUnrooted_fn;
    type->interface0.fp_BackgroundChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, ::g::Fuse::Drawing::Brush*))TreeRenderer__FuseElementsITreeRendererBackgroundChanged_fn;
    type->interface0.fp_TransformChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*))TreeRenderer__FuseElementsITreeRendererTransformChanged_fn;
    type->interface0.fp_Placed = (void(*)(uObject*, ::g::Fuse::Elements::Element*))TreeRenderer__FuseElementsITreeRendererPlaced_fn;
    type->interface0.fp_RenderBoundsChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*))TreeRenderer__FuseElementsITreeRendererRenderBoundsChanged_fn;
    type->interface0.fp_IsVisibleChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, bool*))TreeRenderer__FuseElementsITreeRendererIsVisibleChanged_fn;
    type->interface0.fp_IsEnabledChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, bool*))TreeRenderer__FuseElementsITreeRendererIsEnabledChanged_fn;
    type->interface0.fp_OpacityChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, float*))TreeRenderer__FuseElementsITreeRendererOpacityChanged_fn;
    type->interface0.fp_ClipToBoundsChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, bool*))TreeRenderer__FuseElementsITreeRendererClipToBoundsChanged_fn;
    type->interface0.fp_HitTestModeChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, bool*))TreeRenderer__FuseElementsITreeRendererHitTestModeChanged_fn;
    type->interface0.fp_ZOrderChanged = (void(*)(uObject*, ::g::Fuse::Elements::Element*, uArray*))TreeRenderer__FuseElementsITreeRendererZOrderChanged_fn;
    type->interface0.fp_Measure = (void(*)(uObject*, ::g::Fuse::Elements::Element*, ::g::Fuse::LayoutParams*, ::g::Uno::Float2*, bool*))TreeRenderer__FuseElementsITreeRendererMeasure_fn;
    return type;
}

// public TreeRenderer(Uno.Action<Fuse.Controls.Native.ViewHandle> setRoot, Uno.Action<Fuse.Controls.Native.ViewHandle> clearRoot)
void TreeRenderer__ctor__fn(TreeRenderer* __this, uDelegate* setRoot, uDelegate* clearRoot)
{
    __this->ctor_(setRoot, clearRoot);
}

// private void Fuse.Elements.ITreeRenderer.BackgroundChanged(Fuse.Elements.Element e, Fuse.Drawing.Brush background)
void TreeRenderer__FuseElementsITreeRendererBackgroundChanged_fn(TreeRenderer* __this, ::g::Fuse::Elements::Element* e, ::g::Fuse::Drawing::Brush* background)
{
    ::g::Fuse::Controls::Native::ViewHandle* ret3;
    uPtr((::g::Uno::Collections::Dictionary__get_Item_fn(uPtr(__this->_elements), e, &ret3), ret3))->SetBackgroundColor(::g::Fuse::Controls::Extensions::GetColor(background));
}

// private void Fuse.Elements.ITreeRenderer.ClipToBoundsChanged(Fuse.Elements.Element e, bool clipToBounds)
void TreeRenderer__FuseElementsITreeRendererClipToBoundsChanged_fn(TreeRenderer* __this, ::g::Fuse::Elements::Element* e, bool* clipToBounds)
{
    ::g::Fuse::Controls::Native::ViewHandle* ret4;
    bool clipToBounds_ = *clipToBounds;
    ::g::Fuse::Controls::Native::ViewHandle* viewHandle = (::g::Uno::Collections::Dictionary__get_Item_fn(uPtr(__this->_elements), e, &ret4), ret4);

    if (uPtr(viewHandle)->IsViewGroup())
        uPtr(viewHandle)->SetClipToBounds(clipToBounds_);
}

// private void Fuse.Elements.ITreeRenderer.HitTestModeChanged(Fuse.Elements.Element e, bool enabled)
void TreeRenderer__FuseElementsITreeRendererHitTestModeChanged_fn(TreeRenderer* __this, ::g::Fuse::Elements::Element* e, bool* enabled)
{
    ::g::Fuse::Controls::Native::ViewHandle* ret5;
    bool enabled_ = *enabled;
    ::g::Fuse::Controls::Native::ViewHandle* viewHandle = (::g::Uno::Collections::Dictionary__get_Item_fn(uPtr(__this->_elements), e, &ret5), ret5);

    if (uPtr(viewHandle)->IsViewGroup())
        uPtr(viewHandle)->SetHitTestEnabled(enabled_);
}

// private void Fuse.Elements.ITreeRenderer.IsEnabledChanged(Fuse.Elements.Element e, bool isEnabled)
void TreeRenderer__FuseElementsITreeRendererIsEnabledChanged_fn(TreeRenderer* __this, ::g::Fuse::Elements::Element* e, bool* isEnabled)
{
    ::g::Fuse::Controls::Native::ViewHandle* ret6;
    bool isEnabled_ = *isEnabled;
    uPtr((::g::Uno::Collections::Dictionary__get_Item_fn(uPtr(__this->_elements), e, &ret6), ret6))->SetEnabled(isEnabled_);
}

// private void Fuse.Elements.ITreeRenderer.IsVisibleChanged(Fuse.Elements.Element e, bool isVisible)
void TreeRenderer__FuseElementsITreeRendererIsVisibleChanged_fn(TreeRenderer* __this, ::g::Fuse::Elements::Element* e, bool* isVisible)
{
    ::g::Fuse::Controls::Native::ViewHandle* ret7;
    bool isVisible_ = *isVisible;
    uPtr((::g::Uno::Collections::Dictionary__get_Item_fn(uPtr(__this->_elements), e, &ret7), ret7))->SetIsVisible(isVisible_);
}

// private bool Fuse.Elements.ITreeRenderer.Measure(Fuse.Elements.Element e, Fuse.LayoutParams lp, float2& size)
void TreeRenderer__FuseElementsITreeRendererMeasure_fn(TreeRenderer* __this, ::g::Fuse::Elements::Element* e, ::g::Fuse::LayoutParams* lp, ::g::Uno::Float2* size, bool* __retval)
{
    ::g::Fuse::Controls::Native::ViewHandle* ret8;
    ::g::Fuse::LayoutParams lp_ = *lp;
    ::g::Fuse::Controls::Native::ViewHandle* viewHandle = (::g::Uno::Collections::Dictionary__get_Item_fn(uPtr(__this->_elements), e, &ret8), ret8);
    bool canMeasure = uPtr(viewHandle)->IsLeafView || uIs(viewHandle, TreeRenderer__ViewGroup_typeof());
    *size = canMeasure ? viewHandle->Measure(lp_, ::g::Fuse::ICommonViewport::PixelsPerPoint(uInterface(uPtr(uPtr(e)->Viewport()), ::TYPES[36/*Fuse.ICommonViewport*/]))) : ::g::Uno::Float2__New1(0.0f);
    return *__retval = canMeasure, void();
}

// private void Fuse.Elements.ITreeRenderer.OpacityChanged(Fuse.Elements.Element e, float opacity)
void TreeRenderer__FuseElementsITreeRendererOpacityChanged_fn(TreeRenderer* __this, ::g::Fuse::Elements::Element* e, float* opacity)
{
    ::g::Fuse::Controls::Native::ViewHandle* ret9;
    float opacity_ = *opacity;
    uPtr((::g::Uno::Collections::Dictionary__get_Item_fn(uPtr(__this->_elements), e, &ret9), ret9))->SetOpacity(opacity_);
}

// private void Fuse.Elements.ITreeRenderer.Placed(Fuse.Elements.Element e)
void TreeRenderer__FuseElementsITreeRendererPlaced_fn(TreeRenderer* __this, ::g::Fuse::Elements::Element* e)
{
    ::g::Fuse::Controls::Native::ViewHandle* ret10;
    float density = ::g::Fuse::ICommonViewport::PixelsPerPoint(uInterface(uPtr(uPtr(e)->Viewport()), ::TYPES[36/*Fuse.ICommonViewport*/]));
    ::g::Uno::Int2 actualPosition = ::g::Uno::Int2__op_Explicit1(::g::Uno::Float2__op_Multiply1(e->ActualPosition(), density));
    ::g::Uno::Int2 actualSize = ::g::Uno::Int2__op_Explicit1(::g::Uno::Float2__op_Multiply1(e->ActualSize(), density));
    uPtr((::g::Uno::Collections::Dictionary__get_Item_fn(uPtr(__this->_elements), e, &ret10), ret10))->UpdateViewRect1(actualPosition.X, actualPosition.Y, actualSize.X, actualSize.Y);
}

// private void Fuse.Elements.ITreeRenderer.RenderBoundsChanged(Fuse.Elements.Element e)
void TreeRenderer__FuseElementsITreeRendererRenderBoundsChanged_fn(TreeRenderer* __this, ::g::Fuse::Elements::Element* e)
{
}

// private void Fuse.Elements.ITreeRenderer.Rooted(Fuse.Elements.Element e)
void TreeRenderer__FuseElementsITreeRendererRooted_fn(TreeRenderer* __this, ::g::Fuse::Elements::Element* e)
{
}

// private void Fuse.Elements.ITreeRenderer.RootingStarted(Fuse.Elements.Element e)
void TreeRenderer__FuseElementsITreeRendererRootingStarted_fn(TreeRenderer* __this, ::g::Fuse::Elements::Element* e)
{
    bool ret11;
    ::g::Fuse::Controls::Native::ViewHandle* v = __this->InstantiateView(e);

    if (uIs(e, ::TYPES[14/*Fuse.Controls.Control*/]))
        uPtr(uCast< ::g::Fuse::Controls::Control*>(e, ::TYPES[14/*Fuse.Controls.Control*/]))->ViewHandle(v);

    if (uIs((::g::Fuse::Visual*)uPtr(e)->Parent(), ::TYPES[5/*Fuse.Elements.Element*/]) && (::g::Uno::Collections::Dictionary__ContainsKey_fn(uPtr(__this->_elements), uCast< ::g::Fuse::Elements::Element*>(uPtr(e)->Parent(), ::TYPES[5/*Fuse.Elements.Element*/]), &ret11), ret11))
        uPtr(__this->GetParentViewGroup(e))->InsertChild1(v, 0);
    else
        uPtr(__this->_setRoot)->InvokeVoid(v);

    if (!uPtr(v)->HandlesInput)
        ::g::Fuse::Controls::Native::Android::InputDispatch::AddListener(v, e);

    ::g::Uno::Collections::Dictionary__Add_fn(uPtr(__this->_elements), e, v);
}

// private void Fuse.Elements.ITreeRenderer.TransformChanged(Fuse.Elements.Element e)
void TreeRenderer__FuseElementsITreeRendererTransformChanged_fn(TreeRenderer* __this, ::g::Fuse::Elements::Element* e)
{
    ::g::Fuse::Controls::Native::ViewHandle* ret12;
    ::g::Fuse::Controls::Native::ViewHandle* viewHandle = (::g::Uno::Collections::Dictionary__get_Item_fn(uPtr(__this->_elements), e, &ret12), ret12);
    ::g::Uno::Float4x4 transform = uPtr(e)->LocalTransform();
    ::g::Uno::Float2 size = e->ActualSize();
    float density = ::g::Fuse::ICommonViewport::PixelsPerPoint(uInterface(uPtr(e->Viewport()), ::TYPES[36/*Fuse.ICommonViewport*/]));
    ::g::Fuse::Visual* p = e->Parent();

    if (uIs(p, ::TYPES[14/*Fuse.Controls.Control*/]))
        uPtr(uCast< ::g::Fuse::Controls::Control*>(p, ::TYPES[14/*Fuse.Controls.Control*/]))->CompensateForScrollView(&transform);

    uPtr(viewHandle)->UpdateViewRect(transform, size, density);
}

// private void Fuse.Elements.ITreeRenderer.Unrooted(Fuse.Elements.Element e)
void TreeRenderer__FuseElementsITreeRendererUnrooted_fn(TreeRenderer* __this, ::g::Fuse::Elements::Element* e)
{
    bool ret13;
    ::g::Fuse::Controls::Native::ViewHandle* ret14;
    ::g::Fuse::Controls::Native::ViewHandle* ret15;
    ::g::Fuse::Controls::Native::ViewHandle* ret16;
    ::g::Fuse::Controls::Native::ViewHandle* ret17;
    bool ret18;

    if (uIs((::g::Fuse::Visual*)uPtr(e)->Parent(), ::TYPES[5/*Fuse.Elements.Element*/]) && (::g::Uno::Collections::Dictionary__ContainsKey_fn(uPtr(__this->_elements), uCast< ::g::Fuse::Elements::Element*>(uPtr(e)->Parent(), ::TYPES[5/*Fuse.Elements.Element*/]), &ret13), ret13))
        uPtr((::g::Uno::Collections::Dictionary__get_Item_fn(uPtr(__this->_elements), uCast< ::g::Fuse::Elements::Element*>(uPtr(e)->Parent(), ::TYPES[5/*Fuse.Elements.Element*/]), &ret14), ret14))->RemoveChild((::g::Uno::Collections::Dictionary__get_Item_fn(uPtr(__this->_elements), e, &ret15), ret15));
    else
        uPtr(__this->_clearRoot)->InvokeVoid((::g::Uno::Collections::Dictionary__get_Item_fn(uPtr(__this->_elements), e, &ret16), ret16));

    ::g::Fuse::Controls::Native::ViewHandle* v = (::g::Uno::Collections::Dictionary__get_Item_fn(uPtr(__this->_elements), e, &ret17), ret17);
    ::g::Uno::Collections::Dictionary__Remove_fn(uPtr(__this->_elements), e, &ret18);

    if (!uPtr(v)->HandlesInput)
        ::g::Fuse::Controls::Native::Android::InputDispatch::RemoveListener(v);

    if (uIs(e, ::TYPES[14/*Fuse.Controls.Control*/]))
    {
        ::g::Fuse::Controls::Control* c = uCast< ::g::Fuse::Controls::Control*>(e, ::TYPES[14/*Fuse.Controls.Control*/]);

        if (uPtr(c)->ViewHandle() != nullptr)
        {
            uPtr(uPtr(c)->ViewHandle())->Dispose();
            c->ViewHandle(nullptr);
        }

        uPtr(c)->NativeView(nullptr);
    }
}

// private void Fuse.Elements.ITreeRenderer.ZOrderChanged(Fuse.Elements.Element e, Fuse.Visual[] zorder)
void TreeRenderer__FuseElementsITreeRendererZOrderChanged_fn(TreeRenderer* __this, ::g::Fuse::Elements::Element* e, uArray* zorder)
{
    ::g::Fuse::Controls::Native::ViewHandle* ret19;

    for (int32_t i = 0; i < uPtr(zorder)->Length(); i++)
    {
        ::g::Fuse::Elements::Element* child = uAs< ::g::Fuse::Elements::Element*>(uPtr(zorder)->Strong< ::g::Fuse::Visual*>(i), ::TYPES[5/*Fuse.Elements.Element*/]);

        if (child != nullptr)
            uPtr((::g::Uno::Collections::Dictionary__get_Item_fn(uPtr(__this->_elements), child, &ret19), ret19))->BringToFront();
    }
}

// private Fuse.Controls.Native.ViewHandle GetParentViewGroup(Fuse.Elements.Element e)
void TreeRenderer__GetParentViewGroup_fn(TreeRenderer* __this, ::g::Fuse::Elements::Element* e, ::g::Fuse::Controls::Native::ViewHandle** __retval)
{
    *__retval = __this->GetParentViewGroup(e);
}

// private object InstantiateTemplate(Fuse.Elements.Element e)
void TreeRenderer__InstantiateTemplate_fn(TreeRenderer* __this, ::g::Fuse::Elements::Element* e, uObject** __retval)
{
    *__retval = __this->InstantiateTemplate(e);
}

// private Fuse.Controls.Native.ViewHandle InstantiateView(Fuse.Elements.Element e)
void TreeRenderer__InstantiateView_fn(TreeRenderer* __this, ::g::Fuse::Elements::Element* e, ::g::Fuse::Controls::Native::ViewHandle** __retval)
{
    *__retval = __this->InstantiateView(e);
}

// private object InstantiateViewOld(Fuse.Elements.Element e)
void TreeRenderer__InstantiateViewOld_fn(TreeRenderer* __this, ::g::Fuse::Elements::Element* e, uObject** __retval)
{
    *__retval = __this->InstantiateViewOld(e);
}

// public TreeRenderer New(Uno.Action<Fuse.Controls.Native.ViewHandle> setRoot, Uno.Action<Fuse.Controls.Native.ViewHandle> clearRoot)
void TreeRenderer__New1_fn(uDelegate* setRoot, uDelegate* clearRoot, TreeRenderer** __retval)
{
    *__retval = TreeRenderer::New1(setRoot, clearRoot);
}

// private void TransformIntoViewGroup(Fuse.Elements.Element e)
void TreeRenderer__TransformIntoViewGroup_fn(TreeRenderer* __this, ::g::Fuse::Elements::Element* e)
{
    __this->TransformIntoViewGroup(e);
}

// public TreeRenderer(Uno.Action<Fuse.Controls.Native.ViewHandle> setRoot, Uno.Action<Fuse.Controls.Native.ViewHandle> clearRoot) [instance]
void TreeRenderer::ctor_(uDelegate* setRoot, uDelegate* clearRoot)
{
    _elements = ((::g::Uno::Collections::Dictionary*)::g::Uno::Collections::Dictionary::New1(::g::Uno::Collections::Dictionary_typeof()->MakeType(::TYPES[5/*Fuse.Elements.Element*/], ::g::Fuse::Controls::Native::ViewHandle_typeof(), nullptr)));
    _setRoot = setRoot;
    _clearRoot = clearRoot;
}

// private Fuse.Controls.Native.ViewHandle GetParentViewGroup(Fuse.Elements.Element e) [instance]
::g::Fuse::Controls::Native::ViewHandle* TreeRenderer::GetParentViewGroup(::g::Fuse::Elements::Element* e)
{
    ::g::Fuse::Controls::Native::ViewHandle* ret20;
    ::g::Fuse::Controls::Native::ViewHandle* ret21;
    ::g::Fuse::Elements::Element* parent = uCast< ::g::Fuse::Elements::Element*>(uPtr(e)->Parent(), ::TYPES[5/*Fuse.Elements.Element*/]);
    ::g::Fuse::Controls::Native::ViewHandle* parentView = (::g::Uno::Collections::Dictionary__get_Item_fn(uPtr(_elements), parent, &ret20), ret20);

    if (!uPtr(parentView)->IsViewGroup())
        TransformIntoViewGroup(parent);

    return (::g::Uno::Collections::Dictionary__get_Item_fn(uPtr(_elements), parent, &ret21), ret21);
}

// private object InstantiateTemplate(Fuse.Elements.Element e) [instance]
uObject* TreeRenderer::InstantiateTemplate(::g::Fuse::Elements::Element* e)
{
    ::g::Uno::UX::Template* t = uPtr(e)->FindTemplate(::STRINGS[104/*"AndroidAppe...*/]);
    return (t != nullptr) ? (uObject*)uPtr(t)->New1() : nullptr;
}

// private Fuse.Controls.Native.ViewHandle InstantiateView(Fuse.Elements.Element e) [instance]
::g::Fuse::Controls::Native::ViewHandle* TreeRenderer::InstantiateView(::g::Fuse::Elements::Element* e)
{
    uObject* ind1;
    uObject* sd = uAs<uObject*>(e, ::TYPES[39/*Fuse.Drawing.ISurfaceDrawable*/]);

    if ((sd != nullptr) && ::g::Fuse::Drawing::ISurfaceDrawable::IsPrimary(uInterface(uPtr(sd), ::TYPES[39/*Fuse.Drawing.ISurfaceDrawable*/])))
        return ::g::Fuse::Controls::Native::Android::CanvasViewGroup::New5(sd, ::g::Fuse::ICommonViewport::PixelsPerPoint(uInterface(uPtr(uPtr(e)->Viewport()), ::TYPES[36/*Fuse.ICommonViewport*/])));

    ::g::Fuse::Controls::Native::ViewHandle* appearance = uAs< ::g::Fuse::Controls::Native::ViewHandle*>((ind1 = InstantiateTemplate(e), (ind1 != nullptr) ? ind1 : (uObject*)InstantiateViewOld(e)), ::g::Fuse::Controls::Native::ViewHandle_typeof());

    if (appearance != nullptr)
    {
        if (uIs(e, ::TYPES[14/*Fuse.Controls.Control*/]))
        {
            uPtr(uCast< ::g::Fuse::Controls::Control*>(e, ::TYPES[14/*Fuse.Controls.Control*/]))->ViewHandle(appearance);

            if (uIs(appearance, ::g::Fuse::Controls::Native::IView_typeof()))
                uPtr(uCast< ::g::Fuse::Controls::Control*>(e, ::TYPES[14/*Fuse.Controls.Control*/]))->NativeView((uObject*)appearance);
        }

        return appearance;
    }
    else
        return ::g::Fuse::Controls::Native::ViewFactory::InstantiateViewGroup();
}

// private object InstantiateViewOld(Fuse.Elements.Element e) [instance]
uObject* TreeRenderer::InstantiateViewOld(::g::Fuse::Elements::Element* e)
{
    if (uIs(e, ::TYPES[14/*Fuse.Controls.Control*/]))
    {
        ::g::Fuse::Controls::Control* c = uCast< ::g::Fuse::Controls::Control*>(e, ::TYPES[14/*Fuse.Controls.Control*/]);
        return uPtr(c)->InstantiateNativeView();
    }

    return nullptr;
}

// private void TransformIntoViewGroup(Fuse.Elements.Element e) [instance]
void TreeRenderer::TransformIntoViewGroup(::g::Fuse::Elements::Element* e)
{
    ::g::Fuse::Controls::Native::ViewHandle* ret22;
    ::g::Fuse::Controls::Native::ViewHandle* ret23;
    ::g::Fuse::Controls::Native::ViewHandle* parentView = (::g::Uno::Collections::Dictionary__get_Item_fn(uPtr(_elements), uCast< ::g::Fuse::Elements::Element*>(uPtr(e)->Parent(), ::TYPES[5/*Fuse.Elements.Element*/]), &ret22), ret22);
    ::g::Fuse::Controls::Native::ViewHandle* child = (::g::Uno::Collections::Dictionary__get_Item_fn(uPtr(_elements), e, &ret23), ret23);
    int32_t index = uPtr(parentView)->IndexOfChild(child);
    parentView->RemoveChild(child);
    TreeRenderer__ViewGroup* viewGroup = TreeRenderer__ViewGroup::New5(child);
    ::g::Fuse::Controls::Native::ViewHandle::CopyState(child, viewGroup);
    uPtr(child)->ResetState();
    parentView->InsertChild1(viewGroup, index);
    ::g::Uno::Collections::Dictionary__set_Item_fn(uPtr(_elements), e, viewGroup);
}

// public TreeRenderer New(Uno.Action<Fuse.Controls.Native.ViewHandle> setRoot, Uno.Action<Fuse.Controls.Native.ViewHandle> clearRoot) [static]
TreeRenderer* TreeRenderer::New1(uDelegate* setRoot, uDelegate* clearRoot)
{
    TreeRenderer* obj2 = (TreeRenderer*)uNew(TreeRenderer_typeof());
    obj2->ctor_(setRoot, clearRoot);
    return obj2;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/TreeRendererPanel.uno
// ----------------------------------------------------------------------------------

// internal sealed extern class TreeRendererPanel
// {
static void TreeRendererPanel_build(uType* type)
{
    ::TYPES[65] = ::g::Uno::Action1_typeof()->MakeType(::g::Fuse::Controls::Native::ViewHandle_typeof(), nullptr);
    ::TYPES[66] = ::g::Fuse::Controls::INativeViewRoot_typeof();
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(::g::Fuse::Controls::Panel_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(::g::Fuse::Controls::Panel_type, interface18));
    type->SetFields(115,
        ::g::Fuse::Controls::TreeRenderer_typeof(), offsetof(TreeRendererPanel, _treeRenderer), 0,
        ::TYPES[66/*Fuse.Controls.INativeViewRoot*/], offsetof(TreeRendererPanel, _nativeViewHost), 0);
}

::g::Fuse::Controls::Panel_type* TreeRendererPanel_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Panel_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::Panel_typeof();
    options.FieldCount = 117;
    options.InterfaceCount = 19;
    options.ObjectSize = sizeof(TreeRendererPanel);
    options.TypeSize = sizeof(::g::Fuse::Controls::Panel_type);
    type = (::g::Fuse::Controls::Panel_type*)uClassType::New("Fuse.Controls.TreeRendererPanel", options);
    type->fp_build_ = TreeRendererPanel_build;
    type->fp_get_TreeRenderer = (void(*)(::g::Fuse::Elements::Element*, uObject**))TreeRendererPanel__get_TreeRenderer_fn;
    type->fp_get_VisualContext = (void(*)(::g::Fuse::Visual*, int32_t*))TreeRendererPanel__get_VisualContext_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public TreeRendererPanel(Fuse.Controls.INativeViewRoot nativeViewHost)
void TreeRendererPanel__ctor_7_fn(TreeRendererPanel* __this, uObject* nativeViewHost)
{
    __this->ctor_7(nativeViewHost);
}

// private void ClearRoot(Fuse.Controls.Native.ViewHandle viewHandle)
void TreeRendererPanel__ClearRoot_fn(TreeRendererPanel* __this, ::g::Fuse::Controls::Native::ViewHandle* viewHandle)
{
    __this->ClearRoot(viewHandle);
}

// public TreeRendererPanel New(Fuse.Controls.INativeViewRoot nativeViewHost)
void TreeRendererPanel__New4_fn(uObject* nativeViewHost, TreeRendererPanel** __retval)
{
    *__retval = TreeRendererPanel::New4(nativeViewHost);
}

// private void SetRoot(Fuse.Controls.Native.ViewHandle viewHandle)
void TreeRendererPanel__SetRoot_fn(TreeRendererPanel* __this, ::g::Fuse::Controls::Native::ViewHandle* viewHandle)
{
    __this->SetRoot(viewHandle);
}

// public override sealed Fuse.Elements.ITreeRenderer get_TreeRenderer()
void TreeRendererPanel__get_TreeRenderer_fn(TreeRendererPanel* __this, uObject** __retval)
{
    return *__retval = (uObject*)__this->_treeRenderer, void();
}

// public override sealed Fuse.VisualContext get_VisualContext()
void TreeRendererPanel__get_VisualContext_fn(TreeRendererPanel* __this, int32_t* __retval)
{
    return *__retval = 2, void();
}

// public TreeRendererPanel(Fuse.Controls.INativeViewRoot nativeViewHost) [instance]
void TreeRendererPanel::ctor_7(uObject* nativeViewHost)
{
    ctor_6();
    _nativeViewHost = nativeViewHost;
    _treeRenderer = ::g::Fuse::Controls::TreeRenderer::New1(uDelegate::New(::TYPES[65/*Uno.Action<Fuse.Controls.Native.ViewHandle>*/], (void*)TreeRendererPanel__SetRoot_fn, this), uDelegate::New(::TYPES[65/*Uno.Action<Fuse.Controls.Native.ViewHandle>*/], (void*)TreeRendererPanel__ClearRoot_fn, this));
}

// private void ClearRoot(Fuse.Controls.Native.ViewHandle viewHandle) [instance]
void TreeRendererPanel::ClearRoot(::g::Fuse::Controls::Native::ViewHandle* viewHandle)
{
    ::g::Fuse::Controls::INativeViewRoot::Remove(uInterface(uPtr(_nativeViewHost), ::TYPES[66/*Fuse.Controls.INativeViewRoot*/]), viewHandle);
}

// private void SetRoot(Fuse.Controls.Native.ViewHandle viewHandle) [instance]
void TreeRendererPanel::SetRoot(::g::Fuse::Controls::Native::ViewHandle* viewHandle)
{
    ::g::Fuse::Controls::INativeViewRoot::Add(uInterface(uPtr(_nativeViewHost), ::TYPES[66/*Fuse.Controls.INativeViewRoot*/]), viewHandle);
}

// public TreeRendererPanel New(Fuse.Controls.INativeViewRoot nativeViewHost) [static]
TreeRendererPanel* TreeRendererPanel::New4(uObject* nativeViewHost)
{
    TreeRendererPanel* obj1 = (TreeRendererPanel*)uNew(TreeRendererPanel_typeof());
    obj1->ctor_7(nativeViewHost);
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Navigation/NavigationControl.Pages.uno
// --------------------------------------------------------------------------------------------

// private enum NavigationControl.UpdateFlags
uEnumType* NavigationControl__UpdateFlags_typeof()
{
    static uSStrong<uEnumType*> type;
    if (type != nullptr) return type;

    type = uEnumType::New("Fuse.Controls.NavigationControl.UpdateFlags", ::g::Uno::Int_typeof(), 5);
    type->SetLiterals(
        "None", 0LL,
        "ForceGoto", 1LL,
        "Add", 2LL,
        "Replace", 4LL,
        "Bypass", 8LL);
    return type;
}

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.WebView/URISchemeEventArgs.uno
// ------------------------------------------------------------------------------------

// public sealed class URISchemeEventArgs
// {
static void URISchemeEventArgs_build(uType* type)
{
    ::STRINGS[19] = uString::Const("url");
    ::TYPES[17] = ::g::Fuse::Scripting::IEventSerializer_typeof();
    type->SetInterfaces(
        ::g::Fuse::Scripting::IScriptEvent_typeof(), offsetof(URISchemeEventArgs_type, interface0));
    type->SetFields(0,
        ::g::Uno::String_typeof(), offsetof(URISchemeEventArgs, Url), 0);
}

URISchemeEventArgs_type* URISchemeEventArgs_typeof()
{
    static uSStrong<URISchemeEventArgs_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Uno::EventArgs_typeof();
    options.FieldCount = 1;
    options.InterfaceCount = 1;
    options.ObjectSize = sizeof(URISchemeEventArgs);
    options.TypeSize = sizeof(URISchemeEventArgs_type);
    type = (URISchemeEventArgs_type*)uClassType::New("Fuse.Controls.URISchemeEventArgs", options);
    type->fp_build_ = URISchemeEventArgs_build;
    type->interface0.fp_Serialize = (void(*)(uObject*, uObject*))URISchemeEventArgs__FuseScriptingIScriptEventSerialize_fn;
    return type;
}

// public URISchemeEventArgs(string url)
void URISchemeEventArgs__ctor_1_fn(URISchemeEventArgs* __this, uString* url)
{
    __this->ctor_1(url);
}

// private void Fuse.Scripting.IScriptEvent.Serialize(Fuse.Scripting.IEventSerializer s)
void URISchemeEventArgs__FuseScriptingIScriptEventSerialize_fn(URISchemeEventArgs* __this, uObject* s)
{
    ::g::Fuse::Scripting::IEventSerializer::AddString(uInterface(uPtr(s), ::TYPES[17/*Fuse.Scripting.IEventSerializer*/]), ::STRINGS[19/*"url"*/], __this->Url);
}

// public URISchemeEventArgs New(string url)
void URISchemeEventArgs__New2_fn(uString* url, URISchemeEventArgs** __retval)
{
    *__retval = URISchemeEventArgs::New2(url);
}

// public URISchemeEventArgs(string url) [instance]
void URISchemeEventArgs::ctor_1(uString* url)
{
    ctor_();
    Url = url;
}

// public URISchemeEventArgs New(string url) [static]
URISchemeEventArgs* URISchemeEventArgs::New2(uString* url)
{
    URISchemeEventArgs* obj1 = (URISchemeEventArgs*)uNew(URISchemeEventArgs_typeof());
    obj1->ctor_1(url);
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Video/Video.uno
// ---------------------------------------------------------------------

// public partial sealed class Video
// {
// static Video()
static void Video__cctor_4_fn(uType* __type)
{
    ::g::Fuse::Scripting::ScriptClass_typeof()->Init();
    Video::_positionName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[111/*"Position"*/]);
    Video::_durationName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[112/*"Duration"*/]);
    Video::_progressName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[113/*"Progress"*/]);
    ::g::Fuse::Scripting::ScriptClass::Register(__type, uArray::Init< ::g::Fuse::Scripting::ScriptMember*>(::TYPES[19/*Fuse.Scripting.ScriptMember[]*/], 4, (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New3(::TYPES[67/*Fuse.Scripting.ScriptMethod<Fuse.Controls.Video>*/], ::STRINGS[114/*"getDuration"*/], uDelegate::New(::TYPES[68/*Uno.Func<Fuse.Scripting.Context, Fuse.Controls.Video, object[], object>*/], (void*)Video__getDuration_fn)), (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New2(::TYPES[67/*Fuse.Scripting.ScriptMethod<Fuse.Controls.Video>*/], ::STRINGS[115/*"resume"*/], uDelegate::New(::TYPES[69/*Uno.Action<Fuse.Controls.Video>*/], (void*)Video__resume_fn)), (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New2(::TYPES[67/*Fuse.Scripting.ScriptMethod<Fuse.Controls.Video>*/], ::STRINGS[116/*"pause"*/], uDelegate::New(::TYPES[69/*Uno.Action<Fuse.Controls.Video>*/], (void*)Video__pause_fn)), (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New2(::TYPES[67/*Fuse.Scripting.ScriptMethod<Fuse.Controls.Video>*/], ::STRINGS[117/*"stop"*/], uDelegate::New(::TYPES[69/*Uno.Action<Fuse.Controls.Video>*/], (void*)Video__stop_fn))));
}

static void Video_build(uType* type)
{
    ::STRINGS[111] = uString::Const("Position");
    ::STRINGS[112] = uString::Const("Duration");
    ::STRINGS[113] = uString::Const("Progress");
    ::STRINGS[114] = uString::Const("getDuration");
    ::STRINGS[115] = uString::Const("resume");
    ::STRINGS[116] = uString::Const("pause");
    ::STRINGS[117] = uString::Const("stop");
    ::STRINGS[118] = uString::Const("getDuration takes 0 arguments, but ");
    ::STRINGS[119] = uString::Const(" was supplied");
    ::STRINGS[120] = uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Video/Video.ScriptClass.uno");
    ::TYPES[18] = ::g::Uno::Type_typeof();
    ::TYPES[19] = ::g::Fuse::Scripting::ScriptMember_typeof()->Array();
    ::TYPES[67] = ::g::Fuse::Scripting::ScriptMethod1_typeof()->MakeType(type, nullptr);
    ::TYPES[68] = ::g::Uno::Func3_typeof()->MakeType(::g::Fuse::Scripting::Context_typeof(), type, uObject_typeof()->Array(), uObject_typeof(), nullptr);
    ::TYPES[69] = ::g::Uno::Action1_typeof()->MakeType(type, nullptr);
    ::TYPES[70] = ::g::Uno::UX::ValueChangedArgs_typeof()->MakeType(::g::Uno::Double_typeof(), nullptr);
    ::TYPES[6] = ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr);
    ::TYPES[71] = ::g::Fuse::Visual_typeof()->MakeMethod(8/*RemoveAllChildren<Fuse.Controls.VideoImpl.VideoVisual>*/, ::g::Fuse::Controls::VideoImpl::VideoVisual_typeof(), nullptr);
    ::TYPES[72] = ::g::Fuse::Triggers::IPlayback_typeof();
    ::TYPES[73] = ::g::Fuse::Triggers::IMediaPlayback_typeof();
    ::TYPES[74] = ::g::Fuse::Triggers::IProgress_typeof();
    ::TYPES[30] = ::g::Uno::UX::ValueChangedHandler_typeof()->MakeType(::g::Uno::Double_typeof(), nullptr);
    ::TYPES[29] = ::g::Uno::EventHandler_typeof();
    type->SetDependencies(
        ::g::Uno::EventArgs_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(Video_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(Video_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(Video_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(Video_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(Video_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(Video_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(Video_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(Video_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(Video_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(Video_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(Video_type, interface10),
        ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/], offsetof(Video_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(Video_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(Video_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(Video_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(Video_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(Video_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(Video_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(Video_type, interface18),
        ::TYPES[73/*Fuse.Triggers.IMediaPlayback*/], offsetof(Video_type, interface19),
        ::TYPES[72/*Fuse.Triggers.IPlayback*/], offsetof(Video_type, interface20),
        ::TYPES[74/*Fuse.Triggers.IProgress*/], offsetof(Video_type, interface21));
    type->SetFields(115,
        ::g::Uno::UX::FileSource_typeof(), offsetof(Video, _file), 0,
        ::g::Uno::String_typeof(), offsetof(Video, _url), 0,
        ::g::Uno::Float4_typeof(), offsetof(Video, _scale9Margin), 0,
        ::g::Uno::Bool_typeof(), offsetof(Video, _hasScale9Margin), 0,
        ::g::Uno::Bool_typeof(), offsetof(Video, _isLooping), 0,
        ::g::Uno::Bool_typeof(), offsetof(Video, _autoPlay), 0,
        ::g::Fuse::Elements::StretchMode_typeof(), offsetof(Video, _stretchMode), 0,
        ::g::Fuse::Elements::StretchDirection_typeof(), offsetof(Video, _stretchDirection), 0,
        ::g::Fuse::Elements::StretchSizing_typeof(), offsetof(Video, _stretchSizing), 0,
        ::g::Fuse::Elements::Alignment_typeof(), offsetof(Video, _contentAlignment), 0,
        ::g::Uno::Float_typeof(), offsetof(Video, _volume), 0,
        ::TYPES[73/*Fuse.Triggers.IMediaPlayback*/], offsetof(Video, _playback), 0,
        uObject_typeof(), offsetof(Video, _durationMutex), 0,
        ::g::Uno::Double_typeof(), offsetof(Video, _outDuration), 0,
        ::TYPES[29/*Uno.EventHandler*/], offsetof(Video, ParamChanged1), 0,
        ::TYPES[30/*Uno.UX.ValueChangedHandler<double>*/], offsetof(Video, ProgressChanged1), 0,
        ::TYPES[29/*Uno.EventHandler*/], offsetof(Video, RenderParamChanged1), 0,
        ::TYPES[29/*Uno.EventHandler*/], offsetof(Video, SourceChanged1), 0,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&Video::_positionName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&Video::_durationName_, uFieldFlagsStatic,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&Video::_progressName_, uFieldFlagsStatic);
}

Video_type* Video_typeof()
{
    static uSStrong<Video_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::Panel_typeof();
    options.FieldCount = 136;
    options.InterfaceCount = 22;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(Video);
    options.TypeSize = sizeof(Video_type);
    type = (Video_type*)uClassType::New("Fuse.Controls.Video", options);
    type->fp_build_ = Video_build;
    type->fp_cctor_ = Video__cctor_4_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))Video__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))Video__OnUnrooted_fn;
    type->interface19.fp_get_Position = (void(*)(uObject*, double*))Video__get_Position1_fn;
    type->interface19.fp_set_Position = (void(*)(uObject*, double*))Video__set_Position1_fn;
    type->interface19.fp_get_Duration = (void(*)(uObject*, double*))Video__get_Duration_fn;
    type->interface20.fp_Stop = (void(*)(uObject*))Video__Stop_fn;
    type->interface20.fp_Pause = (void(*)(uObject*))Video__Pause_fn;
    type->interface20.fp_Resume = (void(*)(uObject*))Video__Resume_fn;
    type->interface20.fp_get_Progress = (void(*)(uObject*, double*))Video__get_Progress_fn;
    type->interface20.fp_set_Progress = (void(*)(uObject*, double*))Video__set_Progress_fn;
    type->interface21.fp_get_Progress = (void(*)(uObject*, double*))Video__get_Progress_fn;
    type->interface21.fp_add_ProgressChanged = (void(*)(uObject*, uDelegate*))Video__add_ProgressChanged_fn;
    type->interface21.fp_remove_ProgressChanged = (void(*)(uObject*, uDelegate*))Video__remove_ProgressChanged_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public bool get_AutoPlay()
void Video__get_AutoPlay_fn(Video* __this, bool* __retval)
{
    *__retval = __this->AutoPlay();
}

// public void set_AutoPlay(bool value)
void Video__set_AutoPlay_fn(Video* __this, bool* value)
{
    __this->AutoPlay(*value);
}

// public Fuse.Elements.Alignment get_ContentAlignment()
void Video__get_ContentAlignment_fn(Video* __this, int32_t* __retval)
{
    *__retval = __this->ContentAlignment();
}

// public void set_ContentAlignment(Fuse.Elements.Alignment value)
void Video__set_ContentAlignment_fn(Video* __this, int32_t* value)
{
    __this->ContentAlignment(*value);
}

// public double get_Duration()
void Video__get_Duration_fn(Video* __this, double* __retval)
{
    *__retval = __this->Duration();
}

// public Uno.UX.FileSource get_File()
void Video__get_File_fn(Video* __this, ::g::Uno::UX::FileSource** __retval)
{
    *__retval = __this->File();
}

// public void set_File(Uno.UX.FileSource value)
void Video__set_File_fn(Video* __this, ::g::Uno::UX::FileSource* value)
{
    __this->File(value);
}

// private static object getDuration(Fuse.Scripting.Context c, Fuse.Controls.Video v, object[] args)
void Video__getDuration_fn(::g::Fuse::Scripting::Context* c, Video* v, uArray* args, uObject** __retval)
{
    *__retval = Video::getDuration(c, v, args);
}

// public bool get_IsLooping()
void Video__get_IsLooping_fn(Video* __this, bool* __retval)
{
    *__retval = __this->IsLooping();
}

// public void set_IsLooping(bool value)
void Video__set_IsLooping_fn(Video* __this, bool* value)
{
    __this->IsLooping(*value);
}

// internal void OnDurationChanged()
void Video__OnDurationChanged_fn(Video* __this)
{
    __this->OnDurationChanged();
}

// private void OnParamChanged()
void Video__OnParamChanged_fn(Video* __this)
{
    __this->OnParamChanged();
}

// private void OnProgressChanged(object sender, Uno.EventArgs args)
void Video__OnProgressChanged_fn(Video* __this, uObject* sender, ::g::Uno::EventArgs* args)
{
    __this->OnProgressChanged(sender, args);
}

// private void OnRenderParamChanged()
void Video__OnRenderParamChanged_fn(Video* __this)
{
    __this->OnRenderParamChanged();
}

// protected override sealed void OnRooted()
void Video__OnRooted_fn(Video* __this)
{
    ::g::Fuse::Controls::Panel__OnRooted_fn(__this);
    ::g::Uno::Collections::ICollection::Add_ex(uInterface(uPtr(__this->Children()), ::TYPES[6/*Uno.Collections.ICollection<Fuse.Node>*/]), ::g::Fuse::Controls::VideoImpl::VideoVisual::New2());
}

// private void OnSourceChanged()
void Video__OnSourceChanged_fn(Video* __this)
{
    __this->OnSourceChanged();
}

// protected override sealed void OnUnrooted()
void Video__OnUnrooted_fn(Video* __this)
{
    __this->RemoveAllChildren(::TYPES[71/*Fuse.Visual.RemoveAllChildren<Fuse.Controls.VideoImpl.VideoVisual>*/]);
    ::g::Fuse::Controls::Panel__OnUnrooted_fn(__this);
}

// public generated void add_ParamChanged(Uno.EventHandler value)
void Video__add_ParamChanged_fn(Video* __this, uDelegate* value)
{
    __this->add_ParamChanged(value);
}

// public generated void remove_ParamChanged(Uno.EventHandler value)
void Video__remove_ParamChanged_fn(Video* __this, uDelegate* value)
{
    __this->remove_ParamChanged(value);
}

// private static void pause(Fuse.Controls.Video v)
void Video__pause_fn(Video* v)
{
    Video::pause(v);
}

// public void Pause()
void Video__Pause_fn(Video* __this)
{
    __this->Pause();
}

// private Fuse.Triggers.IMediaPlayback get_Playback()
void Video__get_Playback_fn(Video* __this, uObject** __retval)
{
    *__retval = __this->Playback();
}

// private void set_Playback(Fuse.Triggers.IMediaPlayback value)
void Video__set_Playback_fn(Video* __this, uObject* value)
{
    __this->Playback(value);
}

// public new double get_Position()
void Video__get_Position1_fn(Video* __this, double* __retval)
{
    *__retval = __this->Position1();
}

// public new void set_Position(double value)
void Video__set_Position1_fn(Video* __this, double* value)
{
    __this->Position1(*value);
}

// public double get_Progress()
void Video__get_Progress_fn(Video* __this, double* __retval)
{
    *__retval = __this->Progress();
}

// public void set_Progress(double value)
void Video__set_Progress_fn(Video* __this, double* value)
{
    __this->Progress(*value);
}

// public generated void add_ProgressChanged(Uno.UX.ValueChangedHandler<double> value)
void Video__add_ProgressChanged_fn(Video* __this, uDelegate* value)
{
    __this->add_ProgressChanged(value);
}

// public generated void remove_ProgressChanged(Uno.UX.ValueChangedHandler<double> value)
void Video__remove_ProgressChanged_fn(Video* __this, uDelegate* value)
{
    __this->remove_ProgressChanged(value);
}

// public generated void add_RenderParamChanged(Uno.EventHandler value)
void Video__add_RenderParamChanged_fn(Video* __this, uDelegate* value)
{
    __this->add_RenderParamChanged(value);
}

// public generated void remove_RenderParamChanged(Uno.EventHandler value)
void Video__remove_RenderParamChanged_fn(Video* __this, uDelegate* value)
{
    __this->remove_RenderParamChanged(value);
}

// private static void resume(Fuse.Controls.Video v)
void Video__resume_fn(Video* v)
{
    Video::resume(v);
}

// public void Resume()
void Video__Resume_fn(Video* __this)
{
    __this->Resume();
}

// public float4 get_Scale9Margin()
void Video__get_Scale9Margin_fn(Video* __this, ::g::Uno::Float4* __retval)
{
    *__retval = __this->Scale9Margin();
}

// public void set_Scale9Margin(float4 value)
void Video__set_Scale9Margin_fn(Video* __this, ::g::Uno::Float4* value)
{
    __this->Scale9Margin(*value);
}

// public void SetPlayback(Fuse.Triggers.IMediaPlayback playback)
void Video__SetPlayback_fn(Video* __this, uObject* playback)
{
    __this->SetPlayback(playback);
}

// public generated void add_SourceChanged(Uno.EventHandler value)
void Video__add_SourceChanged_fn(Video* __this, uDelegate* value)
{
    __this->add_SourceChanged(value);
}

// public generated void remove_SourceChanged(Uno.EventHandler value)
void Video__remove_SourceChanged_fn(Video* __this, uDelegate* value)
{
    __this->remove_SourceChanged(value);
}

// private static void stop(Fuse.Controls.Video v)
void Video__stop_fn(Video* v)
{
    Video::stop(v);
}

// public void Stop()
void Video__Stop_fn(Video* __this)
{
    __this->Stop();
}

// public Fuse.Elements.StretchDirection get_StretchDirection()
void Video__get_StretchDirection_fn(Video* __this, int32_t* __retval)
{
    *__retval = __this->StretchDirection();
}

// public void set_StretchDirection(Fuse.Elements.StretchDirection value)
void Video__set_StretchDirection_fn(Video* __this, int32_t* value)
{
    __this->StretchDirection(*value);
}

// public Fuse.Elements.StretchMode get_StretchMode()
void Video__get_StretchMode_fn(Video* __this, int32_t* __retval)
{
    *__retval = __this->StretchMode();
}

// public void set_StretchMode(Fuse.Elements.StretchMode value)
void Video__set_StretchMode_fn(Video* __this, int32_t* value)
{
    __this->StretchMode(*value);
}

// public Fuse.Elements.StretchSizing get_StretchSizing()
void Video__get_StretchSizing_fn(Video* __this, int32_t* __retval)
{
    *__retval = __this->StretchSizing();
}

// public void set_StretchSizing(Fuse.Elements.StretchSizing value)
void Video__set_StretchSizing_fn(Video* __this, int32_t* value)
{
    __this->StretchSizing(*value);
}

// private void UpdateScriptClass(double duration)
void Video__UpdateScriptClass_fn(Video* __this, double* duration)
{
    __this->UpdateScriptClass(*duration);
}

// public string get_Url()
void Video__get_Url_fn(Video* __this, uString** __retval)
{
    *__retval = __this->Url();
}

// public void set_Url(string value)
void Video__set_Url_fn(Video* __this, uString* value)
{
    __this->Url(value);
}

// public float get_Volume()
void Video__get_Volume_fn(Video* __this, float* __retval)
{
    *__retval = __this->Volume();
}

// public void set_Volume(float value)
void Video__set_Volume_fn(Video* __this, float* value)
{
    __this->Volume(*value);
}

::g::Uno::UX::Selector Video::_positionName_;
::g::Uno::UX::Selector Video::_durationName_;
::g::Uno::UX::Selector Video::_progressName_;

// public bool get_AutoPlay() [instance]
bool Video::AutoPlay()
{
    return _autoPlay;
}

// public void set_AutoPlay(bool value) [instance]
void Video::AutoPlay(bool value)
{
    if (_autoPlay != value)
    {
        _autoPlay = value;
        OnParamChanged();
    }
}

// public Fuse.Elements.Alignment get_ContentAlignment() [instance]
int32_t Video::ContentAlignment()
{
    return _contentAlignment;
}

// public void set_ContentAlignment(Fuse.Elements.Alignment value) [instance]
void Video::ContentAlignment(int32_t value)
{
    if (_contentAlignment != value)
    {
        _contentAlignment = value;
        OnRenderParamChanged();
    }
}

// public double get_Duration() [instance]
double Video::Duration()
{
    return (Playback() != nullptr) ? ::g::Fuse::Triggers::IMediaPlayback::Duration(uInterface(uPtr(Playback()), ::TYPES[73/*Fuse.Triggers.IMediaPlayback*/])) : 0.0;
}

// public Uno.UX.FileSource get_File() [instance]
::g::Uno::UX::FileSource* Video::File()
{
    return _file;
}

// public void set_File(Uno.UX.FileSource value) [instance]
void Video::File(::g::Uno::UX::FileSource* value)
{
    if (_file != value)
    {
        _file = value;
        OnSourceChanged();
    }
}

// public bool get_IsLooping() [instance]
bool Video::IsLooping()
{
    return _isLooping;
}

// public void set_IsLooping(bool value) [instance]
void Video::IsLooping(bool value)
{
    if (_isLooping != value)
    {
        _isLooping = value;
        OnParamChanged();
    }
}

// internal void OnDurationChanged() [instance]
void Video::OnDurationChanged()
{
    OnPropertyChanged(Video::_durationName_);
}

// private void OnParamChanged() [instance]
void Video::OnParamChanged()
{
    if (::g::Uno::Delegate::op_Inequality(ParamChanged1, nullptr))
        uPtr(ParamChanged1)->Invoke(2, this, (::g::Uno::EventArgs*)::g::Uno::EventArgs::Empty());
}

// private void OnProgressChanged(object sender, Uno.EventArgs args) [instance]
void Video::OnProgressChanged(uObject* sender, ::g::Uno::EventArgs* args)
{
    ::g::Uno::UX::ValueChangedArgs* ret2;
    UpdateScriptClass(Duration());
    OnPropertyChanged(Video::_positionName_);
    OnPropertyChanged(Video::_progressName_);

    if (::g::Uno::Delegate::op_Inequality(ProgressChanged1, nullptr))
        uPtr(ProgressChanged1)->Invoke(2, this, (::g::Uno::UX::ValueChangedArgs__New2_fn(::TYPES[70/*Uno.UX.ValueChangedArgs<double>*/], uCRef(Progress()), &ret2), ret2));
}

// private void OnRenderParamChanged() [instance]
void Video::OnRenderParamChanged()
{
    if (::g::Uno::Delegate::op_Inequality(RenderParamChanged1, nullptr))
        uPtr(RenderParamChanged1)->Invoke(2, this, (::g::Uno::EventArgs*)::g::Uno::EventArgs::Empty());
}

// private void OnSourceChanged() [instance]
void Video::OnSourceChanged()
{
    if (::g::Uno::Delegate::op_Inequality(SourceChanged1, nullptr))
        uPtr(SourceChanged1)->Invoke(2, this, (::g::Uno::EventArgs*)::g::Uno::EventArgs::Empty());
}

// public generated void add_ParamChanged(Uno.EventHandler value) [instance]
void Video::add_ParamChanged(uDelegate* value)
{
    ParamChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(ParamChanged1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public generated void remove_ParamChanged(Uno.EventHandler value) [instance]
void Video::remove_ParamChanged(uDelegate* value)
{
    ParamChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(ParamChanged1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public void Pause() [instance]
void Video::Pause()
{
    if (Playback() != nullptr)
        ::g::Fuse::Triggers::IPlayback::Pause(uInterface(uPtr(Playback()), ::TYPES[72/*Fuse.Triggers.IPlayback*/]));
}

// private Fuse.Triggers.IMediaPlayback get_Playback() [instance]
uObject* Video::Playback()
{
    return _playback;
}

// private void set_Playback(Fuse.Triggers.IMediaPlayback value) [instance]
void Video::Playback(uObject* value)
{
    if (_playback != nullptr)
        ::g::Fuse::Triggers::IProgress::remove_ProgressChanged(uInterface(uPtr(_playback), ::TYPES[74/*Fuse.Triggers.IProgress*/]), uDelegate::New(::TYPES[30/*Uno.UX.ValueChangedHandler<double>*/], (void*)Video__OnProgressChanged_fn, this));

    _playback = value;

    if (_playback != nullptr)
        ::g::Fuse::Triggers::IProgress::add_ProgressChanged(uInterface(uPtr(_playback), ::TYPES[74/*Fuse.Triggers.IProgress*/]), uDelegate::New(::TYPES[30/*Uno.UX.ValueChangedHandler<double>*/], (void*)Video__OnProgressChanged_fn, this));

    if (IsRootingCompleted())
        OnProgressChanged(nullptr, nullptr);
}

// public new double get_Position() [instance]
double Video::Position1()
{
    return (Playback() != nullptr) ? ::g::Fuse::Triggers::IMediaPlayback::Position(uInterface(uPtr(Playback()), ::TYPES[73/*Fuse.Triggers.IMediaPlayback*/])) : 0.0;
}

// public new void set_Position(double value) [instance]
void Video::Position1(double value)
{
    if (Playback() != nullptr)
        ::g::Fuse::Triggers::IMediaPlayback::Position(uInterface(uPtr(Playback()), ::TYPES[73/*Fuse.Triggers.IMediaPlayback*/]), value);
}

// public double get_Progress() [instance]
double Video::Progress()
{
    return (Playback() != nullptr) ? ::g::Fuse::Triggers::IPlayback::Progress(uInterface(uPtr(uAs<uObject*>(Playback(), ::TYPES[72/*Fuse.Triggers.IPlayback*/])), ::TYPES[72/*Fuse.Triggers.IPlayback*/])) : 0.0;
}

// public void set_Progress(double value) [instance]
void Video::Progress(double value)
{
    if (Playback() != nullptr)
        ::g::Fuse::Triggers::IPlayback::Progress(uInterface(uPtr(uAs<uObject*>(Playback(), ::TYPES[72/*Fuse.Triggers.IPlayback*/])), ::TYPES[72/*Fuse.Triggers.IPlayback*/]), value);
}

// public generated void add_ProgressChanged(Uno.UX.ValueChangedHandler<double> value) [instance]
void Video::add_ProgressChanged(uDelegate* value)
{
    ProgressChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(ProgressChanged1, value), ::TYPES[30/*Uno.UX.ValueChangedHandler<double>*/]);
}

// public generated void remove_ProgressChanged(Uno.UX.ValueChangedHandler<double> value) [instance]
void Video::remove_ProgressChanged(uDelegate* value)
{
    ProgressChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(ProgressChanged1, value), ::TYPES[30/*Uno.UX.ValueChangedHandler<double>*/]);
}

// public generated void add_RenderParamChanged(Uno.EventHandler value) [instance]
void Video::add_RenderParamChanged(uDelegate* value)
{
    RenderParamChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(RenderParamChanged1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public generated void remove_RenderParamChanged(Uno.EventHandler value) [instance]
void Video::remove_RenderParamChanged(uDelegate* value)
{
    RenderParamChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(RenderParamChanged1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public void Resume() [instance]
void Video::Resume()
{
    if (Playback() != nullptr)
        ::g::Fuse::Triggers::IPlayback::Resume(uInterface(uPtr(Playback()), ::TYPES[72/*Fuse.Triggers.IPlayback*/]));
}

// public float4 get_Scale9Margin() [instance]
::g::Uno::Float4 Video::Scale9Margin()
{
    return _scale9Margin;
}

// public void set_Scale9Margin(float4 value) [instance]
void Video::Scale9Margin(::g::Uno::Float4 value)
{
    if (!_hasScale9Margin || ::g::Uno::Float4__op_Inequality(_scale9Margin, value))
    {
        _scale9Margin = value;
        _hasScale9Margin = true;
        OnParamChanged();
    }
}

// public void SetPlayback(Fuse.Triggers.IMediaPlayback playback) [instance]
void Video::SetPlayback(uObject* playback)
{
    Playback(playback);
}

// public generated void add_SourceChanged(Uno.EventHandler value) [instance]
void Video::add_SourceChanged(uDelegate* value)
{
    SourceChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(SourceChanged1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public generated void remove_SourceChanged(Uno.EventHandler value) [instance]
void Video::remove_SourceChanged(uDelegate* value)
{
    SourceChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(SourceChanged1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public void Stop() [instance]
void Video::Stop()
{
    if (Playback() != nullptr)
        ::g::Fuse::Triggers::IPlayback::Stop(uInterface(uPtr(Playback()), ::TYPES[72/*Fuse.Triggers.IPlayback*/]));
}

// public Fuse.Elements.StretchDirection get_StretchDirection() [instance]
int32_t Video::StretchDirection()
{
    return _stretchDirection;
}

// public void set_StretchDirection(Fuse.Elements.StretchDirection value) [instance]
void Video::StretchDirection(int32_t value)
{
    if (_stretchDirection != value)
    {
        _stretchDirection = value;
        OnRenderParamChanged();
    }
}

// public Fuse.Elements.StretchMode get_StretchMode() [instance]
int32_t Video::StretchMode()
{
    return _stretchMode;
}

// public void set_StretchMode(Fuse.Elements.StretchMode value) [instance]
void Video::StretchMode(int32_t value)
{
    if (_stretchMode != value)
    {
        _stretchMode = value;
        OnRenderParamChanged();
    }
}

// public Fuse.Elements.StretchSizing get_StretchSizing() [instance]
int32_t Video::StretchSizing()
{
    return _stretchSizing;
}

// public void set_StretchSizing(Fuse.Elements.StretchSizing value) [instance]
void Video::StretchSizing(int32_t value)
{
    if (_stretchSizing != value)
    {
        _stretchSizing = value;
        OnRenderParamChanged();
    }
}

// private void UpdateScriptClass(double duration) [instance]
void Video::UpdateScriptClass(double duration)
{
    ::g::Uno::Threading::Monitor::Enter(_durationMutex);

    {
        try
        {
            {
                _outDuration = duration;
            }
        }

        catch (const uThrowable& __t)
        {
            {
                ::g::Uno::Threading::Monitor::Exit(_durationMutex);
            }
                        throw __t;
            goto __after_finally_10;
        }

        {
            ::g::Uno::Threading::Monitor::Exit(_durationMutex);
        }
        __after_finally_10:;
    }
}

// public string get_Url() [instance]
uString* Video::Url()
{
    return _url;
}

// public void set_Url(string value) [instance]
void Video::Url(uString* value)
{
    if (::g::Uno::String::op_Inequality(_url, value))
    {
        _url = value;
        OnSourceChanged();
    }
}

// public float get_Volume() [instance]
float Video::Volume()
{
    return _volume;
}

// public void set_Volume(float value) [instance]
void Video::Volume(float value)
{
    if (_volume != value)
    {
        _volume = value;
        OnParamChanged();
    }
}

// private static object getDuration(Fuse.Scripting.Context c, Fuse.Controls.Video v, object[] args) [static]
uObject* Video::getDuration(::g::Fuse::Scripting::Context* c, Video* v, uArray* args)
{
    Video_typeof()->Init();

    if (uPtr(args)->Length() != 0)
    {
        ::g::Fuse::Diagnostics::UserError(::g::Uno::String::op_Addition2(::g::Uno::String::op_Addition1(::STRINGS[118/*"getDuration...*/], uBox<int32_t>(::g::Uno::Int_typeof(), uPtr(args)->Length())), ::STRINGS[119/*" was supplied"*/]), v, ::STRINGS[120/*"/Users/mort...*/], 38, ::STRINGS[114/*"getDuration"*/], nullptr);
        return nullptr;
    }

    ::g::Uno::Threading::Monitor::Enter(uPtr(v)->_durationMutex);

    {
        try
        {
            {
                uObject* __uno_retval = uBox(::g::Uno::Double_typeof(), uPtr(v)->_outDuration);
                ::g::Uno::Threading::Monitor::Exit(uPtr(v)->_durationMutex);
                return __uno_retval;
            }
        }

        catch (const uThrowable& __t)
        {
            {
                ::g::Uno::Threading::Monitor::Exit(uPtr(v)->_durationMutex);
            }
                        throw __t;
            goto __after_finally_11;
        }

        {
            ::g::Uno::Threading::Monitor::Exit(uPtr(v)->_durationMutex);
        }
        __after_finally_11:;
    }
}

// private static void pause(Fuse.Controls.Video v) [static]
void Video::pause(Video* v)
{
    Video_typeof()->Init();
    uPtr(v)->Pause();
}

// private static void resume(Fuse.Controls.Video v) [static]
void Video::resume(Video* v)
{
    Video_typeof()->Init();
    uPtr(v)->Resume();
}

// private static void stop(Fuse.Controls.Video v) [static]
void Video::stop(Video* v)
{
    Video_typeof()->Init();
    uPtr(v)->Stop();
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.Panels/TreeRenderer.Android.uno
// -------------------------------------------------------------------------------------

// private sealed class TreeRenderer.ViewGroup
// {
static void TreeRenderer__ViewGroup_build(uType* type)
{
    type->SetInterfaces(
        ::g::Uno::IDisposable_typeof(), offsetof(::g::Fuse::Controls::Native::ViewHandle_type, interface0));
    type->SetFields(5,
        ::g::Fuse::Controls::Native::ViewHandle_typeof(), offsetof(TreeRenderer__ViewGroup, _content), 0);
}

::g::Fuse::Controls::Native::ViewHandle_type* TreeRenderer__ViewGroup_typeof()
{
    static uSStrong< ::g::Fuse::Controls::Native::ViewHandle_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::Native::ViewHandle_typeof();
    options.FieldCount = 6;
    options.InterfaceCount = 1;
    options.ObjectSize = sizeof(TreeRenderer__ViewGroup);
    options.TypeSize = sizeof(::g::Fuse::Controls::Native::ViewHandle_type);
    type = (::g::Fuse::Controls::Native::ViewHandle_type*)uClassType::New("Fuse.Controls.TreeRenderer.ViewGroup", options);
    type->fp_build_ = TreeRenderer__ViewGroup_build;
    type->fp_Dispose = (void(*)(::g::Fuse::Controls::Native::ViewHandle*))TreeRenderer__ViewGroup__Dispose_fn;
    type->fp_Measure = (void(*)(::g::Fuse::Controls::Native::ViewHandle*, ::g::Fuse::LayoutParams*, float*, ::g::Uno::Float2*))TreeRenderer__ViewGroup__Measure_fn;
    type->interface0.fp_Dispose = (void(*)(uObject*))TreeRenderer__ViewGroup__Dispose_fn;
    return type;
}

// public ViewGroup(Fuse.Controls.Native.ViewHandle content)
void TreeRenderer__ViewGroup__ctor_4_fn(TreeRenderer__ViewGroup* __this, ::g::Fuse::Controls::Native::ViewHandle* content)
{
    __this->ctor_4(content);
}

// public override sealed void Dispose()
void TreeRenderer__ViewGroup__Dispose_fn(TreeRenderer__ViewGroup* __this)
{
    ::g::Fuse::Controls::Native::ViewHandle__Dispose_fn(__this);
    uPtr(__this->_content)->Dispose();
    __this->_content = nullptr;
}

// public override sealed float2 Measure(Fuse.LayoutParams lp, float density)
void TreeRenderer__ViewGroup__Measure_fn(TreeRenderer__ViewGroup* __this, ::g::Fuse::LayoutParams* lp, float* density, ::g::Uno::Float2* __retval)
{
    ::g::Fuse::LayoutParams lp_ = *lp;
    float density_ = *density;
    return *__retval = uPtr(__this->_content)->Measure(lp_, density_), void();
}

// public ViewGroup New(Fuse.Controls.Native.ViewHandle content)
void TreeRenderer__ViewGroup__New5_fn(::g::Fuse::Controls::Native::ViewHandle* content, TreeRenderer__ViewGroup** __retval)
{
    *__retval = TreeRenderer__ViewGroup::New5(content);
}

// public ViewGroup(Fuse.Controls.Native.ViewHandle content) [instance]
void TreeRenderer__ViewGroup::ctor_4(::g::Fuse::Controls::Native::ViewHandle* content)
{
    ctor_(uPtr(::g::Fuse::Controls::Native::ViewFactory::InstantiateViewGroup())->NativeHandle);
    _content = content;
    InsertChild(content);
}

// public ViewGroup New(Fuse.Controls.Native.ViewHandle content) [static]
TreeRenderer__ViewGroup* TreeRenderer__ViewGroup::New5(::g::Fuse::Controls::Native::ViewHandle* content)
{
    TreeRenderer__ViewGroup* obj1 = (TreeRenderer__ViewGroup*)uNew(TreeRenderer__ViewGroup_typeof());
    obj1->ctor_4(content);
    return obj1;
}
// }

// /Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.WebView/WebView.uno
// -------------------------------------------------------------------------

// public partial sealed class WebView
// {
// static WebView()
static void WebView__cctor_4_fn(uType* __type)
{
    ::g::Fuse::Scripting::ScriptClass_typeof()->Init();
    WebView::_urlName_ = ::g::Uno::UX::Selector__op_Implicit(::STRINGS[121/*"Url"*/]);
    ::g::Fuse::Scripting::ScriptClass::Register(__type, uArray::Init< ::g::Fuse::Scripting::ScriptMember*>(::TYPES[19/*Fuse.Scripting.ScriptMember[]*/], 7, (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New1(::TYPES[75/*Fuse.Scripting.ScriptMethod<Fuse.Controls.WebView>*/], ::STRINGS[52/*"goto"*/], uDelegate::New(::TYPES[76/*Uno.Action<Fuse.Controls.WebView, object[]>*/], (void*)WebView__setUrl_fn)), (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New2(::TYPES[75/*Fuse.Scripting.ScriptMethod<Fuse.Controls.WebView>*/], ::STRINGS[122/*"goBack"*/], uDelegate::New(::TYPES[77/*Uno.Action<Fuse.Controls.WebView>*/], (void*)WebView__goBack_fn)), (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New2(::TYPES[75/*Fuse.Scripting.ScriptMethod<Fuse.Controls.WebView>*/], ::STRINGS[123/*"goForward"*/], uDelegate::New(::TYPES[77/*Uno.Action<Fuse.Controls.WebView>*/], (void*)WebView__goForward_fn)), (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New2(::TYPES[75/*Fuse.Scripting.ScriptMethod<Fuse.Controls.WebView>*/], ::STRINGS[33/*"reload"*/], uDelegate::New(::TYPES[77/*Uno.Action<Fuse.Controls.WebView>*/], (void*)WebView__reload_fn)), (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New2(::TYPES[75/*Fuse.Scripting.ScriptMethod<Fuse.Controls.WebView>*/], ::STRINGS[117/*"stop"*/], uDelegate::New(::TYPES[77/*Uno.Action<Fuse.Controls.WebView>*/], (void*)WebView__stop_fn)), (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New1(::TYPES[75/*Fuse.Scripting.ScriptMethod<Fuse.Controls.WebView>*/], ::STRINGS[124/*"loadHtml"*/], uDelegate::New(::TYPES[76/*Uno.Action<Fuse.Controls.WebView, object[]>*/], (void*)WebView__loadHtml_fn)), (::g::Fuse::Scripting::ScriptMethod1*)::g::Fuse::Scripting::ScriptMethod1::New1(::TYPES[75/*Fuse.Scripting.ScriptMethod<Fuse.Controls.WebView>*/], ::STRINGS[125/*"setBaseUrl"*/], uDelegate::New(::TYPES[76/*Uno.Action<Fuse.Controls.WebView, object[]>*/], (void*)WebView__setBaseUrl_fn))));
}

static void WebView_build(uType* type)
{
    ::STRINGS[121] = uString::Const("Url");
    ::STRINGS[52] = uString::Const("goto");
    ::STRINGS[122] = uString::Const("goBack");
    ::STRINGS[123] = uString::Const("goForward");
    ::STRINGS[33] = uString::Const("reload");
    ::STRINGS[117] = uString::Const("stop");
    ::STRINGS[124] = uString::Const("loadHtml");
    ::STRINGS[125] = uString::Const("setBaseUrl");
    ::STRINGS[5] = uString::Const("");
    ::STRINGS[126] = uString::Const("WebView.loadHtml takes either one url argument, or an url and a baseUrl argument");
    ::STRINGS[127] = uString::Const("/Users/morten/fuse-open/fuselibs/Source/Fuse.Controls.WebView/WebView.ScriptClass.uno");
    ::STRINGS[128] = uString::Const("about:blank");
    ::STRINGS[129] = uString::Const(":");
    ::STRINGS[130] = uString::Const("WebView.setBaseUrl requires 1 string argument");
    ::STRINGS[131] = uString::Const("WebView.setUrl requires 1 string argument");
    ::STRINGS[132] = uString::Const("setUrl");
    ::STRINGS[133] = uString::Const("ScrollEnabled cannot be changed once rooted");
    ::STRINGS[134] = uString::Const("ZoomEnabled cannot be changed once rooted");
    ::TYPES[18] = ::g::Uno::Type_typeof();
    ::TYPES[19] = ::g::Fuse::Scripting::ScriptMember_typeof()->Array();
    ::TYPES[75] = ::g::Fuse::Scripting::ScriptMethod1_typeof()->MakeType(type, nullptr);
    ::TYPES[76] = ::g::Uno::Action2_typeof()->MakeType(type, uObject_typeof()->Array(), nullptr);
    ::TYPES[77] = ::g::Uno::Action1_typeof()->MakeType(type, nullptr);
    ::TYPES[78] = ::g::Fuse::Controls::FallbackWebViewClient_typeof();
    ::TYPES[79] = ::g::Uno::String_typeof()->Array();
    ::TYPES[38] = ::g::Fuse::Controls::IWebView_typeof();
    ::TYPES[80] = ::g::Fuse::Navigation::IBaseNavigation_typeof();
    ::TYPES[81] = ::g::Uno::String_typeof();
    ::TYPES[70] = ::g::Uno::UX::ValueChangedArgs_typeof()->MakeType(::g::Uno::Double_typeof(), nullptr);
    ::TYPES[74] = ::g::Fuse::Triggers::IProgress_typeof();
    ::TYPES[82] = ::g::Fuse::Controls::ISourceReceiver_typeof();
    ::TYPES[30] = ::g::Uno::UX::ValueChangedHandler_typeof()->MakeType(::g::Uno::Double_typeof(), nullptr);
    ::TYPES[29] = ::g::Uno::EventHandler_typeof();
    ::TYPES[83] = ::g::Fuse::Navigation::HistoryChangedHandler_typeof();
    type->SetDependencies(
        ::g::Uno::EventArgs_typeof());
    type->SetInterfaces(
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(WebView_type, interface0),
        ::g::Fuse::Scripting::IScriptObject_typeof(), offsetof(WebView_type, interface1),
        ::g::Fuse::IProperties_typeof(), offsetof(WebView_type, interface2),
        ::g::Fuse::INotifyUnrooted_typeof(), offsetof(WebView_type, interface3),
        ::g::Fuse::ISourceLocation_typeof(), offsetof(WebView_type, interface4),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(WebView_type, interface5),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Binding_typeof(), nullptr), offsetof(WebView_type, interface6),
        ::g::Uno::Collections::IList_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(WebView_type, interface7),
        ::g::Uno::UX::IPropertyListener_typeof(), offsetof(WebView_type, interface8),
        ::g::Fuse::ITemplateSource_typeof(), offsetof(WebView_type, interface9),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Visual_typeof(), nullptr), offsetof(WebView_type, interface10),
        ::g::Uno::Collections::ICollection_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(WebView_type, interface11),
        ::g::Uno::Collections::IEnumerable_typeof()->MakeType(::g::Fuse::Node_typeof(), nullptr), offsetof(WebView_type, interface12),
        ::g::Fuse::Triggers::Actions::IShow_typeof(), offsetof(WebView_type, interface13),
        ::g::Fuse::Triggers::Actions::IHide_typeof(), offsetof(WebView_type, interface14),
        ::g::Fuse::Triggers::Actions::ICollapse_typeof(), offsetof(WebView_type, interface15),
        ::g::Fuse::IActualPlacement_typeof(), offsetof(WebView_type, interface16),
        ::g::Fuse::Animations::IResize_typeof(), offsetof(WebView_type, interface17),
        ::g::Fuse::Drawing::ISurfaceDrawable_typeof(), offsetof(WebView_type, interface18),
        ::TYPES[38/*Fuse.Controls.IWebView*/], offsetof(WebView_type, interface19),
        ::TYPES[74/*Fuse.Triggers.IProgress*/], offsetof(WebView_type, interface20),
        ::TYPES[80/*Fuse.Navigation.IBaseNavigation*/], offsetof(WebView_type, interface21),
        ::TYPES[82/*Fuse.Controls.ISourceReceiver*/], offsetof(WebView_type, interface22));
    type->SetFields(115,
        ::TYPES[38/*Fuse.Controls.IWebView*/], offsetof(WebView, _fallbackClient), 0,
        ::TYPES[38/*Fuse.Controls.IWebView*/], offsetof(WebView, _webViewClient), 0,
        ::TYPES[29/*Uno.EventHandler*/], offsetof(WebView, BeginDownload1), 0,
        ::TYPES[29/*Uno.EventHandler*/], offsetof(WebView, BeginLoading1), 0,
        ::TYPES[29/*Uno.EventHandler*/], offsetof(WebView, FileDownloaded1), 0,
        ::TYPES[83/*Fuse.Navigation.HistoryChangedHandler*/], offsetof(WebView, HistoryChanged1), 0,
        ::TYPES[29/*Uno.EventHandler*/], offsetof(WebView, PageLoaded1), 0,
        ::TYPES[30/*Uno.UX.ValueChangedHandler<double>*/], offsetof(WebView, ProgressChanged1), 0,
        ::TYPES[29/*Uno.EventHandler*/], offsetof(WebView, URISchemeHandler1), 0,
        ::TYPES[29/*Uno.EventHandler*/], offsetof(WebView, UrlChanged1), 0,
        ::g::Uno::UX::Selector_typeof(), (uintptr_t)&WebView::_urlName_, uFieldFlagsStatic);
}

WebView_type* WebView_typeof()
{
    static uSStrong<WebView_type*> type;
    if (type != nullptr) return type;

    uTypeOptions options;
    options.BaseDefinition = ::g::Fuse::Controls::Panel_typeof();
    options.FieldCount = 126;
    options.InterfaceCount = 23;
    options.DependencyCount = 1;
    options.ObjectSize = sizeof(WebView);
    options.TypeSize = sizeof(WebView_type);
    type = (WebView_type*)uClassType::New("Fuse.Controls.WebView", options);
    type->fp_build_ = WebView_build;
    type->fp_ctor_ = (void*)WebView__New4_fn;
    type->fp_cctor_ = WebView__cctor_4_fn;
    type->fp_CreateNativeView = (void(*)(::g::Fuse::Controls::Control*, uObject**))WebView__CreateNativeView_fn;
    type->fp_OnRooted = (void(*)(::g::Fuse::Node*))WebView__OnRooted_fn;
    type->fp_OnUnrooted = (void(*)(::g::Fuse::Node*))WebView__OnUnrooted_fn;
    type->interface19.fp_Eval1 = (void(*)(uObject*, uString*, uDelegate*))WebView__Eval1_fn;
    type->interface19.fp_Eval = (void(*)(uObject*, uString*))WebView__Eval_fn;
    type->interface19.fp_LoadHtml = (void(*)(uObject*, uString*))WebView__LoadHtml_fn;
    type->interface19.fp_LoadHtml1 = (void(*)(uObject*, uString*, uString*))WebView__LoadHtml1_fn;
    type->interface19.fp_LoadUrl = (void(*)(uObject*, uString*))WebView__LoadUrl_fn;
    type->interface19.fp_Stop = (void(*)(uObject*))WebView__Stop_fn;
    type->interface19.fp_Reload = (void(*)(uObject*))WebView__Reload_fn;
    type->interface19.fp_get_BaseUrl = (void(*)(uObject*, uString**))WebView__get_BaseUrl_fn;
    type->interface19.fp_set_BaseUrl = (void(*)(uObject*, uString*))WebView__set_BaseUrl_fn;
    type->interface19.fp_get_Url = (void(*)(uObject*, uString**))WebView__get_Url_fn;
    type->interface19.fp_set_Url = (void(*)(uObject*, uString*))WebView__set_Url_fn;
    type->interface19.fp_get_File = (void(*)(uObject*, ::g::Uno::UX::FileSource**))WebView__get_File_fn;
    type->interface19.fp_set_File = (void(*)(uObject*, ::g::Uno::UX::FileSource*))WebView__set_File_fn;
    type->interface19.fp_get_ZoomEnabled = (void(*)(uObject*, bool*))WebView__get_ZoomEnabled_fn;
    type->interface19.fp_set_ZoomEnabled = (void(*)(uObject*, bool*))WebView__set_ZoomEnabled_fn;
    type->interface19.fp_get_ScrollEnabled = (void(*)(uObject*, bool*))WebView__get_ScrollEnabled_fn;
    type->interface19.fp_set_ScrollEnabled = (void(*)(uObject*, bool*))WebView__set_ScrollEnabled_fn;
    type->interface19.fp_add_PageLoaded = (void(*)(uObject*, uDelegate*))WebView__add_PageLoaded_fn;
    type->interface19.fp_remove_PageLoaded = (void(*)(uObject*, uDelegate*))WebView__remove_PageLoaded_fn;
    type->interface19.fp_add_BeginLoading = (void(*)(uObject*, uDelegate*))WebView__add_BeginLoading_fn;
    type->interface19.fp_remove_BeginLoading = (void(*)(uObject*, uDelegate*))WebView__remove_BeginLoading_fn;
    type->interface19.fp_add_UrlChanged = (void(*)(uObject*, uDelegate*))WebView__add_UrlChanged_fn;
    type->interface19.fp_remove_UrlChanged = (void(*)(uObject*, uDelegate*))WebView__remove_UrlChanged_fn;
    type->interface19.fp_add_URISchemeHandler = (void(*)(uObject*, uDelegate*))WebView__add_URISchemeHandler_fn;
    type->interface19.fp_remove_URISchemeHandler = (void(*)(uObject*, uDelegate*))WebView__remove_URISchemeHandler_fn;
    type->interface19.fp_add_BeginDownload = (void(*)(uObject*, uDelegate*))WebView__add_BeginDownload_fn;
    type->interface19.fp_remove_BeginDownload = (void(*)(uObject*, uDelegate*))WebView__remove_BeginDownload_fn;
    type->interface19.fp_add_FileDownloaded = (void(*)(uObject*, uDelegate*))WebView__add_FileDownloaded_fn;
    type->interface19.fp_remove_FileDownloaded = (void(*)(uObject*, uDelegate*))WebView__remove_FileDownloaded_fn;
    type->interface20.fp_get_Progress = (void(*)(uObject*, double*))WebView__get_Progress_fn;
    type->interface20.fp_add_ProgressChanged = (void(*)(uObject*, uDelegate*))WebView__add_ProgressChanged_fn;
    type->interface20.fp_remove_ProgressChanged = (void(*)(uObject*, uDelegate*))WebView__remove_ProgressChanged_fn;
    type->interface21.fp_GoForward = (void(*)(uObject*))WebView__GoForward_fn;
    type->interface21.fp_GoBack = (void(*)(uObject*))WebView__GoBack_fn;
    type->interface21.fp_get_CanGoBack = (void(*)(uObject*, bool*))WebView__get_CanGoBack_fn;
    type->interface21.fp_get_CanGoForward = (void(*)(uObject*, bool*))WebView__get_CanGoForward_fn;
    type->interface22.fp_get_Source = (void(*)(uObject*, uString**))WebView__get_Source_fn;
    type->interface22.fp_set_Source = (void(*)(uObject*, uString*))WebView__set_Source_fn;
    type->interface18.fp_Draw = (void(*)(uObject*, ::g::Fuse::Drawing::Surface*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableDraw_fn;
    type->interface18.fp_get_IsPrimary = (void(*)(uObject*, bool*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_IsPrimary_fn;
    type->interface18.fp_get_ElementSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Controls::Panel__FuseDrawingISurfaceDrawableget_ElementSize_fn;
    type->interface13.fp_Show = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIShowShow_fn;
    type->interface15.fp_Collapse = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsICollapseCollapse_fn;
    type->interface14.fp_Hide = (void(*)(uObject*))::g::Fuse::Elements::Element__FuseTriggersActionsIHideHide_fn;
    type->interface17.fp_SetSize = (void(*)(uObject*, ::g::Uno::Float2*))::g::Fuse::Elements::Element__FuseAnimationsIResizeSetSize_fn;
    type->interface16.fp_get_ActualSize = (void(*)(uObject*, ::g::Uno::Float3*))::g::Fuse::Elements::Element__FuseIActualPlacementget_ActualSize_fn;
    type->interface16.fp_add_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__add_Placed_fn;
    type->interface16.fp_remove_Placed = (void(*)(uObject*, uDelegate*))::g::Fuse::Elements::Element__remove_Placed_fn;
    type->interface10.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseVisualGetEnumerator_fn;
    type->interface11.fp_Clear = (void(*)(uObject*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeClear_fn;
    type->interface11.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeContains_fn;
    type->interface7.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsIListFuseNodeRemoveAt_fn;
    type->interface12.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Visual__UnoCollectionsIEnumerableFuseNodeGetEnumerator_fn;
    type->interface11.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Visual__UnoCollectionsICollectionFuseNodeget_Count_fn;
    type->interface7.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Visual__UnoCollectionsIListFuseNodeget_Item_fn;
    type->interface7.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Visual__Insert1_fn;
    type->interface8.fp_OnPropertyChanged = (void(*)(uObject*, ::g::Uno::UX::PropertyObject*, ::g::Uno::UX::Selector*))::g::Fuse::Controls::Control__OnPropertyChanged2_fn;
    type->interface9.fp_FindTemplate = (void(*)(uObject*, uString*, ::g::Uno::UX::Template**))::g::Fuse::Visual__FindTemplate_fn;
    type->interface11.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Visual__Add1_fn;
    type->interface11.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Visual__Remove1_fn;
    type->interface1.fp_SetScriptObject = (void(*)(uObject*, uObject*, ::g::Fuse::Scripting::Context*))::g::Fuse::Node__FuseScriptingIScriptObjectSetScriptObject_fn;
    type->interface5.fp_Clear = (void(*)(uObject*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingClear_fn;
    type->interface5.fp_Contains = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingContains_fn;
    type->interface0.fp_RemoveAt = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsIListFuseBindingRemoveAt_fn;
    type->interface6.fp_GetEnumerator = (void(*)(uObject*, uObject**))::g::Fuse::Node__UnoCollectionsIEnumerableFuseBindingGetEnumerator_fn;
    type->interface1.fp_get_ScriptObject = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptObject_fn;
    type->interface1.fp_get_ScriptContext = (void(*)(uObject*, ::g::Fuse::Scripting::Context**))::g::Fuse::Node__FuseScriptingIScriptObjectget_ScriptContext_fn;
    type->interface4.fp_get_SourceNearest = (void(*)(uObject*, uObject**))::g::Fuse::Node__FuseISourceLocationget_SourceNearest_fn;
    type->interface5.fp_get_Count = (void(*)(uObject*, int32_t*))::g::Fuse::Node__UnoCollectionsICollectionFuseBindingget_Count_fn;
    type->interface0.fp_get_Item = (void(*)(uObject*, int32_t*, uTRef))::g::Fuse::Node__UnoCollectionsIListFuseBindingget_Item_fn;
    type->interface3.fp_add_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedadd_Unrooted_fn;
    type->interface3.fp_remove_Unrooted = (void(*)(uObject*, uDelegate*))::g::Fuse::Node__FuseINotifyUnrootedremove_Unrooted_fn;
    type->interface0.fp_Insert = (void(*)(uObject*, int32_t*, void*))::g::Fuse::Node__Insert_fn;
    type->interface2.fp_get_Properties = (void(*)(uObject*, ::g::Fuse::Properties**))::g::Fuse::Node__get_Properties_fn;
    type->interface4.fp_get_SourceLineNumber = (void(*)(uObject*, int32_t*))::g::Fuse::Node__get_SourceLineNumber_fn;
    type->interface4.fp_get_SourceFileName = (void(*)(uObject*, uString**))::g::Fuse::Node__get_SourceFileName_fn;
    type->interface5.fp_Add = (void(*)(uObject*, void*))::g::Fuse::Node__Add_fn;
    type->interface5.fp_Remove = (void(*)(uObject*, void*, bool*))::g::Fuse::Node__Remove_fn;
    return type;
}

// public WebView()
void WebView__ctor_7_fn(WebView* __this)
{
    __this->ctor_7();
}

// private void applyFallbackCalls(Fuse.Controls.IWebView client)
void WebView__applyFallbackCalls_fn(WebView* __this, uObject* client)
{
    __this->applyFallbackCalls(client);
}

// public string get_BaseUrl()
void WebView__get_BaseUrl_fn(WebView* __this, uString** __retval)
{
    *__retval = __this->BaseUrl();
}

// public void set_BaseUrl(string value)
void WebView__set_BaseUrl_fn(WebView* __this, uString* value)
{
    __this->BaseUrl(value);
}

// public generated void add_BeginDownload(Uno.EventHandler value)
void WebView__add_BeginDownload_fn(WebView* __this, uDelegate* value)
{
    __this->add_BeginDownload(value);
}

// public generated void remove_BeginDownload(Uno.EventHandler value)
void WebView__remove_BeginDownload_fn(WebView* __this, uDelegate* value)
{
    __this->remove_BeginDownload(value);
}

// public generated void add_BeginLoading(Uno.EventHandler value)
void WebView__add_BeginLoading_fn(WebView* __this, uDelegate* value)
{
    __this->add_BeginLoading(value);
}

// public generated void remove_BeginLoading(Uno.EventHandler value)
void WebView__remove_BeginLoading_fn(WebView* __this, uDelegate* value)
{
    __this->remove_BeginLoading(value);
}

// public bool get_CanGoBack()
void WebView__get_CanGoBack_fn(WebView* __this, bool* __retval)
{
    *__retval = __this->CanGoBack();
}

// public bool get_CanGoForward()
void WebView__get_CanGoForward_fn(WebView* __this, bool* __retval)
{
    *__retval = __this->CanGoForward();
}

// protected override sealed Fuse.Controls.Native.IView CreateNativeView()
void WebView__CreateNativeView_fn(WebView* __this, uObject** __retval)
{
    uObject* ret4;
    uString* scheme = ::STRINGS[5/*""*/];
    scheme = WebView::PreprocUriScheme(scheme);
    uArray* schemes = ::g::Uno::String::op_Inequality(scheme, ::STRINGS[5/*""*/]) ? uArray::Init<uString*>(::TYPES[79/*string[]*/], 1, scheme) : uArray::Init<uString*>(::TYPES[79/*string[]*/], 0);
    return *__retval = (uObject*)::g::Fuse::Android::Controls::WebView::Create(__this, schemes), void();
    return *__retval = (::g::Fuse::Controls::Control__CreateNativeView_fn(__this, &ret4), ret4), void();
}

// public void Eval(string js)
void WebView__Eval_fn(WebView* __this, uString* js)
{
    __this->Eval(js);
}

// public void Eval(string js, Uno.Action<string> resultHandler)
void WebView__Eval1_fn(WebView* __this, uString* js, uDelegate* resultHandler)
{
    __this->Eval1(js, resultHandler);
}

// public Uno.UX.FileSource get_File()
void WebView__get_File_fn(WebView* __this, ::g::Uno::UX::FileSource** __retval)
{
    *__retval = __this->File();
}

// public void set_File(Uno.UX.FileSource value)
void WebView__set_File_fn(WebView* __this, ::g::Uno::UX::FileSource* value)
{
    __this->File(value);
}

// public generated void add_FileDownloaded(Uno.EventHandler value)
void WebView__add_FileDownloaded_fn(WebView* __this, uDelegate* value)
{
    __this->add_FileDownloaded(value);
}

// public generated void remove_FileDownloaded(Uno.EventHandler value)
void WebView__remove_FileDownloaded_fn(WebView* __this, uDelegate* value)
{
    __this->remove_FileDownloaded(value);
}

// private static void goBack(Fuse.Controls.WebView view)
void WebView__goBack_fn(WebView* view)
{
    WebView::goBack(view);
}

// public void GoBack()
void WebView__GoBack_fn(WebView* __this)
{
    __this->GoBack();
}

// private static void goForward(Fuse.Controls.WebView view)
void WebView__goForward_fn(WebView* view)
{
    WebView::goForward(view);
}

// public void GoForward()
void WebView__GoForward_fn(WebView* __this)
{
    __this->GoForward();
}

// public generated void add_HistoryChanged(Fuse.Navigation.HistoryChangedHandler value)
void WebView__add_HistoryChanged_fn(WebView* __this, uDelegate* value)
{
    __this->add_HistoryChanged(value);
}

// public generated void remove_HistoryChanged(Fuse.Navigation.HistoryChangedHandler value)
void WebView__remove_HistoryChanged_fn(WebView* __this, uDelegate* value)
{
    __this->remove_HistoryChanged(value);
}

// private static void loadHtml(Fuse.Controls.WebView view, object[] args)
void WebView__loadHtml_fn(WebView* view, uArray* args)
{
    WebView::loadHtml(view, args);
}

// public void LoadHtml(string html)
void WebView__LoadHtml_fn(WebView* __this, uString* html)
{
    __this->LoadHtml(html);
}

// public void LoadHtml(string html, string baseUrl)
void WebView__LoadHtml1_fn(WebView* __this, uString* html, uString* baseUrl)
{
    __this->LoadHtml1(html, baseUrl);
}

// public void LoadUrl(string url)
void WebView__LoadUrl_fn(WebView* __this, uString* url)
{
    __this->LoadUrl(url);
}

// public WebView New()
void WebView__New4_fn(WebView** __retval)
{
    *__retval = WebView::New4();
}

// private void OnBeginLoading(object sender, Uno.EventArgs args)
void WebView__OnBeginLoading_fn(WebView* __this, uObject* sender, ::g::Uno::EventArgs* args)
{
    __this->OnBeginLoading(sender, args);
}

// protected void OnHistoryChanged()
void WebView__OnHistoryChanged_fn(WebView* __this)
{
    __this->OnHistoryChanged();
}

// private void OnPageChanged(object sender, Uno.EventArgs args)
void WebView__OnPageChanged_fn(WebView* __this, uObject* sender, ::g::Uno::EventArgs* args)
{
    __this->OnPageChanged(sender, args);
}

// private void OnPageLoaded(object sender, Uno.EventArgs args)
void WebView__OnPageLoaded_fn(WebView* __this, uObject* sender, ::g::Uno::EventArgs* args)
{
    __this->OnPageLoaded(sender, args);
}

// private void OnProgressChanged(object sender, Uno.EventArgs args)
void WebView__OnProgressChanged_fn(WebView* __this, uObject* sender, ::g::Uno::EventArgs* args)
{
    __this->OnProgressChanged(sender, args);
}

// protected override sealed void OnRooted()
void WebView__OnRooted_fn(WebView* __this)
{
    ::g::Fuse::Controls::Panel__OnRooted_fn(__this);
}

// protected override sealed void OnUnrooted()
void WebView__OnUnrooted_fn(WebView* __this)
{
    ::g::Fuse::Controls::Panel__OnUnrooted_fn(__this);
}

// public generated void add_PageLoaded(Uno.EventHandler value)
void WebView__add_PageLoaded_fn(WebView* __this, uDelegate* value)
{
    __this->add_PageLoaded(value);
}

// public generated void remove_PageLoaded(Uno.EventHandler value)
void WebView__remove_PageLoaded_fn(WebView* __this, uDelegate* value)
{
    __this->remove_PageLoaded(value);
}

// private static string PreprocUriScheme(string inScheme)
void WebView__PreprocUriScheme_fn(uString* inScheme, uString** __retval)
{
    *__retval = WebView::PreprocUriScheme(inScheme);
}

// public double get_Progress()
void WebView__get_Progress_fn(WebView* __this, double* __retval)
{
    *__retval = __this->Progress();
}

// public generated void add_ProgressChanged(Uno.UX.ValueChangedHandler<double> value)
void WebView__add_ProgressChanged_fn(WebView* __this, uDelegate* value)
{
    __this->add_ProgressChanged(value);
}

// public generated void remove_ProgressChanged(Uno.UX.ValueChangedHandler<double> value)
void WebView__remove_ProgressChanged_fn(WebView* __this, uDelegate* value)
{
    __this->remove_ProgressChanged(value);
}

// private static void reload(Fuse.Controls.WebView view)
void WebView__reload_fn(WebView* view)
{
    WebView::reload(view);
}

// public void Reload()
void WebView__Reload_fn(WebView* __this)
{
    __this->Reload();
}

// public bool get_ScrollEnabled()
void WebView__get_ScrollEnabled_fn(WebView* __this, bool* __retval)
{
    *__retval = __this->ScrollEnabled();
}

// public void set_ScrollEnabled(bool value)
void WebView__set_ScrollEnabled_fn(WebView* __this, bool* value)
{
    __this->ScrollEnabled(*value);
}

// private static void setBaseUrl(Fuse.Controls.WebView view, object[] args)
void WebView__setBaseUrl_fn(WebView* view, uArray* args)
{
    WebView::setBaseUrl(view, args);
}

// private static void setUrl(Fuse.Controls.WebView view, object[] args)
void WebView__setUrl_fn(WebView* view, uArray* args)
{
    WebView::setUrl(view, args);
}

// public void SetUrl(string value, Uno.UX.IPropertyListener origin)
void WebView__SetUrl_fn(WebView* __this, uString* value, uObject* origin)
{
    __this->SetUrl(value, origin);
}

// public string get_Source()
void WebView__get_Source_fn(WebView* __this, uString** __retval)
{
    *__retval = __this->Source();
}

// public void set_Source(string value)
void WebView__set_Source_fn(WebView* __this, uString* value)
{
    __this->Source(value);
}

// private static void stop(Fuse.Controls.WebView view)
void WebView__stop_fn(WebView* view)
{
    WebView::stop(view);
}

// public void Stop()
void WebView__Stop_fn(WebView* __this)
{
    __this->Stop();
}

// internal void UpdateRestState()
void WebView__UpdateRestState_fn(WebView* __this)
{
    __this->UpdateRestState();
}

// public generated void add_URISchemeHandler(Uno.EventHandler value)
void WebView__add_URISchemeHandler_fn(WebView* __this, uDelegate* value)
{
    __this->add_URISchemeHandler(value);
}

// public generated void remove_URISchemeHandler(Uno.EventHandler value)
void WebView__remove_URISchemeHandler_fn(WebView* __this, uDelegate* value)
{
    __this->remove_URISchemeHandler(value);
}

// public string get_Url()
void WebView__get_Url_fn(WebView* __this, uString** __retval)
{
    *__retval = __this->Url();
}

// public void set_Url(string value)
void WebView__set_Url_fn(WebView* __this, uString* value)
{
    __this->Url(value);
}

// public generated void add_UrlChanged(Uno.EventHandler value)
void WebView__add_UrlChanged_fn(WebView* __this, uDelegate* value)
{
    __this->add_UrlChanged(value);
}

// public generated void remove_UrlChanged(Uno.EventHandler value)
void WebView__remove_UrlChanged_fn(WebView* __this, uDelegate* value)
{
    __this->remove_UrlChanged(value);
}

// public Fuse.Controls.IWebView get_WebViewClient()
void WebView__get_WebViewClient_fn(WebView* __this, uObject** __retval)
{
    *__retval = __this->WebViewClient();
}

// public void set_WebViewClient(Fuse.Controls.IWebView value)
void WebView__set_WebViewClient_fn(WebView* __this, uObject* value)
{
    __this->WebViewClient(value);
}

// public bool get_ZoomEnabled()
void WebView__get_ZoomEnabled_fn(WebView* __this, bool* __retval)
{
    *__retval = __this->ZoomEnabled();
}

// public void set_ZoomEnabled(bool value)
void WebView__set_ZoomEnabled_fn(WebView* __this, bool* value)
{
    __this->ZoomEnabled(*value);
}

::g::Uno::UX::Selector WebView::_urlName_;

// public WebView() [instance]
void WebView::ctor_7()
{
    _fallbackClient = (uObject*)::g::Fuse::Controls::FallbackWebViewClient::New1();
    ctor_6();
    ClipToBounds(true);
    WebViewClient(_fallbackClient);
}

// private void applyFallbackCalls(Fuse.Controls.IWebView client) [instance]
void WebView::applyFallbackCalls(uObject* client)
{
    ::g::Fuse::Controls::FallbackWebViewClient* fbc = uAs< ::g::Fuse::Controls::FallbackWebViewClient*>(_fallbackClient, ::TYPES[78/*Fuse.Controls.FallbackWebViewClient*/]);
    uPtr(fbc)->ApplyBufferedCalls(client);
}

// public string get_BaseUrl() [instance]
uString* WebView::BaseUrl()
{
    return ::g::Fuse::Controls::IWebView::BaseUrl(uInterface(uPtr(WebViewClient()), ::TYPES[38/*Fuse.Controls.IWebView*/]));
}

// public void set_BaseUrl(string value) [instance]
void WebView::BaseUrl(uString* value)
{
    ::g::Fuse::Controls::IWebView::BaseUrl(uInterface(uPtr(WebViewClient()), ::TYPES[38/*Fuse.Controls.IWebView*/]), (value != nullptr) ? value : ::STRINGS[5/*""*/]);
}

// public generated void add_BeginDownload(Uno.EventHandler value) [instance]
void WebView::add_BeginDownload(uDelegate* value)
{
    BeginDownload1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(BeginDownload1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public generated void remove_BeginDownload(Uno.EventHandler value) [instance]
void WebView::remove_BeginDownload(uDelegate* value)
{
    BeginDownload1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(BeginDownload1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public generated void add_BeginLoading(Uno.EventHandler value) [instance]
void WebView::add_BeginLoading(uDelegate* value)
{
    BeginLoading1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(BeginLoading1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public generated void remove_BeginLoading(Uno.EventHandler value) [instance]
void WebView::remove_BeginLoading(uDelegate* value)
{
    BeginLoading1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(BeginLoading1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public bool get_CanGoBack() [instance]
bool WebView::CanGoBack()
{
    return ::g::Fuse::Navigation::IBaseNavigation::CanGoBack(uInterface(uPtr(WebViewClient()), ::TYPES[80/*Fuse.Navigation.IBaseNavigation*/]));
}

// public bool get_CanGoForward() [instance]
bool WebView::CanGoForward()
{
    return ::g::Fuse::Navigation::IBaseNavigation::CanGoForward(uInterface(uPtr(WebViewClient()), ::TYPES[80/*Fuse.Navigation.IBaseNavigation*/]));
}

// public void Eval(string js) [instance]
void WebView::Eval(uString* js)
{
    ::g::Fuse::Controls::IWebView::Eval(uInterface(uPtr(WebViewClient()), ::TYPES[38/*Fuse.Controls.IWebView*/]), (js != nullptr) ? js : ::STRINGS[5/*""*/]);
}

// public void Eval(string js, Uno.Action<string> resultHandler) [instance]
void WebView::Eval1(uString* js, uDelegate* resultHandler)
{
    ::g::Fuse::Controls::IWebView::Eval1(uInterface(uPtr(WebViewClient()), ::TYPES[38/*Fuse.Controls.IWebView*/]), (js != nullptr) ? js : ::STRINGS[5/*""*/], resultHandler);
}

// public Uno.UX.FileSource get_File() [instance]
::g::Uno::UX::FileSource* WebView::File()
{
    return ::g::Fuse::Controls::IWebView::File(uInterface(uPtr(WebViewClient()), ::TYPES[38/*Fuse.Controls.IWebView*/]));
}

// public void set_File(Uno.UX.FileSource value) [instance]
void WebView::File(::g::Uno::UX::FileSource* value)
{
    ::g::Fuse::Controls::IWebView::File(uInterface(uPtr(WebViewClient()), ::TYPES[38/*Fuse.Controls.IWebView*/]), value);
}

// public generated void add_FileDownloaded(Uno.EventHandler value) [instance]
void WebView::add_FileDownloaded(uDelegate* value)
{
    FileDownloaded1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(FileDownloaded1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public generated void remove_FileDownloaded(Uno.EventHandler value) [instance]
void WebView::remove_FileDownloaded(uDelegate* value)
{
    FileDownloaded1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(FileDownloaded1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public void GoBack() [instance]
void WebView::GoBack()
{
    ::g::Fuse::Navigation::IBaseNavigation::GoBack(uInterface(uPtr(WebViewClient()), ::TYPES[80/*Fuse.Navigation.IBaseNavigation*/]));
}

// public void GoForward() [instance]
void WebView::GoForward()
{
    ::g::Fuse::Navigation::IBaseNavigation::GoForward(uInterface(uPtr(WebViewClient()), ::TYPES[80/*Fuse.Navigation.IBaseNavigation*/]));
}

// public generated void add_HistoryChanged(Fuse.Navigation.HistoryChangedHandler value) [instance]
void WebView::add_HistoryChanged(uDelegate* value)
{
    HistoryChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(HistoryChanged1, value), ::TYPES[83/*Fuse.Navigation.HistoryChangedHandler*/]);
}

// public generated void remove_HistoryChanged(Fuse.Navigation.HistoryChangedHandler value) [instance]
void WebView::remove_HistoryChanged(uDelegate* value)
{
    HistoryChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(HistoryChanged1, value), ::TYPES[83/*Fuse.Navigation.HistoryChangedHandler*/]);
}

// public void LoadHtml(string html) [instance]
void WebView::LoadHtml(uString* html)
{
    ::g::Fuse::Controls::IWebView::LoadHtml(uInterface(uPtr(WebViewClient()), ::TYPES[38/*Fuse.Controls.IWebView*/]), (html != nullptr) ? html : ::STRINGS[5/*""*/]);
}

// public void LoadHtml(string html, string baseUrl) [instance]
void WebView::LoadHtml1(uString* html, uString* baseUrl)
{
    ::g::Fuse::Controls::IWebView::LoadHtml1(uInterface(uPtr(WebViewClient()), ::TYPES[38/*Fuse.Controls.IWebView*/]), (html != nullptr) ? html : ::STRINGS[5/*""*/], baseUrl);
}

// public void LoadUrl(string url) [instance]
void WebView::LoadUrl(uString* url)
{
    ::g::Fuse::Controls::IWebView::LoadUrl(uInterface(uPtr(WebViewClient()), ::TYPES[38/*Fuse.Controls.IWebView*/]), (url != nullptr) ? url : ::STRINGS[128/*"about:blank"*/]);
}

// private void OnBeginLoading(object sender, Uno.EventArgs args) [instance]
void WebView::OnBeginLoading(uObject* sender, ::g::Uno::EventArgs* args)
{
    if (::g::Uno::Delegate::op_Inequality(BeginLoading1, nullptr))
        uPtr(BeginLoading1)->Invoke(2, this, (::g::Uno::EventArgs*)::g::Uno::EventArgs::Empty());
}

// protected void OnHistoryChanged() [instance]
void WebView::OnHistoryChanged()
{
    if (::g::Uno::Delegate::op_Inequality(HistoryChanged1, nullptr))
        uPtr(HistoryChanged1)->InvokeVoid(this);
}

// private void OnPageChanged(object sender, Uno.EventArgs args) [instance]
void WebView::OnPageChanged(uObject* sender, ::g::Uno::EventArgs* args)
{
    UpdateRestState();

    if (::g::Uno::Delegate::op_Inequality(UrlChanged1, nullptr))
        uPtr(UrlChanged1)->Invoke(2, this, (::g::Uno::EventArgs*)::g::Uno::EventArgs::Empty());
}

// private void OnPageLoaded(object sender, Uno.EventArgs args) [instance]
void WebView::OnPageLoaded(uObject* sender, ::g::Uno::EventArgs* args)
{
    if (::g::Uno::Delegate::op_Inequality(PageLoaded1, nullptr))
        uPtr(PageLoaded1)->Invoke(2, this, (::g::Uno::EventArgs*)::g::Uno::EventArgs::Empty());
}

// private void OnProgressChanged(object sender, Uno.EventArgs args) [instance]
void WebView::OnProgressChanged(uObject* sender, ::g::Uno::EventArgs* args)
{
    ::g::Uno::UX::ValueChangedArgs* ret5;

    if (::g::Uno::Delegate::op_Inequality(ProgressChanged1, nullptr))
        uPtr(ProgressChanged1)->Invoke(2, this, (::g::Uno::UX::ValueChangedArgs__New2_fn(::TYPES[70/*Uno.UX.ValueChangedArgs<double>*/], uCRef(Progress()), &ret5), ret5));
}

// public generated void add_PageLoaded(Uno.EventHandler value) [instance]
void WebView::add_PageLoaded(uDelegate* value)
{
    PageLoaded1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(PageLoaded1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public generated void remove_PageLoaded(Uno.EventHandler value) [instance]
void WebView::remove_PageLoaded(uDelegate* value)
{
    PageLoaded1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(PageLoaded1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public double get_Progress() [instance]
double WebView::Progress()
{
    return ::g::Fuse::Triggers::IProgress::Progress(uInterface(uPtr(WebViewClient()), ::TYPES[74/*Fuse.Triggers.IProgress*/]));
}

// public generated void add_ProgressChanged(Uno.UX.ValueChangedHandler<double> value) [instance]
void WebView::add_ProgressChanged(uDelegate* value)
{
    ProgressChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(ProgressChanged1, value), ::TYPES[30/*Uno.UX.ValueChangedHandler<double>*/]);
}

// public generated void remove_ProgressChanged(Uno.UX.ValueChangedHandler<double> value) [instance]
void WebView::remove_ProgressChanged(uDelegate* value)
{
    ProgressChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(ProgressChanged1, value), ::TYPES[30/*Uno.UX.ValueChangedHandler<double>*/]);
}

// public void Reload() [instance]
void WebView::Reload()
{
    ::g::Fuse::Controls::IWebView::Reload(uInterface(uPtr(WebViewClient()), ::TYPES[38/*Fuse.Controls.IWebView*/]));
}

// public bool get_ScrollEnabled() [instance]
bool WebView::ScrollEnabled()
{
    return ::g::Fuse::Controls::IWebView::ScrollEnabled(uInterface(uPtr(WebViewClient()), ::TYPES[38/*Fuse.Controls.IWebView*/]));
}

// public void set_ScrollEnabled(bool value) [instance]
void WebView::ScrollEnabled(bool value)
{
    if (WebViewClient() != _fallbackClient)
    {
        ::g::Uno::Diagnostics::Log::Debug(::STRINGS[133/*"ScrollEnabl...*/]);
        return;
    }

    ::g::Fuse::Controls::IWebView::ScrollEnabled(uInterface(uPtr(WebViewClient()), ::TYPES[38/*Fuse.Controls.IWebView*/]), value);
}

// public void SetUrl(string value, Uno.UX.IPropertyListener origin) [instance]
void WebView::SetUrl(uString* value, uObject* origin)
{
    OnPropertyChanged1(WebView::_urlName_, origin);
    ::g::Fuse::Controls::IWebView::Url(uInterface(uPtr(WebViewClient()), ::TYPES[38/*Fuse.Controls.IWebView*/]), value);
    UpdateRestState();
}

// public string get_Source() [instance]
uString* WebView::Source()
{
    return ::g::Fuse::Controls::ISourceReceiver::Source(uInterface(uPtr(WebViewClient()), ::TYPES[82/*Fuse.Controls.ISourceReceiver*/]));
}

// public void set_Source(string value) [instance]
void WebView::Source(uString* value)
{
    ::g::Fuse::Controls::ISourceReceiver::Source(uInterface(uPtr(WebViewClient()), ::TYPES[82/*Fuse.Controls.ISourceReceiver*/]), (value != nullptr) ? value : ::STRINGS[5/*""*/]);
}

// public void Stop() [instance]
void WebView::Stop()
{
    ::g::Fuse::Controls::IWebView::Stop(uInterface(uPtr(WebViewClient()), ::TYPES[38/*Fuse.Controls.IWebView*/]));
}

// internal void UpdateRestState() [instance]
void WebView::UpdateRestState()
{
    OnPropertyChanged1(WebView::_urlName_, (uObject*)this);
    OnHistoryChanged();
}

// public generated void add_URISchemeHandler(Uno.EventHandler value) [instance]
void WebView::add_URISchemeHandler(uDelegate* value)
{
    URISchemeHandler1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(URISchemeHandler1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public generated void remove_URISchemeHandler(Uno.EventHandler value) [instance]
void WebView::remove_URISchemeHandler(uDelegate* value)
{
    URISchemeHandler1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(URISchemeHandler1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public string get_Url() [instance]
uString* WebView::Url()
{
    return ::g::Fuse::Controls::IWebView::Url(uInterface(uPtr(WebViewClient()), ::TYPES[38/*Fuse.Controls.IWebView*/]));
}

// public void set_Url(string value) [instance]
void WebView::Url(uString* value)
{
    SetUrl((value != nullptr) ? value : ::STRINGS[128/*"about:blank"*/], (uObject*)this);
}

// public generated void add_UrlChanged(Uno.EventHandler value) [instance]
void WebView::add_UrlChanged(uDelegate* value)
{
    UrlChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Combine(UrlChanged1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public generated void remove_UrlChanged(Uno.EventHandler value) [instance]
void WebView::remove_UrlChanged(uDelegate* value)
{
    UrlChanged1 = uCast<uDelegate*>(::g::Uno::Delegate::Remove(UrlChanged1, value), ::TYPES[29/*Uno.EventHandler*/]);
}

// public Fuse.Controls.IWebView get_WebViewClient() [instance]
uObject* WebView::WebViewClient()
{
    uObject* ind1;
    ind1 = _webViewClient;
    return (ind1 != nullptr) ? ind1 : (uObject*)_fallbackClient;
}

// public void set_WebViewClient(Fuse.Controls.IWebView value) [instance]
void WebView::WebViewClient(uObject* value)
{
    uString* ind2;
    uString* url = ::STRINGS[128/*"about:blank"*/];
    uString* source = ::STRINGS[5/*""*/];
    uString* baseUrl = nullptr;
    bool zoomEnabled = true;
    bool scrollEnabled = true;
    ::g::Uno::UX::FileSource* file = nullptr;

    if (_webViewClient != nullptr)
    {
        ::g::Fuse::Triggers::IProgress::remove_ProgressChanged(uInterface(uPtr(_webViewClient), ::TYPES[74/*Fuse.Triggers.IProgress*/]), uDelegate::New(::TYPES[30/*Uno.UX.ValueChangedHandler<double>*/], (void*)WebView__OnProgressChanged_fn, this));
        ::g::Fuse::Controls::IWebView::remove_PageLoaded(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]), uDelegate::New(::TYPES[29/*Uno.EventHandler*/], (void*)WebView__OnPageLoaded_fn, this));
        ::g::Fuse::Controls::IWebView::remove_BeginLoading(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]), uDelegate::New(::TYPES[29/*Uno.EventHandler*/], (void*)WebView__OnBeginLoading_fn, this));
        ::g::Fuse::Controls::IWebView::remove_UrlChanged(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]), uDelegate::New(::TYPES[29/*Uno.EventHandler*/], (void*)WebView__OnPageChanged_fn, this));
        ::g::Fuse::Controls::IWebView::remove_URISchemeHandler(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]), URISchemeHandler1);
        ::g::Fuse::Controls::IWebView::remove_BeginDownload(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]), BeginDownload1);
        ::g::Fuse::Controls::IWebView::remove_FileDownloaded(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]), FileDownloaded1);
        url = ::g::Fuse::Controls::IWebView::Url(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]));
        source = (ind2 = ::g::Fuse::Controls::ISourceReceiver::Source(uInterface(uPtr(_webViewClient), ::TYPES[82/*Fuse.Controls.ISourceReceiver*/])), (ind2 != nullptr) ? ind2 : ::STRINGS[5/*""*/]);
        baseUrl = ::g::Fuse::Controls::IWebView::BaseUrl(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]));
        file = ::g::Fuse::Controls::IWebView::File(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]));
        zoomEnabled = ::g::Fuse::Controls::IWebView::ZoomEnabled(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]));
        scrollEnabled = ::g::Fuse::Controls::IWebView::ScrollEnabled(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]));
    }

    _webViewClient = ((value != nullptr) ? value : (uObject*)_fallbackClient);

    if (_webViewClient != nullptr)
    {
        ::g::Fuse::Triggers::IProgress::add_ProgressChanged(uInterface(uPtr(_webViewClient), ::TYPES[74/*Fuse.Triggers.IProgress*/]), uDelegate::New(::TYPES[30/*Uno.UX.ValueChangedHandler<double>*/], (void*)WebView__OnProgressChanged_fn, this));
        ::g::Fuse::Controls::IWebView::add_PageLoaded(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]), uDelegate::New(::TYPES[29/*Uno.EventHandler*/], (void*)WebView__OnPageLoaded_fn, this));
        ::g::Fuse::Controls::IWebView::add_BeginLoading(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]), uDelegate::New(::TYPES[29/*Uno.EventHandler*/], (void*)WebView__OnBeginLoading_fn, this));
        ::g::Fuse::Controls::IWebView::add_UrlChanged(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]), uDelegate::New(::TYPES[29/*Uno.EventHandler*/], (void*)WebView__OnPageChanged_fn, this));
        ::g::Fuse::Controls::IWebView::add_URISchemeHandler(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]), URISchemeHandler1);
        ::g::Fuse::Controls::IWebView::add_BeginDownload(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]), BeginDownload1);
        ::g::Fuse::Controls::IWebView::add_FileDownloaded(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]), FileDownloaded1);
        ::g::Fuse::Controls::IWebView::BaseUrl(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]), baseUrl);
        ::g::Fuse::Controls::ISourceReceiver::Source(uInterface(uPtr(_webViewClient), ::TYPES[82/*Fuse.Controls.ISourceReceiver*/]), source);
        ::g::Fuse::Controls::IWebView::ZoomEnabled(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]), zoomEnabled);
        ::g::Fuse::Controls::IWebView::ScrollEnabled(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]), scrollEnabled);

        if (::g::Uno::String::op_Equality(source, ::STRINGS[5/*""*/]))
            ::g::Fuse::Controls::IWebView::Url(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]), url);

        ::g::Fuse::Controls::IWebView::File(uInterface(uPtr(_webViewClient), ::TYPES[38/*Fuse.Controls.IWebView*/]), file);
        applyFallbackCalls(_webViewClient);
    }
}

// public bool get_ZoomEnabled() [instance]
bool WebView::ZoomEnabled()
{
    return ::g::Fuse::Controls::IWebView::ZoomEnabled(uInterface(uPtr(WebViewClient()), ::TYPES[38/*Fuse.Controls.IWebView*/]));
}

// public void set_ZoomEnabled(bool value) [instance]
void WebView::ZoomEnabled(bool value)
{
    if (WebViewClient() != _fallbackClient)
    {
        ::g::Uno::Diagnostics::Log::Debug(::STRINGS[134/*"ZoomEnabled...*/]);
        return;
    }

    ::g::Fuse::Controls::IWebView::ZoomEnabled(uInterface(uPtr(WebViewClient()), ::TYPES[38/*Fuse.Controls.IWebView*/]), value);
}

// private static void goBack(Fuse.Controls.WebView view) [static]
void WebView::goBack(WebView* view)
{
    WebView_typeof()->Init();
    uPtr(view)->GoBack();
}

// private static void goForward(Fuse.Controls.WebView view) [static]
void WebView::goForward(WebView* view)
{
    WebView_typeof()->Init();
    uPtr(view)->GoForward();
}

// private static void loadHtml(Fuse.Controls.WebView view, object[] args) [static]
void WebView::loadHtml(WebView* view, uArray* args)
{
    WebView_typeof()->Init();

    switch (uPtr(args)->Length())
    {
        case 1:
        {
            uPtr(view)->LoadHtml(uAs<uString*>(uPtr(args)->Strong<uObject*>(0), ::TYPES[81/*string*/]));
            return;
        }
        case 2:
        {
            uPtr(view)->LoadHtml1(uAs<uString*>(uPtr(args)->Strong<uObject*>(0), ::TYPES[81/*string*/]), uAs<uString*>(uPtr(args)->Strong<uObject*>(1), ::TYPES[81/*string*/]));
            return;
        }
        default:
        {
            ::g::Fuse::Diagnostics::UserError(::STRINGS[126/*"WebView.loa...*/], view, ::STRINGS[127/*"/Users/mort...*/], 47, ::STRINGS[124/*"loadHtml"*/], nullptr);
            return;
        }
    }
}

// public WebView New() [static]
WebView* WebView::New4()
{
    WebView* obj3 = (WebView*)uNew(WebView_typeof());
    obj3->ctor_7();
    return obj3;
}

// private static string PreprocUriScheme(string inScheme) [static]
uString* WebView::PreprocUriScheme(uString* inScheme)
{
    WebView_typeof()->Init();
    return ::g::Uno::String::Contains(uPtr(inScheme), ::STRINGS[129/*":"*/]) ? inScheme : (uString*)::g::Uno::String::op_Addition2(inScheme, ::STRINGS[129/*":"*/]);
}

// private static void reload(Fuse.Controls.WebView view) [static]
void WebView::reload(WebView* view)
{
    WebView_typeof()->Init();
    uPtr(view)->Reload();
}

// private static void setBaseUrl(Fuse.Controls.WebView view, object[] args) [static]
void WebView::setBaseUrl(WebView* view, uArray* args)
{
    WebView_typeof()->Init();

    switch (uPtr(args)->Length())
    {
        case 1:
        {
            uPtr(view)->BaseUrl(uAs<uString*>(uPtr(args)->Strong<uObject*>(0), ::TYPES[81/*string*/]));
            return;
        }
        default:
        {
            ::g::Fuse::Diagnostics::UserError(::STRINGS[130/*"WebView.set...*/], view, ::STRINGS[127/*"/Users/mort...*/], 127, ::STRINGS[125/*"setBaseUrl"*/], nullptr);
            return;
        }
    }
}

// private static void setUrl(Fuse.Controls.WebView view, object[] args) [static]
void WebView::setUrl(WebView* view, uArray* args)
{
    WebView_typeof()->Init();

    switch (uPtr(args)->Length())
    {
        case 1:
        {
            uPtr(view)->Url(uAs<uString*>(uPtr(args)->Strong<uObject*>(0), ::TYPES[81/*string*/]));
            return;
        }
        default:
        {
            ::g::Fuse::Diagnostics::UserError(::STRINGS[131/*"WebView.set...*/], view, ::STRINGS[127/*"/Users/mort...*/], 108, ::STRINGS[132/*"setUrl"*/], nullptr);
            return;
        }
    }
}

// private static void stop(Fuse.Controls.WebView view) [static]
void WebView::stop(WebView* view)
{
    WebView_typeof()->Init();
    uPtr(view)->Stop();
}
// }

}}} // ::g::Fuse::Controls
